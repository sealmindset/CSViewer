[{"/Users/robvance/Documents/GitHub/CSViewer/src/index.js":"1","/Users/robvance/Documents/GitHub/CSViewer/src/reportWebVitals.js":"2","/Users/robvance/Documents/GitHub/CSViewer/src/App.js":"3","/Users/robvance/Documents/GitHub/CSViewer/src/RowPopup.js":"4","/Users/robvance/Documents/GitHub/CSViewer/src/JSONFlatten.js":"5"},{"size":535,"mtime":1695552456727,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1690829828997,"results":"8","hashOfConfig":"7"},{"size":26225,"mtime":1698278047463,"results":"9","hashOfConfig":"7"},{"size":2261,"mtime":1698079108819,"results":"10","hashOfConfig":"7"},{"size":2142,"mtime":1695554216615,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cjgje6",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/robvance/Documents/GitHub/CSViewer/src/index.js",[],[],"/Users/robvance/Documents/GitHub/CSViewer/src/reportWebVitals.js",[],[],"/Users/robvance/Documents/GitHub/CSViewer/src/App.js",["28"],[],"import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties } from './JSONFlatten';\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [ignoredKeys, setIgnoredKeys] = useState([]);\n  const [columnsToUncheck, setColumnsToUncheck] = useState([]);\n\n  const [isConfigFileNameModalOpen, setIsConfigFileNameModalOpen] = useState(false);\n  const [configFileName, setConfigFileName] = useState(\"\");\n\n\n  // First useEffect for updating filter criteria\n  useEffect(() => {\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Second useEffect for updating dropdown options\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Third useEffect for setting initial state\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Function to group and sort table data\n  const groupAndSortTableData = useCallback((tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Function to handle file drop\n  const handleDrop = useCallback((acceptedFiles) => {\n    setIsLoading(true);  // Set loading to true\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    //const ignoredKeys = ['lenses', 'metadata', 'subnets']  \n    // Define the array of columns to be unchecked by default\n    //const columnsToUncheck = ['ID', 'TYPE', 'TENANTID', 'KIND', 'LOCATION', 'MANAGEDBY', 'SKU', 'PLAN', 'IDENTITY', 'ZONES', 'EXTENDEDLOCATION'];\n\n    const hasIgnoredKeys = ignoredKeys && ignoredKeys.length > 0;\n    const hasColumnsToUncheck = columnsToUncheck && columnsToUncheck.length > 0;\n\n\n    \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n  \n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            const originalHeaders = Object.keys(result.data[0]);\n  \n            const processedData = result.data.map(row => {\n              let newRow = { ...row };\n  \n              // Process PROPERTIES column\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const filteredProperties = Object.fromEntries(\n                  hasIgnoredKeys ?\n                    Object.entries(flattenedProperties).filter(\n                      ([key]) => !ignoredKeys.some(ignoredKey => key.startsWith(ignoredKey))\n                    )\n                  : Object.entries(flattenedProperties)\n                );\n                newRow = { ...newRow, ...filteredProperties };\n              }\n  \n              // Process TAGS column\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                newRow = { ...newRow, ...flattenedTags };\n              }\n  \n              return newRow;\n            });\n  \n            // Logic to find the longest JSON string for both PROPERTIES and TAGS\n            let maxPropertyKeys = 0;\n            let maxTagKeys = 0;\n            let modelPropertyRow = null;\n            let modelTagRow = null;\n  \n            processedData.forEach(row => {\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const keysCount = Object.keys(flattenedProperties).length;\n                const firstKey = Object.keys(flattenedProperties)[0];\n            \n                if (keysCount > maxPropertyKeys && !ignoredKeys.some(ignoredKey => firstKey.startsWith(ignoredKey))) {\n                  maxPropertyKeys = keysCount;\n                  modelPropertyRow = flattenedProperties;\n                }\n              }\n  \n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                const keysCount = Object.keys(flattenedTags).length;\n                if (keysCount > maxTagKeys) {\n                  maxTagKeys = keysCount;\n                  modelTagRow = flattenedTags;\n                }\n              }\n            });\n  \n            let newHeaders = [...originalHeaders];\n            if (modelPropertyRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelPropertyRow)];\n            }\n            if (modelTagRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelTagRow)];\n            }\n\n            // Identify columns with all null or empty values\n            const emptyColumns = newHeaders.reduce((acc, header) => {\n              const allEmpty = processedData.every(row => \n                row[header] == null || \n                (typeof row[header] === 'string' && row[header].trim() === '') ||\n                (Array.isArray(row[header]) && row[header].length === 0)\n              );\n              if (allEmpty) {\n                acc.push(header);\n              }\n              return acc;\n            }, []);\n\n  \n            setHeaders(newHeaders);\n            setData(processedData);\n            setRenamedHeaders({});\n            setHiddenColumns([...new Set([...emptyColumns, ...columnsToUncheck])]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n\n        if (Array.isArray(jsonData) && jsonData.length > 0 && typeof jsonData[0] === 'object') {\n          setHeaders(Object.keys(jsonData[0]));\n        }\n\n        setData(jsonData);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n      setIsLoading(false);  // Set loading to false\n    };\n\n    reader.readAsText(file);\n   \n  }, [ignoredKeys, columnsToUncheck]);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row && row[header]; // Add a check for 'row'\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupAndSortTableData(data).map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n  \n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n  \n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const filteredData = useCallback(() => {\n    return data.filter(row => {\n      for (const header of headers) {\n        // Check if there's a search term for this header and if the row doesn't match the search term\n        if (searchTerms[header] && !String(row[header]).toLowerCase().includes(searchTerms[header].toLowerCase())) {\n          return false;\n        }\n        // Check if there's a filter criteria for this header and if the row doesn't match the filter criteria\n        if (filterCriteria[header] && row[header] !== filterCriteria[header]) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [data, headers, searchTerms, filterCriteria]);\n\n  const handleSave = (editedRowData) => {\n    const updatedData = data.map((row) => {\n      if (row.id === editedRowData.id) {  // Assuming each row has a unique 'id' field\n        return editedRowData;\n      }\n      return row;\n    });\n    setData(updatedData);\n  };\n\n  const handleConfigUpload = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n  \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n  \n      try {\n        const config = JSON.parse(fileContent);\n  \n        if (config.ignoredKeys && Array.isArray(config.ignoredKeys)) {\n          setIgnoredKeys(config.ignoredKeys);\n        }\n        if (config.columnsToUncheck && Array.isArray(config.columnsToUncheck)) {\n          setColumnsToUncheck(config.columnsToUncheck);\n        }\n  \n      } catch (error) {\n        alert(\"Invalid configuration file. Please upload a valid JSON file.\");\n      }\n    };\n  \n    reader.readAsText(file);\n  }, []);\n  \n\n  const { getRootProps: getConfigRootProps, getInputProps: getConfigInputProps } = useDropzone({\n    onDrop: handleConfigUpload,\n    accept: \".json\", // Only allow JSON files for configuration\n    multiple: false,\n  });\n\n  // Function to handle checkbox toggle for ignoredKeys\n  const toggleIgnoredKey = (key) => {\n    // Your logic to toggle ignored key\n  };\n\n  // Function to handle checkbox toggle for columnsToUncheck\n  const toggleColumnToUncheck = (column) => {\n    // Your logic to toggle column to uncheck\n  };\n\n  const updateIgnoredKey = (index, newValue) => {\n    const newIgnoredKeys = [...ignoredKeys];\n    newIgnoredKeys[index] = newValue;\n    setIgnoredKeys(newIgnoredKeys);\n  };\n  \n  const updateColumnToUncheck = (index, newValue) => {\n    const newColumnsToUncheck = [...columnsToUncheck];\n    newColumnsToUncheck[index] = newValue;\n    setColumnsToUncheck(newColumnsToUncheck);\n  };\n  \n  const addNewIgnoredKey = () => {\n    setIgnoredKeys([...ignoredKeys, \"\"]);\n  };\n\n  const removeIgnoredKey = (index) => {\n    const newIgnoredKeys = [...ignoredKeys];\n    newIgnoredKeys.splice(index, 1);\n    setIgnoredKeys(newIgnoredKeys);\n  };\n\n  const addNewColumnToUncheck = () => {\n    setColumnsToUncheck([...columnsToUncheck, \"\"]);\n  };\n\n  const removeColumnToUncheck = (index) => {\n    const newColumnsToUncheck = [...columnsToUncheck];\n    newColumnsToUncheck.splice(index, 1);\n    setColumnsToUncheck(newColumnsToUncheck);\n  };\n\n  const saveConfigToFile = () => {\n    const config = {\n      ignoredKeys,\n      columnsToUncheck\n    };\n  \n    const dataToExport = JSON.stringify(config, null, 2);\n    const blob = new Blob([dataToExport], { type: 'text/json;charset=utf-8;' });\n    const link = document.createElement('a');\n  \n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${configFileName}.json`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  \n    // Close the filename modal and reset the filename\n    setIsConfigFileNameModalOpen(false);\n    setConfigFileName(\"\");\n  };\n  \n  \n  const promptConfigFileName = () => {\n    setIsConfigFileNameModalOpen(true);\n  };\n\n  const handleConfigFileNameSubmit = () => {\n    setIsConfigFileNameModalOpen(false);\n    if (configFileName.trim() !== \"\") {\n      saveConfigToFile();\n    }\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"header\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 1.5: Exceptype Upload */}\n      <div className=\"exceptup\">\n        <h2>Fields to ignore</h2>\n        <div {...getConfigRootProps()} className=\"dropzone\">\n          <input {...getConfigInputProps()} />\n          <p>Drag 'n' drop a Config JSON file here, or click to select a file</p>\n        </div>\n      </div>\n      \n      {/* Section 1.6: Exceptype Tables */}\n      <div className=\"exceptype\">\n        {/* Table for ignoredKeys */}\n        <table style={{ width: '100%', marginTop: '20px' }}>\n          <thead>\n            <tr>\n              <th style={{ width: '1%' }}> </th>\n              <th>Ignore Column Headers</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ignoredKeys.map((key, index) => (\n              <tr key={index}>\n                <td><input type=\"checkbox\" onChange={() => toggleIgnoredKey(key)} /></td>\n                <td><input type=\"text\" value={key} onChange={(e) => updateIgnoredKey(index, e.target.value)} /></td>\n                <td><button onClick={() => removeIgnoredKey(index)}>Remove</button></td> {/* Add this if you want a remove button */}\n              </tr>\n            ))}\n            <tr><button onClick={addNewIgnoredKey}>Add Row</button></tr>\n          </tbody>\n        </table>\n\n        {/* Table for columnsToUncheck */}\n        <table style={{ width: '100%', marginTop: '20px' }}>\n          <thead>\n            <tr>\n              <th style={{ width: '1%' }}> </th>\n              <th>Hide Columns</th>\n            </tr>\n          </thead>\n          <tbody>\n            {columnsToUncheck.map((column, index) => (\n              <tr key={index}>\n                <td><input type=\"checkbox\" onChange={() => toggleColumnToUncheck(column)} /></td>\n                <td><input type=\"text\" value={column} onChange={(e) => updateColumnToUncheck(index, e.target.value)} /></td>\n                <td><button onClick={() => removeColumnToUncheck(index)}>Remove</button></td>\n              </tr>\n            ))}\n            <tr><button onClick={addNewColumnToUncheck}>Add Row</button></tr>\n          </tbody>\n        </table>\n        <button onClick={promptConfigFileName}>Save Config</button>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"upload\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n\n        </div>\n      </div>\n\n      {isLoading && <div className=\"spinner\"></div>}\n\n       {/* Section 3: Toggle Section */}\n       <div className=\"toggle\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            {/* Toggle Section */}\n            <tbody>\n              {Array.isArray(headers) && headers.map((header) => {\n                const truncatedHeaderValue = (renamedHeaders[header] || header).substring(0, 100);\n                return (\n                  <tr key={header}>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        checked={!hiddenColumns.includes(header)}\n                        onChange={(e) => handleColumnToggle(e, header)}\n                      />\n                    </td>\n                    <td className=\"field-name-cell\">\n                      <input\n                        type=\"text\"\n                        className=\"rename-input\"\n                        value={truncatedHeaderValue}\n                        onChange={(e) =>\n                          setRenamedHeaders((prevRenamedHeaders) => ({\n                            ...prevRenamedHeaders,\n                            [header]: e.target.value,\n                          }))\n                        }\n                        maxLength={100}\n                      />\n                    </td>\n                    <td className=\"group-by-label\">\n                      <label>\n                        Group By:\n                        <input\n                          type=\"checkbox\"\n                          checked={groupByColumns[header]}\n                          onChange={(e) => handleGroupByToggle(e, header)}\n                        />\n                      </label>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"filter\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: e.target.value,\n                            }));\n                          }}\n                          maxLength={100}\n                          style={{ width: \"98%\" }}\n                        />\n                      </td>\n                      <td>\n                        <select\n                          value={filterCriteria[header] || \"\"}\n                          onChange={(e) => {\n                            setFilterCriteria((prevFilterCriteria) => ({\n                              ...prevFilterCriteria,\n                              [header]: e.target.value,\n                            }));\n                          }}\n                        >\n                          <option value=\"\">All</option>\n                          {dropdownOptions[header]?.map((option) => {\n                              if (!option) return null;  // Add this line to handle undefined or null options\n                              const truncatedOption = option.length > 100 ? option.substring(0, 100) + \"...\" : option;\n                              return (\n                                  <option key={option} value={option}>\n                                      {truncatedOption}\n                                  </option>\n                              );\n                          })}\n\n                        </select>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 5: Table Section */}\n      <div className=\"table-section\">\n        <DataTable\n          title=\"CSV|JSON Data\"\n          columns={columns}\n          data={groupAndSortTableData(filteredData())}\n          pagination\n          highlightOnHover\n          pointerOnHover\n          onRowClicked={handleRowClick}\n        />\n      </div>\n\n      {/* Section 6: Reset and Download Section */}\n      <div className=\"download\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={() => promptFileName(\"csv\")}>Download as CSV</button>\n        <button onClick={() => promptFileName(\"json\")}>Download as JSON</button>\n      </div>\n\n      {/* Section 7: Modal Section */}\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n        <RowPopup \n            data={selectedRowData} \n            headers={headers}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)}\n            onSave={handleSave}  // Pass the handleSave function here\n        />\n      </Modal>\n\n      {/* Section 8: File Name Modal */}\n      <Modal isOpen={isFileNameModalOpen} onRequestClose={() => setIsFileNameModalOpen(false)}>\n        <div className=\"file-name-modal\">\n          <h2>Enter File Name</h2>\n          <input\n            type=\"text\"\n            value={fileName}\n            onChange={(e) => setFileName(e.target.value)}\n            placeholder=\"Enter file name without extension\"\n          />\n          <div className=\"file-name-modal-buttons\">\n            <button onClick={handleFileNameSubmit}>Submit</button>\n            <button onClick={() => setIsFileNameModalOpen(false)}>Cancel</button>\n          </div>\n        </div>\n      </Modal>\n\n      {/* Config File Name Modal */}\n      <Modal isOpen={isConfigFileNameModalOpen} onRequestClose={() => setIsConfigFileNameModalOpen(false)}>\n        <div className=\"file-name-modal\">\n          <h2>Enter Config File Name</h2>\n          <input\n            type=\"text\"\n            value={configFileName}\n            onChange={(e) => setConfigFileName(e.target.value)}\n            placeholder=\"Enter file name without extension\"\n          />\n          <div className=\"file-name-modal-buttons\">\n            <button onClick={handleConfigFileNameSubmit}>Submit</button>\n            <button onClick={() => setIsConfigFileNameModalOpen(false)}>Cancel</button>\n          </div>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;","/Users/robvance/Documents/GitHub/CSViewer/src/RowPopup.js",[],[],"/Users/robvance/Documents/GitHub/CSViewer/src/JSONFlatten.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":118,"column":11,"nodeType":"31","messageId":"32","endLine":118,"endColumn":30},"no-unused-vars","'hasColumnsToUncheck' is assigned a value but never used.","Identifier","unusedVar"]