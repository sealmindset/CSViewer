{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  useEffect(() => {\n    // Refresh filter criteria when renamedHeaders change\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      Object.entries(prevCriteria).forEach(([column, value]) => {\n        const newColumn = renamedHeaders[column] || column;\n        updatedCriteria[newColumn] = value;\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders]);\n  useEffect(() => {\n    // Update dropdown options when searchTerms change\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    // Save the initial state for reset\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Create a function to handle file drop using react-dropzone\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: result => {\n        setData(result.data);\n        setHeaders(result.meta.fields);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n      }\n    });\n  }, []);\n\n  // Use react-dropzone hook\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv\",\n    multiple: false // Allow only single file drop\n  });\n\n  const handleRowClick = rowData => {\n    setSelectedRowData(rowData);\n    setIsModalOpen(true);\n  };\n\n  // Add the \"groupby\" column to the headers and columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const filteredData = useMemo(() => {\n    if (Object.keys(filterCriteria).length === 0 && Object.keys(searchTerms).length === 0) return data;\n    return data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n  }, [data, headers, filterCriteria, searchTerms]);\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHidden => {\n      if (isChecked) {\n        return prevHidden.filter(col => col !== column);\n      } else {\n        return [...prevHidden, column];\n      }\n    });\n    // Update the renamedHeaders state with the edited field name\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        // Reset field name to default when column is hidden\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => {\n      const updatedColumns = {\n        ...prevGroupByColumns\n      };\n      if (isChecked) {\n        updatedColumns[column] = true;\n      } else {\n        delete updatedColumns[column];\n      }\n      return updatedColumns;\n    });\n  };\n  const groupedData = useMemo(() => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return filteredData;\n    }\n\n    // Create groups based on selected columns\n    const groups = {};\n    filteredData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Merge the groups and return the result\n    return Object.values(groups).flat();\n  }, [filteredData, groupByColumns]);\n  const handleFilterChange = useCallback((event, column) => {\n    const value = event.target.value;\n    const newColumn = renamedHeaders[column] || column;\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {\n        ...prevCriteria,\n        [newColumn]: value\n      };\n      if (dropdownOptions[column] && !dropdownOptions[column].includes(value)) {\n        const closestMatch = dropdownOptions[column].find(option => option.toLowerCase().startsWith(value.toLowerCase()));\n        if (closestMatch) {\n          updatedCriteria[newColumn] = closestMatch;\n        }\n      }\n      return updatedCriteria;\n    });\n    setSearchTerms(prevSearchTerms => ({\n      ...prevSearchTerms,\n      [column]: value\n    }));\n  }, [renamedHeaders, dropdownOptions]);\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const handleDownloadCSV = () => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    const csv = Papa.unparse(visibleData, {\n      header: true\n    });\n    const blob = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"filtered_data.csv\");\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const handleDownloadJSON = () => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    const json = JSON.stringify(visibleData, null, 2);\n    const blob = new Blob([json], {\n      type: \"application/json;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"filtered_data.json\");\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: groupByColumns[header],\n                  onChange: e => handleGroupByToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"IdvdctrkVe5uMnbzh8dwovylMJY=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","useCallback","Papa","Modal","RowPopup","DataTable","useDropzone","jsxDEV","_jsxDEV","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","prevCriteria","updatedCriteria","Object","entries","forEach","column","value","newColumn","prevOptions","updatedOptions","header","includes","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","handleDrop","acceptedFiles","file","parse","skipEmptyLines","complete","result","meta","fields","getRootProps","getInputProps","onDrop","accept","multiple","handleRowClick","rowData","groupByColumn","updatedHeaders","slice","columns","name","selector","sortable","wrap","format","length","substring","omit","grow","filteredData","keys","every","criteria","handleColumnToggle","event","isChecked","target","checked","prevHidden","col","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","updatedColumns","groupedData","groups","groupKey","selected","join","push","values","flat","handleFilterChange","closestMatch","find","option","startsWith","prevSearchTerms","handleReset","handleDownloadCSV","visibleData","reduce","acc","csv","unparse","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","handleDownloadJSON","json","JSON","stringify","className","children","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","maxLength","width","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useMemo, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n\n  useEffect(() => {\n    // Refresh filter criteria when renamedHeaders change\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      Object.entries(prevCriteria).forEach(([column, value]) => {\n        const newColumn = renamedHeaders[column] || column;\n        updatedCriteria[newColumn] = value;\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders]);\n\n  useEffect(() => {\n    // Update dropdown options when searchTerms change\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    // Save the initial state for reset\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Create a function to handle file drop using react-dropzone\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (result) => {\n        setData(result.data);\n        setHeaders(result.meta.fields);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n      },\n    });\n  }, []);\n\n  // Use react-dropzone hook\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv\",\n    multiple: false, // Allow only single file drop\n  });\n\n  const handleRowClick = (rowData) => {\n    setSelectedRowData(rowData);\n    setIsModalOpen(true);\n  };\n\n  // Add the \"groupby\" column to the headers and columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const filteredData = useMemo(() => {\n    if (Object.keys(filterCriteria).length === 0 && Object.keys(searchTerms).length === 0)\n      return data;\n    return data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHidden) => {\n      if (isChecked) {\n        return prevHidden.filter((col) => col !== column);\n      } else {\n        return [...prevHidden, column];\n      }\n    });\n    // Update the renamedHeaders state with the edited field name\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        // Reset field name to default when column is hidden\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => {\n      const updatedColumns = { ...prevGroupByColumns };\n      if (isChecked) {\n        updatedColumns[column] = true;\n      } else {\n        delete updatedColumns[column];\n      }\n      return updatedColumns;\n    });\n  };\n\n  const groupedData = useMemo(() => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return filteredData;\n    }\n\n    // Create groups based on selected columns\n    const groups = {};\n    filteredData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Merge the groups and return the result\n    return Object.values(groups).flat();\n  }, [filteredData, groupByColumns]);\n\n  const handleFilterChange = useCallback(\n    (event, column) => {\n      const value = event.target.value;\n      const newColumn = renamedHeaders[column] || column;\n      setFilterCriteria((prevCriteria) => {\n        const updatedCriteria = { ...prevCriteria, [newColumn]: value };\n        if (dropdownOptions[column] && !dropdownOptions[column].includes(value)) {\n          const closestMatch = dropdownOptions[column].find(\n            (option) => option.toLowerCase().startsWith(value.toLowerCase())\n          );\n          if (closestMatch) {\n            updatedCriteria[newColumn] = closestMatch;\n          }\n        }\n        return updatedCriteria;\n      });\n      setSearchTerms((prevSearchTerms) => ({\n        ...prevSearchTerms,\n        [column]: value,\n      }));\n    },\n    [renamedHeaders, dropdownOptions]\n  );\n\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const handleDownloadCSV = () => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n    const csv = Papa.unparse(visibleData, { header: true });\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"filtered_data.csv\");\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleDownloadJSON = () => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n    const json = JSON.stringify(visibleData, null, 2);\n    const blob = new Blob([json], { type: \"application/json;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", \"filtered_data.json\");\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* ... */}\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={groupByColumns[header]}\n                      onChange={(e) => handleGroupByToggle(e, header)}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {/* ... */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}