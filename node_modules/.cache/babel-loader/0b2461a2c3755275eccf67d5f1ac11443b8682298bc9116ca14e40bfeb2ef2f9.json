{"ast":null,"code":"// utils.js\n\nconst flattenObject = (obj, parentKey = \"\") => {\n  return Object.keys(obj).reduce((acc, key) => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n    const value = obj[key];\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      const flattened = flattenObject(value, newKey);\n      Object.assign(acc, flattened);\n    } else {\n      acc[newKey] = value;\n    }\n    return acc;\n  }, {});\n};\nexport const flattenJSONColumns = (data, columns) => {\n  const newData = data.map(row => {\n    const flattenedRow = {\n      ...row\n    };\n    columns.forEach(column => {\n      if (flattenedRow[column]) {\n        try {\n          const parsedJson = JSON.parse(flattenedRow[column]);\n          const flattenedObject = flattenObject(parsedJson);\n          delete flattenedRow[column];\n          Object.assign(flattenedRow, flattenedObject);\n        } catch (error) {\n          console.error(`Error parsing JSON in column \"${column}\"`, error);\n        }\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};","map":{"version":3,"names":["flattenObject","obj","parentKey","Object","keys","reduce","acc","key","newKey","value","Array","isArray","flattened","assign","flattenJSONColumns","data","columns","newData","map","row","flattenedRow","forEach","column","parsedJson","JSON","parse","flattenedObject","error","console"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["// utils.js\n\nconst flattenObject = (obj, parentKey = \"\") => {\n  return Object.keys(obj).reduce((acc, key) => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n    const value = obj[key];\n\n    if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n      const flattened = flattenObject(value, newKey);\n      Object.assign(acc, flattened);\n    } else {\n      acc[newKey] = value;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const flattenJSONColumns = (data, columns) => {\n  const newData = data.map((row) => {\n    const flattenedRow = { ...row };\n    columns.forEach((column) => {\n      if (flattenedRow[column]) {\n        try {\n          const parsedJson = JSON.parse(flattenedRow[column]);\n          const flattenedObject = flattenObject(parsedJson);\n          delete flattenedRow[column];\n          Object.assign(flattenedRow, flattenedObject);\n        } catch (error) {\n          console.error(`Error parsing JSON in column \"${column}\"`, error);\n        }\n      }\n    });\n    return flattenedRow;\n  });\n\n  return newData;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGA,CAACC,GAAG,EAAEC,SAAS,GAAG,EAAE,KAAK;EAC7C,OAAOC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC3C,MAAMC,MAAM,GAAGN,SAAS,GAAI,GAAEA,SAAU,IAAGK,GAAI,EAAC,GAAGA,GAAG;IACtD,MAAME,KAAK,GAAGR,GAAG,CAACM,GAAG,CAAC;IAEtB,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACxE,MAAMG,SAAS,GAAGZ,aAAa,CAACS,KAAK,EAAED,MAAM,CAAC;MAC9CL,MAAM,CAACU,MAAM,CAACP,GAAG,EAAEM,SAAS,CAAC;IAC/B,CAAC,MAAM;MACLN,GAAG,CAACE,MAAM,CAAC,GAAGC,KAAK;IACrB;IAEA,OAAOH,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;AACR,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EACnD,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAEC,GAAG,IAAK;IAChC,MAAMC,YAAY,GAAG;MAAE,GAAGD;IAAI,CAAC;IAC/BH,OAAO,CAACK,OAAO,CAAEC,MAAM,IAAK;MAC1B,IAAIF,YAAY,CAACE,MAAM,CAAC,EAAE;QACxB,IAAI;UACF,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAACE,MAAM,CAAC,CAAC;UACnD,MAAMI,eAAe,GAAG1B,aAAa,CAACuB,UAAU,CAAC;UACjD,OAAOH,YAAY,CAACE,MAAM,CAAC;UAC3BnB,MAAM,CAACU,MAAM,CAACO,YAAY,EAAEM,eAAe,CAAC;QAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAE,iCAAgCL,MAAO,GAAE,EAAEK,KAAK,CAAC;QAClE;MACF;IACF,CAAC,CAAC;IACF,OAAOP,YAAY;EACrB,CAAC,CAAC;EAEF,OAAOH,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}