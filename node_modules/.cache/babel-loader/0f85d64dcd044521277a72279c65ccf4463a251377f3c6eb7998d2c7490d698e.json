{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/JSONFlatten.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map(item => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n  return flattenedData;\n};\nconst mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = {\n    ...originalRow\n  };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    try {\n      const properties = JSON.parse(originalRow.PROPERTIES);\n      if (typeof properties === 'object' && properties !== null) {\n        // Merge properties object with newRow, handling nested objects\n        const mergeObjects = (obj, parentKey = '') => {\n          for (const key in obj) {\n            const value = obj[key];\n            const newKey = parentKey ? `${parentKey}_${key}` : key;\n            if (typeof value === 'object' && value !== null) {\n              mergeObjects(value, newKey);\n            } else {\n              newRow[newKey] = value;\n            }\n          }\n        };\n        mergeObjects(properties);\n      }\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n    }\n  }\n\n  // Merge flattenedProperties into newRow\n  for (const key in flattenedProperties) {\n    newRow[key] = flattenedProperties[key];\n  }\n  return newRow;\n};\nconst CSVProcessor = () => {\n  _s();\n  const [inputFile, setInputFile] = useState(null);\n  const [outputFileLink, setOutputFileLink] = useState(null);\n  const processCSV = async () => {\n    if (!inputFile) return;\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const csvData = e.target.result;\n      const rows = Papa.parse(csvData, {\n        header: true\n      }).data;\n      const uniqueRows = new Set();\n      const outputRows = [];\n      for (const row of rows) {\n        const properties = row.PROPERTIES;\n        const flattenedProperties = flattenProperties(properties);\n        const newRow = mergeRow(flattenedProperties, row);\n        delete newRow.PROPERTIES;\n        const rowString = JSON.stringify(newRow);\n        if (!uniqueRows.has(rowString)) {\n          uniqueRows.add(rowString);\n          outputRows.push(newRow);\n        }\n      }\n      const csvOutput = Papa.unparse(outputRows);\n      const blob = new Blob([csvOutput], {\n        type: 'text/csv'\n      });\n      const url = URL.createObjectURL(blob);\n      setOutputFileLink(url);\n    };\n    reader.readAsText(inputFile);\n  };\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setInputFile(file);\n  };\n  const downloadOutputCSV = () => {\n    if (outputFileLink) {\n      axios.get(outputFileLink, {\n        responseType: 'blob'\n      }).then(res => {\n        const url = window.URL.createObjectURL(new Blob([res.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'output.csv');\n        document.body.appendChild(link);\n        link.click();\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CSV Processor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processCSV,\n      children: \"Process CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), outputFileLink && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"CSV file has been flattened!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadOutputCSV,\n        children: \"Download Output CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(CSVProcessor, \"gQ8lx06zNK4eh9QrUYL4CjgrFMo=\");\n_c = CSVProcessor;\nexport default CSVProcessor;\nvar _c;\n$RefreshReg$(_c, \"CSVProcessor\");","map":{"version":3,"names":["React","useState","Papa","axios","jsxDEV","_jsxDEV","flattenProperties","data","prefix","flattenedData","flattenObject","obj","parentKey","key","value","newKey","parsedData","JSON","parse","error","split","map","item","trim","mergeRow","flattenedProperties","originalRow","newRow","hasOwnProperty","properties","PROPERTIES","mergeObjects","console","warn","CSVProcessor","_s","inputFile","setInputFile","outputFileLink","setOutputFileLink","processCSV","reader","FileReader","onload","e","csvData","target","result","rows","header","uniqueRows","Set","outputRows","row","rowString","stringify","has","add","push","csvOutput","unparse","blob","Blob","type","url","URL","createObjectURL","readAsText","handleFileChange","file","files","downloadOutputCSV","get","responseType","then","res","window","link","document","createElement","href","setAttribute","body","appendChild","click","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/JSONFlatten.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport axios from 'axios';\n\nconst flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map((item) => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n\n  return flattenedData;\n};\n\nconst mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = { ...originalRow };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    try {\n      const properties = JSON.parse(originalRow.PROPERTIES);\n      if (typeof properties === 'object' && properties !== null) {\n        // Merge properties object with newRow, handling nested objects\n        const mergeObjects = (obj, parentKey = '') => {\n          for (const key in obj) {\n            const value = obj[key];\n            const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n            if (typeof value === 'object' && value !== null) {\n              mergeObjects(value, newKey);\n            } else {\n              newRow[newKey] = value;\n            }\n          }\n        };\n        mergeObjects(properties);\n      }\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n    }\n  }\n\n  // Merge flattenedProperties into newRow\n  for (const key in flattenedProperties) {\n    newRow[key] = flattenedProperties[key];\n  }\n\n  return newRow;\n};\n\n\nconst CSVProcessor = () => {\n  const [inputFile, setInputFile] = useState(null);\n  const [outputFileLink, setOutputFileLink] = useState(null);\n\n  const processCSV = async () => {\n    if (!inputFile) return;\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const csvData = e.target.result;\n      const rows = Papa.parse(csvData, { header: true }).data;\n\n      const uniqueRows = new Set();\n      const outputRows = [];\n\n      for (const row of rows) {\n        const properties = row.PROPERTIES;\n        const flattenedProperties = flattenProperties(properties);\n\n        const newRow = mergeRow(flattenedProperties, row);\n\n        delete newRow.PROPERTIES;\n\n        const rowString = JSON.stringify(newRow);\n        if (!uniqueRows.has(rowString)) {\n          uniqueRows.add(rowString);\n          outputRows.push(newRow);\n        }\n      }\n\n      const csvOutput = Papa.unparse(outputRows);\n      const blob = new Blob([csvOutput], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      setOutputFileLink(url);\n    };\n\n    reader.readAsText(inputFile);\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    setInputFile(file);\n  };\n\n  const downloadOutputCSV = () => {\n    if (outputFileLink) {\n      axios.get(outputFileLink, { responseType: 'blob' }).then((res) => {\n        const url = window.URL.createObjectURL(new Blob([res.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'output.csv');\n        document.body.appendChild(link);\n        link.click();\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h1>CSV Processor</h1>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={processCSV}>Process CSV</button>\n      {outputFileLink && (\n        <div>\n          <p>CSV file has been flattened!</p>\n          <button onClick={downloadOutputCSV}>Download Output CSV</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CSVProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}