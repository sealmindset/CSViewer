{"ast":null,"code":"// utils.js\n\nexport const flattenData = (data, columns) => {\n  // Function to flatten the data based on selected columns\n  const newData = data.map(row => {\n    const flattenedRow = {};\n    columns.forEach(column => {\n      if (row[column] && typeof row[column] === \"object\") {\n        Object.keys(row[column]).forEach(key => {\n          flattenedRow[`${column}.${key}`] = row[column][key];\n        });\n      } else {\n        flattenedRow[column] = row[column];\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\nexport const flattenJSONColumns = (data, columns) => {\n  // Function to flatten JSON objects in the data based on selected columns\n  const newData = data.map(row => {\n    const flattenedRow = {\n      ...row\n    };\n    columns.forEach(column => {\n      if (flattenedRow[column] && typeof flattenedRow[column] === \"object\") {\n        flattenedRow[column] = JSON.stringify(flattenedRow[column]);\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};","map":{"version":3,"names":["flattenData","data","columns","newData","map","row","flattenedRow","forEach","column","Object","keys","key","flattenJSONColumns","JSON","stringify"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["// utils.js\n\nexport const flattenData = (data, columns) => {\n  // Function to flatten the data based on selected columns\n  const newData = data.map((row) => {\n    const flattenedRow = {};\n    columns.forEach((column) => {\n      if (row[column] && typeof row[column] === \"object\") {\n        Object.keys(row[column]).forEach((key) => {\n          flattenedRow[`${column}.${key}`] = row[column][key];\n        });\n      } else {\n        flattenedRow[column] = row[column];\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\n\nexport const flattenJSONColumns = (data, columns) => {\n  // Function to flatten JSON objects in the data based on selected columns\n  const newData = data.map((row) => {\n    const flattenedRow = { ...row };\n    columns.forEach((column) => {\n      if (flattenedRow[column] && typeof flattenedRow[column] === \"object\") {\n        flattenedRow[column] = JSON.stringify(flattenedRow[column]);\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,WAAW,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EAC5C;EACA,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAEC,GAAG,IAAK;IAChC,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvBJ,OAAO,CAACK,OAAO,CAAEC,MAAM,IAAK;MAC1B,IAAIH,GAAG,CAACG,MAAM,CAAC,IAAI,OAAOH,GAAG,CAACG,MAAM,CAAC,KAAK,QAAQ,EAAE;QAClDC,MAAM,CAACC,IAAI,CAACL,GAAG,CAACG,MAAM,CAAC,CAAC,CAACD,OAAO,CAAEI,GAAG,IAAK;UACxCL,YAAY,CAAE,GAAEE,MAAO,IAAGG,GAAI,EAAC,CAAC,GAAGN,GAAG,CAACG,MAAM,CAAC,CAACG,GAAG,CAAC;QACrD,CAAC,CAAC;MACJ,CAAC,MAAM;QACLL,YAAY,CAACE,MAAM,CAAC,GAAGH,GAAG,CAACG,MAAM,CAAC;MACpC;IACF,CAAC,CAAC;IACF,OAAOF,YAAY;EACrB,CAAC,CAAC;EACF,OAAOH,OAAO;AAChB,CAAC;AAED,OAAO,MAAMS,kBAAkB,GAAGA,CAACX,IAAI,EAAEC,OAAO,KAAK;EACnD;EACA,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAEC,GAAG,IAAK;IAChC,MAAMC,YAAY,GAAG;MAAE,GAAGD;IAAI,CAAC;IAC/BH,OAAO,CAACK,OAAO,CAAEC,MAAM,IAAK;MAC1B,IAAIF,YAAY,CAACE,MAAM,CAAC,IAAI,OAAOF,YAAY,CAACE,MAAM,CAAC,KAAK,QAAQ,EAAE;QACpEF,YAAY,CAACE,MAAM,CAAC,GAAGK,IAAI,CAACC,SAAS,CAACR,YAAY,CAACE,MAAM,CAAC,CAAC;MAC7D;IACF,CAAC,CAAC;IACF,OAAOF,YAAY;EACrB,CAAC,CAAC;EACF,OAAOH,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}