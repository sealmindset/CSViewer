{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  // Initial state setup\n  const initialGroupByColumns = {};\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState(initialGroupByColumns);\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n\n  // Define missing functions\n  const groupAndSortTableData = useCallback(tableData => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    // Perform processing of uploaded CSV data\n    if (data.length > 0) {\n      // Flatten the 'PROPERTIES' column in each row\n      const flattenedData = data.map(row => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return {\n            ...row,\n            ...flattenJSON(properties)\n          };\n        }\n        return row;\n      });\n      setData(flattenedData);\n      setHeaders(Object.keys(flattenedData[0]));\n      setRenamedHeaders({});\n      setHiddenColumns([]);\n      setFilterCriteria({});\n      setSearchTerms({});\n      setDropdownOptions({});\n      setGroupByColumns(initialGroupByColumns); // Reset the groupByColumns to initial state\n    }\n  }, [data]);\n  useEffect(() => {\n    // Perform grouping and sorting based on groupByColumns\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns, groupAndSortTableData]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop\n  });\n  const updatedHeaders = [...headers.slice(0, 1), \"groupby\", ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => {\n    if (header.startsWith(\"PROPERTIES_\")) {\n      return {\n        name: header.substring(\"PROPERTIES_\".length),\n        selector: header,\n        sortable: true,\n        wrap: true,\n        format: row => {\n          const value = row[header];\n          if (value && value.length > 100) {\n            return value.substring(0, 100) + \"...\";\n          }\n          return value;\n        },\n        omit: hiddenColumns.includes(header),\n        grow: 1\n      };\n    }\n    return {\n      name: renamedHeaders[header] || header,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: row => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === \"groupby\" || hiddenColumns.includes(header),\n      grow: 1\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV | JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 397,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 399,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"lx/agJxNRVIGtVvGdNIEPApm1Bw=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","initialGroupByColumns","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","groupAndSortTableData","tableData","Object","keys","length","groups","forEach","row","groupKey","entries","map","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","includes","localeCompare","prevCriteria","updatedCriteria","header","newColumn","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","filteredValues","filter","value","flattenedData","properties","JSON","parse","filteredData","every","criteria","groupedAndSortedData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","skipEmptyLines","complete","jsonData","alert","readAsText","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","updatedHeaders","handleGroupByToggle","prevGroupByColumns","handleReset","handleRowClick","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","format","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","getRootProps","getInputProps","onDrop","slice","columns","startsWith","substring","selector","sortable","wrap","omit","grow","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  // Initial state setup\n  const initialGroupByColumns = {};\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState(initialGroupByColumns);\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n\n  // Define missing functions\n  const groupAndSortTableData = useCallback((tableData) => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups)\n      .flat()\n      .sort((a, b) => {\n        // Sort based on the first selected groupBy column\n        const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n        if (sortByColumn) {\n          const [sortBy, _] = sortByColumn;\n          const aValue = a[sortBy];\n          const bValue = b[sortBy];\n          if (!hiddenColumns.includes(sortBy)) {\n            return aValue.localeCompare(bValue);\n          }\n        }\n        return 0;\n      });\n  }, [groupByColumns, hiddenColumns]);\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter((value) => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    // Perform processing of uploaded CSV data\n    if (data.length > 0) {\n      // Flatten the 'PROPERTIES' column in each row\n      const flattenedData = data.map((row) => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return { ...row, ...flattenJSON(properties) };\n        }\n        return row;\n      });\n\n      setData(flattenedData);\n      setHeaders(Object.keys(flattenedData[0]));\n      setRenamedHeaders({});\n      setHiddenColumns([]);\n      setFilterCriteria({});\n      setSearchTerms({});\n      setDropdownOptions({});\n      setGroupByColumns(initialGroupByColumns); // Reset the groupByColumns to initial state\n    }\n  }, [data]);\n\n  useEffect(() => {\n    // Perform grouping and sorting based on groupByColumns\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns, groupAndSortTableData]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        return [...prevHiddenColumns, column];\n      }\n    });\n\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n  });\n\n  const updatedHeaders = [...headers.slice(0, 1), \"groupby\", ...headers.slice(1)];\n  const columns = updatedHeaders.map((header) => {\n    if (header.startsWith(\"PROPERTIES_\")) {\n      return {\n        name: header.substring(\"PROPERTIES_\".length),\n        selector: header,\n        sortable: true,\n        wrap: true,\n        format: (row) => {\n          const value = row[header];\n          if (value && value.length > 100) {\n            return value.substring(0, 100) + \"...\";\n          }\n          return value;\n        },\n        omit: hiddenColumns.includes(header),\n        grow: 1,\n      };\n    }\n    return {\n      name: renamedHeaders[header] || header,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: (row) => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === \"groupby\" || hiddenColumns.includes(header),\n      grow: 1,\n    };\n  });\n\nreturn (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CSV File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV | JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,SAAS,MAAM,4BAA4B;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,WAAW,QAAQ,SAAS;AACrC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnBJ,KAAK,CAACK,aAAa,CAAC,OAAO,CAAC;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAMC,qBAAqB,GAAG,CAAC,CAAC;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAAC2B,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAACc,qBAAqB,CAAC;EAC3E,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACmC,WAAW,EAAEC,cAAc,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACqC,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMuC,qBAAqB,GAAGrC,WAAW,CAAEsC,SAAS,IAAK;IACvD,IAAI,CAACA,SAAS,IAAIC,MAAM,CAACC,IAAI,CAACX,cAAc,CAAC,CAACY,MAAM,KAAK,CAAC,EAAE;MAC1D,OAAOH,SAAS;IAClB;IAEA,MAAMI,MAAM,GAAG,CAAC,CAAC;IACjBJ,SAAS,CAACK,OAAO,CAAEC,GAAG,IAAK;MACzB,MAAMC,QAAQ,GAAGN,MAAM,CAACO,OAAO,CAACjB,cAAc,CAAC,CAC5CkB,GAAG,CAAC,CAAC,CAACC,MAAM,EAAEC,QAAQ,CAAC,KAAMA,QAAQ,GAAGL,GAAG,CAACI,MAAM,CAAC,GAAG,EAAG,CAAC,CAC1DE,IAAI,CAAC,GAAG,CAAC;MACZ,IAAI,CAACR,MAAM,CAACG,QAAQ,CAAC,EAAE;QACrBH,MAAM,CAACG,QAAQ,CAAC,GAAG,EAAE;MACvB;MACAH,MAAM,CAACG,QAAQ,CAAC,CAACM,IAAI,CAACP,GAAG,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACA,OAAOL,MAAM,CAACa,MAAM,CAACV,MAAM,CAAC,CACzBW,IAAI,CAAC,CAAC,CACNC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd;MACA,MAAMC,YAAY,GAAGlB,MAAM,CAACO,OAAO,CAACjB,cAAc,CAAC,CAAC6B,IAAI,CAAC,CAAC,CAACV,MAAM,EAAEC,QAAQ,CAAC,KAAKA,QAAQ,CAAC;MAC1F,IAAIQ,YAAY,EAAE;QAChB,MAAM,CAACE,MAAM,EAAEC,CAAC,CAAC,GAAGH,YAAY;QAChC,MAAMI,MAAM,GAAGN,CAAC,CAACI,MAAM,CAAC;QACxB,MAAMG,MAAM,GAAGN,CAAC,CAACG,MAAM,CAAC;QACxB,IAAI,CAACxC,aAAa,CAAC4C,QAAQ,CAACJ,MAAM,CAAC,EAAE;UACnC,OAAOE,MAAM,CAACG,aAAa,CAACF,MAAM,CAAC;QACrC;MACF;MACA,OAAO,CAAC;IACV,CAAC,CAAC;EACN,CAAC,EAAE,CAACjC,cAAc,EAAEV,aAAa,CAAC,CAAC;EAEnCpB,SAAS,CAAC,MAAM;IACd;IACAuB,iBAAiB,CAAE2C,YAAY,IAAK;MAClC,MAAMC,eAAe,GAAG,CAAC,CAAC;MAC1BnD,OAAO,CAAC4B,OAAO,CAAEwB,MAAM,IAAK;QAC1B,MAAMC,SAAS,GAAGnD,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAM;QAClD,IAAI,CAAChD,aAAa,CAAC4C,QAAQ,CAACK,SAAS,CAAC,EAAE;UACtCF,eAAe,CAACE,SAAS,CAAC,GAAGH,YAAY,CAACE,MAAM,CAAC;QACnD;MACF,CAAC,CAAC;MACF,OAAOD,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACjD,cAAc,EAAEE,aAAa,EAAEJ,OAAO,CAAC,CAAC;EAE5ChB,SAAS,CAAC,MAAM;IACd2B,kBAAkB,CAAE2C,WAAW,IAAK;MAClC,MAAMC,cAAc,GAAG;QAAE,GAAGD;MAAY,CAAC;MACzCtD,OAAO,CAAC4B,OAAO,CAAEwB,MAAM,IAAK;QAC1B,IAAI,CAAChD,aAAa,CAAC4C,QAAQ,CAACI,MAAM,CAAC,EAAE;UAAA,IAAAI,mBAAA;UACnC,MAAMC,UAAU,IAAAD,mBAAA,GAAGhD,WAAW,CAAC4C,MAAM,CAAC,cAAAI,mBAAA,uBAAnBA,mBAAA,CAAqBE,WAAW,CAAC,CAAC;UACrD,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAChE,IAAI,CAACkC,GAAG,CAAEH,GAAG,IAAKA,GAAG,CAACuB,MAAM,CAAC,CAAC,CAAC,CAAC;UACrE,MAAMW,cAAc,GAAGJ,SAAS,CAACK,MAAM,CAAEC,KAAK,IAAK,CAACR,UAAU,IAAIQ,KAAK,CAACP,WAAW,CAAC,CAAC,CAACV,QAAQ,CAACS,UAAU,CAAC,CAAC;UAC3GF,cAAc,CAACH,MAAM,CAAC,GAAGW,cAAc;QACzC;MACF,CAAC,CAAC;MACF,OAAOR,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/C,WAAW,EAAEV,IAAI,EAAEE,OAAO,EAAEI,aAAa,CAAC,CAAC;EAE/CpB,SAAS,CAAC,MAAM;IACd6B,eAAe,CAAC;MACdX,cAAc,EAAE;QAAE,GAAGA;MAAe,CAAC;MACrCE,aAAa,EAAE,CAAC,GAAGA,aAAa,CAAC;MACjCE,cAAc,EAAE;QAAE,GAAGA;MAAe,CAAC;MACrCE,WAAW,EAAE;QAAE,GAAGA;MAAY;IAChC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACN,cAAc,EAAEE,aAAa,EAAEE,cAAc,EAAEE,WAAW,CAAC,CAAC;EAEhExB,SAAS,CAAC,MAAM;IACd;IACA,IAAIc,IAAI,CAAC4B,MAAM,GAAG,CAAC,EAAE;MACnB;MACA,MAAMwC,aAAa,GAAGpE,IAAI,CAACkC,GAAG,CAAEH,GAAG,IAAK;QACtC,IAAIA,GAAG,CAAC,YAAY,CAAC,EAAE;UACrB,MAAMsC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACxC,GAAG,CAAC,YAAY,CAAC,CAAC;UAChD,OAAOA,GAAG,CAAC,YAAY,CAAC;UACxB,OAAO;YAAE,GAAGA,GAAG;YAAE,GAAGtC,WAAW,CAAC4E,UAAU;UAAE,CAAC;QAC/C;QACA,OAAOtC,GAAG;MACZ,CAAC,CAAC;MAEF9B,OAAO,CAACmE,aAAa,CAAC;MACtBjE,UAAU,CAACuB,MAAM,CAACC,IAAI,CAACyC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;MACzC/D,iBAAiB,CAAC,CAAC,CAAC,CAAC;MACrBE,gBAAgB,CAAC,EAAE,CAAC;MACpBE,iBAAiB,CAAC,CAAC,CAAC,CAAC;MACrBE,cAAc,CAAC,CAAC,CAAC,CAAC;MAClBE,kBAAkB,CAAC,CAAC,CAAC,CAAC;MACtBI,iBAAiB,CAAClB,qBAAqB,CAAC,CAAC,CAAC;IAC5C;EACF,CAAC,EAAE,CAACC,IAAI,CAAC,CAAC;EAEVd,SAAS,CAAC,MAAM;IACd;IACA,MAAMsF,YAAY,GAAGxE,IAAI,CAACkE,MAAM,CAAEnC,GAAG,IACnC7B,OAAO,CAACuE,KAAK,CAAEnB,MAAM,IAAK;MACxB,MAAMoB,QAAQ,GAAGlE,cAAc,CAAC8C,MAAM,CAAC;MACvC,MAAMK,UAAU,GAAGjD,WAAW,CAAC4C,MAAM,CAAC;MACtC,OACE,CAAC,CAACoB,QAAQ,IAAIA,QAAQ,KAAK,KAAK,IAAI3C,GAAG,CAACuB,MAAM,CAAC,KAAKoB,QAAQ,MAC3D,CAACf,UAAU,IAAI5B,GAAG,CAACuB,MAAM,CAAC,CAACM,WAAW,CAAC,CAAC,CAACV,QAAQ,CAACS,UAAU,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IAEjF,CAAC,CACH,CAAC;;IAED;IACA,MAAMe,oBAAoB,GAAGnD,qBAAqB,CAACgD,YAAY,CAAC;IAChEjD,cAAc,CAACoD,oBAAoB,CAAC;EACtC,CAAC,EAAE,CAAC3E,IAAI,EAAEE,OAAO,EAAEM,cAAc,EAAEE,WAAW,EAAEM,cAAc,EAAEQ,qBAAqB,CAAC,CAAC;EAEvF,MAAMoD,UAAU,GAAGzF,WAAW,CAAE0F,aAAa,IAAK;IAChD,MAAMC,IAAI,GAAGD,aAAa,CAAC,CAAC,CAAC;IAC7B,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MACvC,IAAIP,IAAI,CAACQ,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC9B;QACAnG,IAAI,CAACmF,KAAK,CAACY,WAAW,EAAE;UACtB7B,MAAM,EAAE,IAAI;UACZkC,cAAc,EAAE,IAAI;UACpBC,QAAQ,EAAGJ,MAAM,IAAK;YACpBpF,OAAO,CAACoF,MAAM,CAACrF,IAAI,CAAC;UACtB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI8E,IAAI,CAACQ,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACtC;QACA,MAAMG,QAAQ,GAAGpB,IAAI,CAACC,KAAK,CAACY,WAAW,CAAC;QACxClF,OAAO,CAACyF,QAAQ,CAAC;MACnB,CAAC,MAAM;QACLC,KAAK,CAAC,iEAAiE,CAAC;MAC1E;IACF,CAAC;IAEDZ,MAAM,CAACa,UAAU,CAACd,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,kBAAkB,GAAGA,CAACX,KAAK,EAAE/C,MAAM,KAAK;IAC5C,MAAM2D,SAAS,GAAGZ,KAAK,CAACE,MAAM,CAACW,OAAO;IACtCxF,gBAAgB,CAAEyF,iBAAiB,IAAK;MACtC,IAAIF,SAAS,EAAE;QACb,OAAOE,iBAAiB,CAAC9B,MAAM,CAAE+B,YAAY,IAAKA,YAAY,KAAK9D,MAAM,CAAC;MAC5E,CAAC,MAAM;QACL,OAAO,CAAC,GAAG6D,iBAAiB,EAAE7D,MAAM,CAAC;MACvC;IACF,CAAC,CAAC;IAEF9B,iBAAiB,CAAE6F,kBAAkB,IAAK;MACxC,MAAMC,cAAc,GAAG;QAAE,GAAGD;MAAmB,CAAC;MAChD,IAAI,CAACJ,SAAS,EAAE;QACd,OAAOK,cAAc,CAAChE,MAAM,CAAC;MAC/B;MACA,OAAOgE,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAClB,KAAK,EAAE/C,MAAM,KAAK;IAC7C,MAAM2D,SAAS,GAAGZ,KAAK,CAACE,MAAM,CAACW,OAAO;IACtC9E,iBAAiB,CAAEoF,kBAAkB,KAAM;MACzC,GAAGA,kBAAkB;MACrB,CAAClE,MAAM,GAAG2D;IACZ,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBjG,iBAAiB,CAACS,YAAY,CAACV,cAAc,CAAC;IAC9CG,gBAAgB,CAACO,YAAY,CAACR,aAAa,CAAC;IAC5CG,iBAAiB,CAACK,YAAY,CAACN,cAAc,CAAC;IAC9CG,cAAc,CAACG,YAAY,CAACJ,WAAW,CAAC;IACxCO,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAMsF,cAAc,GAAIxE,GAAG,IAAK;IAC9BZ,kBAAkB,CAACY,GAAG,CAAC;IACvBV,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM,CAACmF,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGxH,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACyH,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1H,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAAC2H,QAAQ,EAAEC,WAAW,CAAC,GAAG5H,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM6H,cAAc,GAAIC,MAAM,IAAK;IACjCJ,qBAAqB,CAACI,MAAM,CAAC;IAC7BN,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;EAED,MAAMO,oBAAoB,GAAGA,CAAA,KAAM;IACjCP,sBAAsB,CAAC,KAAK,CAAC;IAC7B,IAAIG,QAAQ,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1BC,cAAc,CAACR,kBAAkB,EAAEE,QAAQ,CAAC;IAC9C;EACF,CAAC;EAED,MAAMM,cAAc,GAAGA,CAACH,MAAM,EAAEH,QAAQ,KAAK;IAC3C,MAAMO,WAAW,GAAG7F,WAAW,CAACY,GAAG,CAAEH,GAAG,IACtC7B,OAAO,CAACkH,MAAM,CAAC,CAACC,GAAG,EAAE/D,MAAM,KAAK;MAC9B,IAAI,CAAChD,aAAa,CAAC4C,QAAQ,CAACI,MAAM,CAAC,EAAE;QACnC,MAAMC,SAAS,GAAGnD,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAM;QAClD+D,GAAG,CAAC9D,SAAS,CAAC,GAAGxB,GAAG,CAACuB,MAAM,CAAC;MAC9B;MACA,OAAO+D,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CACP,CAAC;IAED,IAAIC,YAAY,EAAEC,aAAa;IAC/B,IAAIR,MAAM,KAAK,KAAK,EAAE;MACpBO,YAAY,GAAGlI,IAAI,CAACoI,OAAO,CAACL,WAAW,EAAE;QAAE7D,MAAM,EAAE;MAAK,CAAC,CAAC;MAC1DiE,aAAa,GAAG,KAAK;IACvB,CAAC,MAAM,IAAIR,MAAM,KAAK,MAAM,EAAE;MAC5BO,YAAY,GAAGhD,IAAI,CAACmD,SAAS,CAACN,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;MACnDI,aAAa,GAAG,MAAM;IACxB;IAEA,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,YAAY,CAAC,EAAE;MAAEM,IAAI,EAAG,QAAOL,aAAc;IAAiB,CAAC,CAAC;IACvF,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxC,IAAIF,IAAI,CAACG,QAAQ,KAAKC,SAAS,EAAE;MAC/B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACV,IAAI,CAAC;MACrCG,IAAI,CAACQ,YAAY,CAAC,MAAM,EAAEH,GAAG,CAAC;MAC9BL,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAG,GAAEzB,QAAS,IAAGW,aAAc,EAAC,CAAC;MAC7DM,IAAI,CAACS,KAAK,CAACC,UAAU,GAAG,QAAQ;MAChCT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,IAAI,CAAC;MAC/BA,IAAI,CAACa,KAAK,CAAC,CAAC;MACZZ,QAAQ,CAACU,IAAI,CAACG,WAAW,CAACd,IAAI,CAAC;IACjC;EACF,CAAC;EAED,MAAM;IAAEe,YAAY;IAAEC;EAAc,CAAC,GAAGvJ,WAAW,CAAC;IAClDwJ,MAAM,EAAElE;EACV,CAAC,CAAC;EAEF,MAAMuB,cAAc,GAAG,CAAC,GAAGjG,OAAO,CAAC6I,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG7I,OAAO,CAAC6I,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/E,MAAMC,OAAO,GAAG7C,cAAc,CAACjE,GAAG,CAAEoB,MAAM,IAAK;IAC7C,IAAIA,MAAM,CAAC2F,UAAU,CAAC,aAAa,CAAC,EAAE;MACpC,OAAO;QACL3D,IAAI,EAAEhC,MAAM,CAAC4F,SAAS,CAAC,aAAa,CAACtH,MAAM,CAAC;QAC5CuH,QAAQ,EAAE7F,MAAM;QAChB8F,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,IAAI;QACVtC,MAAM,EAAGhF,GAAG,IAAK;UACf,MAAMoC,KAAK,GAAGpC,GAAG,CAACuB,MAAM,CAAC;UACzB,IAAIa,KAAK,IAAIA,KAAK,CAACvC,MAAM,GAAG,GAAG,EAAE;YAC/B,OAAOuC,KAAK,CAAC+E,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;UACxC;UACA,OAAO/E,KAAK;QACd,CAAC;QACDmF,IAAI,EAAEhJ,aAAa,CAAC4C,QAAQ,CAACI,MAAM,CAAC;QACpCiG,IAAI,EAAE;MACR,CAAC;IACH;IACA,OAAO;MACLjE,IAAI,EAAElF,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAM;MACtC6F,QAAQ,EAAE7F,MAAM;MAChB8F,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,IAAI;MACVtC,MAAM,EAAGhF,GAAG,IAAK;QACf,MAAMoC,KAAK,GAAGpC,GAAG,CAACuB,MAAM,CAAC;QACzB,IAAIa,KAAK,IAAIA,KAAK,CAACvC,MAAM,GAAG,GAAG,EAAE;UAC/B,OAAOuC,KAAK,CAAC+E,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;QACxC;QACA,OAAO/E,KAAK;MACd,CAAC;MACDmF,IAAI,EAAEhG,MAAM,KAAK,SAAS,IAAIhD,aAAa,CAAC4C,QAAQ,CAACI,MAAM,CAAC;MAC5DiG,IAAI,EAAE;IACR,CAAC;EACH,CAAC,CAAC;EAEJ,oBACI5J,OAAA;IAAK6J,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAElB9J,OAAA;MAAK6J,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/B9J,OAAA;QAAA8J,QAAA,EAAI;MAAiB;QAAA7C,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eAGNjK,OAAA;MAAK6J,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/B9J,OAAA;QAAK6J,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B9J,OAAA;UAAA8J,QAAA,EAAI;QAAgC;UAAA7C,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzCjK,OAAA;UAAA,GAASiJ,YAAY,CAAC,CAAC;UAAEY,SAAS,EAAC,UAAU;UAAAC,QAAA,gBAC3C9J,OAAA;YAAA,GAAWkJ,aAAa,CAAC;UAAC;YAAAjC,QAAA,EAAA8C,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC9BjK,OAAA;YAAA8J,QAAA,EAAG;UAAgE;YAAA7C,QAAA,EAAA8C,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAhD,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpE,CAAC;MAAA;QAAAhD,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjK,OAAA;MAAK6J,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eACrC9J,OAAA;QAAK6J,SAAS,EAAC,wBAAwB;QAAAC,QAAA,eACrC9J,OAAA;UAAO6J,SAAS,EAAC,sBAAsB;UAAAC,QAAA,eACrC9J,OAAA;YAAA8J,QAAA,EACGvJ,OAAO,CAACgC,GAAG,CAAEoB,MAAM,iBAClB3D,OAAA;cAAA8J,QAAA,gBACE9J,OAAA;gBAAA8J,QAAA,eACE9J,OAAA;kBACEiI,IAAI,EAAC,UAAU;kBACf7B,OAAO,EAAE,CAACzF,aAAa,CAAC4C,QAAQ,CAACI,MAAM,CAAE;kBACzCuG,QAAQ,EAAGC,CAAC,IAAKjE,kBAAkB,CAACiE,CAAC,EAAExG,MAAM;gBAAE;kBAAAsD,QAAA,EAAA8C,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChD;cAAC;gBAAAhD,QAAA,EAAA8C,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLjK,OAAA;gBAAI6J,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,eAC7B9J,OAAA;kBACEiI,IAAI,EAAC,MAAM;kBACXzD,KAAK,EAAE/D,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAO;kBACxCuG,QAAQ,EAAGC,CAAC,IACVzJ,iBAAiB,CAAE6F,kBAAkB,KAAM;oBACzC,GAAGA,kBAAkB;oBACrB,CAAC5C,MAAM,GAAGwG,CAAC,CAAC1E,MAAM,CAACjB;kBACrB,CAAC,CAAC,CACH;kBACD4F,SAAS,EAAE,GAAI;kBACfzB,KAAK,EAAE;oBAAE0B,KAAK,EAAE;kBAAM,CAAE,CAAC;gBAAA;kBAAApD,QAAA,EAAA8C,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC1B;cAAC;gBAAAhD,QAAA,EAAA8C,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLjK,OAAA;gBAAA8J,QAAA,eAEE9J,OAAA;kBAAA8J,QAAA,GAAO,WAEL,eAAA9J,OAAA;oBACEiI,IAAI,EAAC,UAAU;oBACf7B,OAAO,EAAE/E,cAAc,CAACsC,MAAM,CAAE;oBAChCuG,QAAQ,EAAGC,CAAC,IAAK1D,mBAAmB,CAAC0D,CAAC,EAAExG,MAAM;kBAAE;oBAAAsD,QAAA,EAAA8C,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACjD,CAAC;gBAAA;kBAAAhD,QAAA,EAAA8C,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACG;cAAC;gBAAAhD,QAAA,EAAA8C,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA,GAhCEtG,MAAM;cAAAsD,QAAA,EAAA8C,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAiCX,CACL;UAAC;YAAAhD,QAAA,EAAA8C,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC;UAAAhD,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAhD,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjK,OAAA;MAAK6J,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACrC9J,OAAA;QAAK6J,SAAS,EAAC,wBAAwB;QAAAC,QAAA,eACrC9J,OAAA;UAAO6J,SAAS,EAAC,cAAc;UAAAC,QAAA,eAC7B9J,OAAA;YAAA8J,QAAA,EACGvJ,OAAO,CAACgC,GAAG,CAAEoB,MAAM;cAAA,IAAA2G,qBAAA;cAAA,oBAClBtK,OAAA,CAACX,KAAK,CAACkL,QAAQ;gBAAAT,QAAA,EACZ,CAACnJ,aAAa,CAAC4C,QAAQ,CAACI,MAAM,CAAC,iBAC9B3D,OAAA;kBAAA8J,QAAA,gBACE9J,OAAA;oBAAA8J,QAAA,eACE9J,OAAA;sBAAA8J,QAAA,GAAOrJ,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAM,EAAC,GAAC;oBAAA;sBAAAsD,QAAA,EAAA8C,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM;kBAAC;oBAAAhD,QAAA,EAAA8C,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC9C,CAAC,eACLjK,OAAA;oBAAI6J,SAAS,EAAC,iBAAiB;oBAAAC,QAAA,gBAC7B9J,OAAA;sBACEiI,IAAI,EAAC,MAAM;sBACXuC,WAAW,EAAG,UAAS/J,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAO,EAAE;sBAC1Da,KAAK,EAAEzD,WAAW,CAAC4C,MAAM,CAAC,IAAI,EAAG;sBACjCuG,QAAQ,EAAGC,CAAC,IAAK;wBACf,MAAM3F,KAAK,GAAG2F,CAAC,CAAC1E,MAAM,CAACjB,KAAK;wBAC5B,MAAMZ,SAAS,GAAGnD,cAAc,CAACkD,MAAM,CAAC,IAAIA,MAAM;wBAClD7C,iBAAiB,CAAE2C,YAAY,KAAM;0BACnC,GAAGA,YAAY;0BACf,CAACG,SAAS,GAAGY;wBACf,CAAC,CAAC,CAAC;wBACHxD,cAAc,CAAEyJ,eAAe,KAAM;0BACnC,GAAGA,eAAe;0BAClB,CAAC9G,MAAM,GAAGa,KAAK,CAAC4E,KAAK,CAAC,CAAC,GAAG,CAAC,CAAE;wBAC/B,CAAC,CAAC,CAAC;sBACL,CAAE;;sBACFsB,IAAI,EAAG,YAAW/G,MAAO,EAAE;sBAC3ByG,SAAS,EAAE,EAAG;sBACdO,IAAI,EAAE,EAAG,CAAC;oBAAA;sBAAA1D,QAAA,EAAA8C,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACX,CAAC,eACFjK,OAAA;sBAAU4K,EAAE,EAAG,YAAWjH,MAAO,EAAE;sBAAAmG,QAAA,gBACjC9J,OAAA;wBAAQwE,KAAK,EAAC;sBAAK;wBAAAyC,QAAA,EAAA8C,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAE,CAAC,GAAAK,qBAAA,GACrBrJ,eAAe,CAAC0C,MAAM,CAAC,cAAA2G,qBAAA,uBAAvBA,qBAAA,CAAyB/H,GAAG,CAAEiC,KAAK,iBAClCxE,OAAA;wBAEEwE,KAAK,EAAEA,KAAM;wBACbmE,KAAK,EAAE;0BACL0B,KAAK,EAAE,MAAM;0BACbQ,UAAU,EAAE,QAAQ;0BACpBC,QAAQ,EAAE,QAAQ;0BAClBC,YAAY,EAAE;wBAChB,CAAE;wBAAAjB,QAAA,EAEDtF,KAAK,CAACvC,MAAM,GAAG,GAAG,GAAI,MAAKuC,KAAK,CAAC4E,KAAK,CAAC,CAAC,GAAG,CAAE,EAAC,GAAG5E;sBAAK,GATlDA,KAAK;wBAAAyC,QAAA,EAAA8C,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAUJ,CACT,CAAC;oBAAA;sBAAAhD,QAAA,EAAA8C,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACM,CAAC;kBAAA;oBAAAhD,QAAA,EAAA8C,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACT,CAAC;gBAAA;kBAAAhD,QAAA,EAAA8C,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH;cACL,GA9CkBtG,MAAM;gBAAAsD,QAAA,EAAA8C,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OA+CX,CAAC;YAAA,CAClB;UAAC;YAAAhD,QAAA,EAAA8C,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC;UAAAhD,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAhD,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNjK,OAAA;QAAQgL,OAAO,EAAErE,WAAY;QAAAmD,QAAA,EAAC;MAAK;QAAA7C,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eAGNjK,OAAA;MAAK6J,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAE/B9J,OAAA;QAAK6J,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9B9J,OAAA,CAACN,SAAS;UACR2J,OAAO,EAAEA,OAAQ;UACjBhJ,IAAI,EAAEsB,WAAY,CAAC;UAAA;UACnBsJ,UAAU;UACVC,iBAAiB,EAAE,EAAG;UACtBC,YAAY,EAAEvE,cAAe;UAC7BwE,QAAQ;UACRC,YAAY,EAAE;YACZC,SAAS,EAAE;cACT3C,KAAK,EAAE;gBACL4C,WAAW,EAAE,KAAK;gBAClBC,YAAY,EAAE,KAAK;gBACnBC,UAAU,EAAE,KAAK;gBACjBC,aAAa,EAAE,KAAK;gBACpBC,UAAU,EAAE,MAAM;gBAClBC,SAAS,EAAE;cACb;YACF,CAAC;YACDC,KAAK,EAAE;cACLlD,KAAK,EAAE;gBACL4C,WAAW,EAAE,KAAK;gBAClBC,YAAY,EAAE,KAAK;gBACnBC,UAAU,EAAE,KAAK;gBACjBC,aAAa,EAAE,KAAK;gBACpBE,SAAS,EAAE;cACb;YACF;UACF;QAAE;UAAA3E,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAhD,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjK,OAAA,CAACJ,KAAK;MACJkM,MAAM,EAAErK,WAAY,CAAC;MAAA;MACrBsK,cAAc,EAAEA,CAAA,KAAMrK,cAAc,CAAC,KAAK,CAAE,CAAC;MAAA;MAC7CsK,YAAY,EAAC,WAAW;MACxBnC,SAAS,EAAC,iBAAiB;MAC3BoC,gBAAgB,EAAC,yBAAyB;MAAAnC,QAAA,EAEzCrI,WAAW,iBACVzB,OAAA,CAACH,QAAQ;QACPU,OAAO,EAAEA,OAAQ;QACjB2L,OAAO,EAAE3K,eAAgB;QACzBd,cAAc,EAAEA,cAAe;QAC/BE,aAAa,EAAEA,aAAc;QAC7BwL,OAAO,EAAEA,CAAA,KAAMzK,cAAc,CAAC,KAAK,CAAE,CAAC;MAAA;QAAAuF,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC;IACF;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAGRjK,OAAA;MAAK6J,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/B9J,OAAA;QAAK6J,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B9J,OAAA;UAAQgL,OAAO,EAAEA,CAAA,KAAM7D,cAAc,CAAC,KAAK,CAAE;UAAA2C,QAAA,EAAC;QAAY;UAAA7C,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnEjK,OAAA;UAAQgL,OAAO,EAAEA,CAAA,KAAM7D,cAAc,CAAC,MAAM,CAAE;UAAA2C,QAAA,EAAC;QAAa;UAAA7C,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAhD,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE;IAAC;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjK,OAAA,CAACJ,KAAK;MACJkM,MAAM,EAAEjF,mBAAoB;MAC5BkF,cAAc,EAAEA,CAAA,KAAMjF,sBAAsB,CAAC,KAAK,CAAE;MACpDkF,YAAY,EAAC,gBAAgB;MAC7BnC,SAAS,EAAC,gBAAgB;MAC1BoC,gBAAgB,EAAC,wBAAwB;MAAAnC,QAAA,eAEzC9J,OAAA;QAAK6J,SAAS,EAAC,wBAAwB;QAAAC,QAAA,gBACrC9J,OAAA;UAAA8J,QAAA,EAAI;QAAc;UAAA7C,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBjK,OAAA;UAAK6J,SAAS,EAAC,0BAA0B;UAAAC,QAAA,gBACvC9J,OAAA;YACEiI,IAAI,EAAC,MAAM;YACXzD,KAAK,EAAEyC,QAAS;YAChBiD,QAAQ,EAAGC,CAAC,IAAKjD,WAAW,CAACiD,CAAC,CAAC1E,MAAM,CAACjB,KAAK,CAAE;YAC7CgG,WAAW,EAAG;UAAgB;YAAAvD,QAAA,EAAA8C,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACFjK,OAAA;YAAM6J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAG,IAAG/C,kBAAmB;UAAC;YAAAE,QAAA,EAAA8C,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAhD,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,eACNjK,OAAA;UAAQgL,OAAO,EAAE3D,oBAAqB;UAAAyC,QAAA,EAAC;QAAM;UAAA7C,QAAA,EAAA8C,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAhD,QAAA,EAAA8C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC;MAAAhD,QAAA,EAAA8C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAhD,QAAA,EAAA8C,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC9J,EAAA,CAnfID,GAAG;EAAA,QAuPiCP,WAAW;AAAA;AAAAyM,EAAA,GAvP/ClM,GAAG;AAqfT,eAAeA,GAAG;AAAC,IAAAkM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}