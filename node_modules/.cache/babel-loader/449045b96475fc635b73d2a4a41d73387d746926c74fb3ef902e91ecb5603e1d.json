{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  // State declarations\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [searchTerms, setSearchTerms] = useState({});\n  const [groupedData, setGroupedData] = useState([]);\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [groupByColumns, setGroupByColumns] = useState({}); // Added missing state\n\n  // Process uploaded CSV data\n  useEffect(() => {\n    if (data.length > 0) {\n      const flattenedData = data.map(row => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return {\n            ...row,\n            ...flattenJSON(properties)\n          };\n        }\n        return row;\n      });\n      setData(flattenedData);\n    }\n  }, [data]);\n\n  // Perform filtering based on searchTerms\n  const filteredData = useCallback(() => {\n    return data.filter(row => headers.every(header => {\n      const searchTerm = searchTerms[header];\n      return !searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase());\n    }));\n  }, [data, headers, searchTerms]);\n  useEffect(() => {\n    setGroupedData(groupAndSortTableData(filteredData(), headers));\n  }, [headers, filteredData]);\n\n  // Group and sort table data based on groupByColumns\n  const groupAndSortTableData = useCallback(tableData => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Handle file drop\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n            setHeaders(Object.keys(result.data[0]));\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n\n  // Handle column toggle\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => isChecked ? prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column) : [...prevHiddenColumns, column]);\n  };\n\n  // Handle group by toggle\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n\n  // Reset filters and group by selections\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setSearchTerms({});\n    setGroupByColumns({});\n    setData([]); // Reset data directly instead of using originalDataRef\n  };\n\n  // Handle row click\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  // Handle file name submission for download\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  // Handle CSV or JSON download\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop\n  });\n\n  // Define the table columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => {\n    const isPropertiesHeader = header.startsWith(\"PROPERTIES_\");\n    const newColumn = renamedHeaders[header] || header;\n    return {\n      name: isPropertiesHeader ? newColumn.substring(\"PROPERTIES_\".length) : newColumn,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: row => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1\n    };\n  });\n\n  // Define dropdown options for each header\n  const dropdownOptions = {};\n  headers.forEach(header => {\n    if (!hiddenColumns.includes(header)) {\n      dropdownOptions[header] = Array.from(new Set(data.map(row => row[header])));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV | JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"100%\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 311,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Filter ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value\n                        }));\n                      },\n                      list: `datalist-${header}`,\n                      maxLength: 100,\n                      size: 95\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 314,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 335,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 337,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 334,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: filteredData(),\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LABllq9SoylP13zyGa5bTxM8vI8=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","searchTerms","setSearchTerms","groupedData","setGroupedData","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","isFileNameModalOpen","setIsFileNameModalOpen","groupByColumns","setGroupByColumns","length","flattenedData","map","row","properties","JSON","parse","filteredData","filter","every","header","searchTerm","toLowerCase","includes","groupAndSortTableData","tableData","Object","keys","groups","forEach","groupKey","entries","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","skipEmptyLines","complete","jsonData","alert","readAsText","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","handleGroupByToggle","prevGroupByColumns","handleReset","handleRowClick","promptFileName","format","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","newColumn","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","getRootProps","getInputProps","onDrop","groupByColumn","updatedHeaders","slice","columns","isPropertiesHeader","startsWith","substring","selector","sortable","wrap","value","omit","grow","dropdownOptions","Array","from","Set","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","prevRenamedHeaders","maxLength","width","_dropdownOptions$head","Fragment","placeholder","setFilterCriteria","prevCriteria","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  // State declarations\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [searchTerms, setSearchTerms] = useState({});\n  const [groupedData, setGroupedData] = useState([]);\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [groupByColumns, setGroupByColumns] = useState({}); // Added missing state\n\n  // Process uploaded CSV data\n  useEffect(() => {\n    if (data.length > 0) {\n      const flattenedData = data.map((row) => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return { ...row, ...flattenJSON(properties) };\n        }\n        return row;\n      });\n\n      setData(flattenedData);\n    }\n  }, [data]);\n\n  // Perform filtering based on searchTerms\n  const filteredData = useCallback(() => {\n    return data.filter((row) =>\n      headers.every((header) => {\n        const searchTerm = searchTerms[header];\n        return (\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n  }, [data, headers, searchTerms]);\n\n  useEffect(() => {\n    setGroupedData(groupAndSortTableData(filteredData(), headers));\n  }, [headers, filteredData]);\n\n  // Group and sort table data based on groupByColumns\n  const groupAndSortTableData = useCallback((tableData) => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups)\n      .flat()\n      .sort((a, b) => {\n        const sortByColumn = Object.entries(groupByColumns).find(\n          ([column, selected]) => selected\n        );\n        if (sortByColumn) {\n          const [sortBy, _] = sortByColumn;\n          const aValue = a[sortBy];\n          const bValue = b[sortBy];\n          if (!hiddenColumns.includes(sortBy)) {\n            return aValue.localeCompare(bValue);\n          }\n        }\n        return 0;\n      });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Handle file drop\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n            setHeaders(Object.keys(result.data[0]));\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  // Handle column toggle\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) =>\n      isChecked\n        ? prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column)\n        : [...prevHiddenColumns, column]\n    );\n  };\n\n  // Handle group by toggle\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  // Reset filters and group by selections\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setSearchTerms({});\n    setGroupByColumns({});\n    setData([]); // Reset data directly instead of using originalDataRef\n  };\n\n  // Handle row click\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  // Handle file name submission for download\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  // Handle CSV or JSON download\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n  });\n\n  // Define the table columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map((header) => {\n    const isPropertiesHeader = header.startsWith(\"PROPERTIES_\");\n    const newColumn = renamedHeaders[header] || header;\n    return {\n      name: isPropertiesHeader ? newColumn.substring(\"PROPERTIES_\".length) : newColumn,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: (row) => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1,\n    };\n  });\n\n  // Define dropdown options for each header\n  const dropdownOptions = {};\n  headers.forEach((header) => {\n    if (!hiddenColumns.includes(header)) {\n      dropdownOptions[header] = Array.from(new Set(data.map((row) => row[header])));\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CSV Table Display */}\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CSV File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV | JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"100%\" }}\n                    />\n                  </td>\n                  <td>\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Filter ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value,\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={100}\n                          size={95}\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={filteredData()}\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={() => setIsModalOpen(false)}\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)}\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}