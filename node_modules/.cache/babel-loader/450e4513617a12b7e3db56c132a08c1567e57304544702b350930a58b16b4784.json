{"ast":null,"code":"// utils.js\n\nexport const flattenData = (data, columns) => {\n  // Function to flatten the data based on selected columns\n  const newData = data.map(row => {\n    const flattenedRow = {};\n    columns.forEach(column => {\n      if (row[column] && typeof row[column] === \"object\") {\n        Object.keys(row[column]).forEach(key => {\n          flattenedRow[`${column}.${key}`] = row[column][key];\n        });\n      } else {\n        flattenedRow[column] = row[column];\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\nexport const flattenJSONColumns = (data, columns) => {\n  const flattenObject = (obj, parentKey = \"\") => {\n    return Object.keys(obj).reduce((acc, key) => {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      const value = obj[key];\n      if (typeof value === \"object\" && value !== null) {\n        if (Array.isArray(value)) {\n          acc[newKey] = value.join(\", \");\n        } else {\n          const flattened = flattenObject(value, newKey);\n          Object.assign(acc, flattened);\n        }\n      } else {\n        acc[newKey] = value;\n      }\n      return acc;\n    }, {});\n  };\n  const newData = data.map(row => {\n    const flattenedRow = {\n      ...row\n    };\n    columns.forEach(column => {\n      if (flattenedRow[column] && typeof flattenedRow[column] === \"string\") {\n        try {\n          const parsedValue = JSON.parse(flattenedRow[column]);\n          if (typeof parsedValue === \"object\" && parsedValue !== null) {\n            const flattenedObject = flattenObject(parsedValue);\n            delete flattenedRow[column];\n            Object.assign(flattenedRow, flattenedObject);\n          }\n        } catch (error) {\n          console.error(`Failed to parse JSON in column '${column}':`, error);\n        }\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};","map":{"version":3,"names":["flattenData","data","columns","newData","map","row","flattenedRow","forEach","column","Object","keys","key","flattenJSONColumns","flattenObject","obj","parentKey","reduce","acc","newKey","value","Array","isArray","join","flattened","assign","parsedValue","JSON","parse","flattenedObject","error","console"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["// utils.js\n\nexport const flattenData = (data, columns) => {\n  // Function to flatten the data based on selected columns\n  const newData = data.map((row) => {\n    const flattenedRow = {};\n    columns.forEach((column) => {\n      if (row[column] && typeof row[column] === \"object\") {\n        Object.keys(row[column]).forEach((key) => {\n          flattenedRow[`${column}.${key}`] = row[column][key];\n        });\n      } else {\n        flattenedRow[column] = row[column];\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\n\nexport const flattenJSONColumns = (data, columns) => {\n  const flattenObject = (obj, parentKey = \"\") => {\n    return Object.keys(obj).reduce((acc, key) => {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      const value = obj[key];\n\n      if (typeof value === \"object\" && value !== null) {\n        if (Array.isArray(value)) {\n          acc[newKey] = value.join(\", \");\n        } else {\n          const flattened = flattenObject(value, newKey);\n          Object.assign(acc, flattened);\n        }\n      } else {\n        acc[newKey] = value;\n      }\n\n      return acc;\n    }, {});\n  };\n\n  const newData = data.map((row) => {\n    const flattenedRow = { ...row };\n    columns.forEach((column) => {\n      if (flattenedRow[column] && typeof flattenedRow[column] === \"string\") {\n        try {\n          const parsedValue = JSON.parse(flattenedRow[column]);\n          if (typeof parsedValue === \"object\" && parsedValue !== null) {\n            const flattenedObject = flattenObject(parsedValue);\n            delete flattenedRow[column];\n            Object.assign(flattenedRow, flattenedObject);\n          }\n        } catch (error) {\n          console.error(`Failed to parse JSON in column '${column}':`, error);\n        }\n      }\n    });\n    return flattenedRow;\n  });\n\n  return newData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}