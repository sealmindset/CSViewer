{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties, mergeRow } from \"./JSONFlattener\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]); // Initialize hiddenColumns as an empty array\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      // Clone hiddenColumns as an array\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  // Function to flatten JSON-formatted data in CSV rows\n  const flattenCSVData = csvData => {\n    const parsedData = Papa.parse(csvData, {\n      header: true\n    }).data;\n    const flattenedData = [];\n    parsedData.forEach(row => {\n      if (row.PROPERTIES && typeof row.PROPERTIES === 'string' && row.PROPERTIES.includes(\"{\")) {\n        try {\n          // Flatten the JSON data in the PROPERTIES column\n          const properties = JSON.parse(row.PROPERTIES);\n          const flattenedProperties = flattenProperties(properties);\n          delete row.PROPERTIES;\n\n          // Merge the flattened properties with the row\n          const newRow = mergeRow(flattenedProperties, row);\n          flattenedData.push(newRow);\n        } catch (error) {\n          console.warn('Error parsing PROPERTIES column:', error);\n        }\n      } else {\n        flattenedData.push(row);\n      }\n    });\n    return flattenedData;\n  };\n  const handleDrop = useCallback(acceptedFiles => {\n    setIsUploading(true); // Indicate that the file is being uploaded\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data and check for JSON-formatted data\n        const jsonDataInCSV = Papa.parse(fileContent, {\n          header: true\n        });\n        if (jsonDataInCSV.data.some(row => row.PROPERTIES && row.PROPERTIES.includes(\"{\"))) {\n          setIsProcessing(true); // Indicate that the file is being processed\n          // Flatten the CSV data with JSON-formatted data\n          const flattenedData = flattenCSVData(fileContent);\n          setData(flattenedData);\n          setIsProcessing(false); // Indicate that the file processing is complet \n        } else {\n          // Handle CSV data without JSON-formatted data using Papa.parse\n          const parsedData = Papa.parse(fileContent, {\n            header: true,\n            skipEmptyLines: true\n          });\n          setData(parsedData.data);\n          setHeaders(parsedData.meta.fields);\n          setRenamedHeaders({});\n          setHiddenColumns([]);\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n          setIsUploading(false);\n        }\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n        setIsUploading(false);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n        setIsUploading(false); // Reset the uploading status if the format is unsupported\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const visibleColumns = headers.filter(header => !hiddenColumns.includes(header));\n  const updatedColumns = [...visibleColumns.slice(0, 1), groupByColumn, ...visibleColumns.slice(1)].map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn,\n    grow: 1\n  }));\n  const columns = updatedColumns;\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected && !hiddenColumns.includes(column) ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        if (!hiddenColumns.includes(sortBy)) {\n          const aValue = a[sortBy];\n          const bValue = b[sortBy];\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: [isUploading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Uploading file...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 23\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing file...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 26\n      }, this), !isUploading && !isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 402,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 405,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 426,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 428,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 425,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 404,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n        ,\n        onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n        ,\n        contentLabel: \"Row Popup\",\n        className: \"row-popup-modal\",\n        overlayClassName: \"row-popup-modal-overlay\",\n        children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n          headers: headers,\n          rowData: selectedRowData,\n          renamedHeaders: renamedHeaders,\n          hiddenColumns: hiddenColumns,\n          onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"W1wnNQc+OPzCdQDUH51IiSVdUn8=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenProperties","mergeRow","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","isUploading","setIsUploading","isProcessing","setIsProcessing","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","filteredData","every","criteria","groupedAndSortedData","groupAndSortTableData","flattenCSVData","csvData","parsedData","parse","flattenedData","PROPERTIES","properties","JSON","flattenedProperties","newRow","push","error","console","warn","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","jsonDataInCSV","some","skipEmptyLines","meta","fields","jsonData","Object","keys","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","visibleColumns","updatedColumns","selector","sortable","wrap","format","length","substring","omit","grow","columns","handleRowClick","handleColumnToggle","column","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","tableData","groups","groupKey","entries","selected","join","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleReset","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties, mergeRow } from \"./JSONFlattener\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]); // Initialize hiddenColumns as an empty array\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n\n  const [isUploading, setIsUploading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  // Function to flatten JSON-formatted data in CSV rows\n  const flattenCSVData = (csvData) => {\n    const parsedData = Papa.parse(csvData, { header: true }).data;\n    const flattenedData = [];\n  \n    parsedData.forEach((row) => {\n      if (row.PROPERTIES && typeof row.PROPERTIES === 'string' && row.PROPERTIES.includes(\"{\")) {\n        try {\n          // Flatten the JSON data in the PROPERTIES column\n          const properties = JSON.parse(row.PROPERTIES);\n          const flattenedProperties = flattenProperties(properties);\n          delete row.PROPERTIES;\n  \n          // Merge the flattened properties with the row\n          const newRow = mergeRow(flattenedProperties, row);\n          flattenedData.push(newRow);\n        } catch (error) {\n          console.warn('Error parsing PROPERTIES column:', error);\n        }\n      } else {\n        flattenedData.push(row);\n      }\n    });\n  \n    return flattenedData;\n  };\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    setIsUploading(true); // Indicate that the file is being uploaded\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n  \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data and check for JSON-formatted data\n        const jsonDataInCSV = Papa.parse(fileContent, { header: true });\n        if (jsonDataInCSV.data.some((row) => row.PROPERTIES && row.PROPERTIES.includes(\"{\"))) {\n          setIsProcessing(true); // Indicate that the file is being processed\n          // Flatten the CSV data with JSON-formatted data\n          const flattenedData = flattenCSVData(fileContent);\n          setData(flattenedData);\n          setIsProcessing(false); // Indicate that the file processing is complet \n        } else {\n          // Handle CSV data without JSON-formatted data using Papa.parse\n          const parsedData = Papa.parse(fileContent, {\n            header: true,\n            skipEmptyLines: true,\n          });\n          setData(parsedData.data);\n          setHeaders(parsedData.meta.fields);\n          setRenamedHeaders({});\n          setHiddenColumns([]);\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n          setIsUploading(false);\n        }\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n        setIsUploading(false);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n        setIsUploading(false); // Reset the uploading status if the format is unsupported\n      }\n    };\n  \n    reader.readAsText(file);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const visibleColumns = headers.filter((header) => !hiddenColumns.includes(header));\n  const updatedColumns = [\n    ...visibleColumns.slice(0, 1),\n    groupByColumn,\n    ...visibleColumns.slice(1),\n  ].map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn,\n    grow: 1,\n  }));\n  \n  const columns = updatedColumns;\n  \n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n  \n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected && !hiddenColumns.includes(column) ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n  \n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        if (!hiddenColumns.includes(sortBy)) {\n          const aValue = a[sortBy];\n          const bValue = b[sortBy];\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n  \n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n      {isUploading && <p>Uploading file...</p>}\n        {isProcessing && <p>Processing file...</p>}\n        {!isUploading && !isProcessing && (\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n        )}\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n        <DataTable\n          columns={columns}\n          data={groupedData} // Replace 'filteredData' with 'groupedData'\n          pagination\n          paginationPerPage={10}\n          onRowClicked={handleRowClick}\n          noHeader\n          customStyles={{\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\",\n              },\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\",\n              },\n            },\n          }}\n        />\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n      </div>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}