{"ast":null,"code":"export function flattenJSON(jsonData) {\n  const result = {};\n  function recurse(curr, prop) {\n    if (Object(curr) !== curr) {\n      result[prop] = curr;\n    } else if (Array.isArray(curr)) {\n      for (let i = 0, len = curr.length; i < len; i++) {\n        // Fix variable name 'l' to 'len'\n        recurse(curr[i], `${prop}[${i}]`);\n      }\n      if (len === 0) {\n        // Fix variable name 'l' to 'len'\n        result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in curr) {\n        isEmpty = false;\n        if (result[prop ? `${prop}->${p}` : p]) {\n          let index = 1;\n          while (result[`${prop ? `${prop}->${p}` : p}_${index}`]) {\n            index++;\n          }\n          recurse(curr[p], prop ? `${prop}->${p}_${index}` : `${p}_${index}`);\n        } else {\n          recurse(curr[p], prop ? `${prop}->${p}` : p);\n        }\n      }\n      if (isEmpty && prop) {\n        result[prop] = {};\n      }\n    }\n  }\n  recurse(jsonData, \"\");\n  return result;\n}","map":{"version":3,"names":["flattenJSON","jsonData","result","recurse","curr","prop","Object","Array","isArray","i","len","length","isEmpty","p","index"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["export function flattenJSON(jsonData) {\n  const result = {};\n\n  function recurse(curr, prop) {\n    if (Object(curr) !== curr) {\n      result[prop] = curr;\n    } else if (Array.isArray(curr)) {\n      for (let i = 0, len = curr.length; i < len; i++) { // Fix variable name 'l' to 'len'\n        recurse(curr[i], `${prop}[${i}]`);\n      }\n      if (len === 0) { // Fix variable name 'l' to 'len'\n        result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in curr) {\n        isEmpty = false;\n        if (result[prop ? `${prop}->${p}` : p]) {\n          let index = 1;\n          while (result[`${prop ? `${prop}->${p}` : p}_${index}`]) {\n            index++;\n          }\n          recurse(curr[p], prop ? `${prop}->${p}_${index}` : `${p}_${index}`);\n        } else {\n          recurse(curr[p], prop ? `${prop}->${p}` : p);\n        }\n      }\n      if (isEmpty && prop) {\n        result[prop] = {};\n      }\n    }\n  }\n\n  recurse(jsonData, \"\");\n  return result;\n}\n"],"mappings":"AAAA,OAAO,SAASA,WAAWA,CAACC,QAAQ,EAAE;EACpC,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,SAASC,OAAOA,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC3B,IAAIC,MAAM,CAACF,IAAI,CAAC,KAAKA,IAAI,EAAE;MACzBF,MAAM,CAACG,IAAI,CAAC,GAAGD,IAAI;IACrB,CAAC,MAAM,IAAIG,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE;MAC9B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGN,IAAI,CAACO,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAAE;QACjDN,OAAO,CAACC,IAAI,CAACK,CAAC,CAAC,EAAG,GAAEJ,IAAK,IAAGI,CAAE,GAAE,CAAC;MACnC;MACA,IAAIC,GAAG,KAAK,CAAC,EAAE;QAAE;QACfR,MAAM,CAACG,IAAI,CAAC,GAAG,EAAE;MACnB;IACF,CAAC,MAAM;MACL,IAAIO,OAAO,GAAG,IAAI;MAClB,KAAK,MAAMC,CAAC,IAAIT,IAAI,EAAE;QACpBQ,OAAO,GAAG,KAAK;QACf,IAAIV,MAAM,CAACG,IAAI,GAAI,GAAEA,IAAK,KAAIQ,CAAE,EAAC,GAAGA,CAAC,CAAC,EAAE;UACtC,IAAIC,KAAK,GAAG,CAAC;UACb,OAAOZ,MAAM,CAAE,GAAEG,IAAI,GAAI,GAAEA,IAAK,KAAIQ,CAAE,EAAC,GAAGA,CAAE,IAAGC,KAAM,EAAC,CAAC,EAAE;YACvDA,KAAK,EAAE;UACT;UACAX,OAAO,CAACC,IAAI,CAACS,CAAC,CAAC,EAAER,IAAI,GAAI,GAAEA,IAAK,KAAIQ,CAAE,IAAGC,KAAM,EAAC,GAAI,GAAED,CAAE,IAAGC,KAAM,EAAC,CAAC;QACrE,CAAC,MAAM;UACLX,OAAO,CAACC,IAAI,CAACS,CAAC,CAAC,EAAER,IAAI,GAAI,GAAEA,IAAK,KAAIQ,CAAE,EAAC,GAAGA,CAAC,CAAC;QAC9C;MACF;MACA,IAAID,OAAO,IAAIP,IAAI,EAAE;QACnBH,MAAM,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC;MACnB;IACF;EACF;EAEAF,OAAO,CAACF,QAAQ,EAAE,EAAE,CAAC;EACrB,OAAOC,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}