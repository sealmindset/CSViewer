{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\"; // Import the RowPopup component\nimport { flattenData, flattenJSONColumns } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    const updatedCriteria = {};\n    headers.forEach(header => {\n      const newColumn = renamedHeaders[header] || header;\n      if (!hiddenColumns.includes(newColumn)) {\n        updatedCriteria[newColumn] = filterCriteria[header];\n      }\n    });\n    setFilterCriteria(updatedCriteria);\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    const updatedOptions = {\n      ...dropdownOptions\n    };\n    headers.forEach(header => {\n      if (!hiddenColumns.includes(header)) {\n        var _searchTerms$header;\n        const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n        const allValues = Array.from(new Set(data.map(row => row[header])));\n        const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n        updatedOptions[header] = filteredValues;\n      }\n    });\n    setDropdownOptions(updatedOptions);\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        try {\n          const jsonData = JSON.parse(fileContent);\n          setData(jsonData);\n          setHeaders(Object.keys(jsonData[0]));\n          setRenamedHeaders({});\n          setHiddenColumns([]);\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n        } catch (error) {\n          alert(\"Error parsing JSON data. Please upload a valid JSON file.\");\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => isChecked ? prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column) : [...prevHiddenColumns, column]);\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const handleFileNameSubmit = () => {\n    // Logic for handling the file name submission and download\n    setIsFileNameModalOpen(false);\n    // ... (rest of the logic for file download goes here)\n  };\n\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 281,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 284,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 305,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 307,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"lax81oawUFbSK0f0MgkxIEOoZWY=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenData","flattenJSONColumns","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","isFileNameModalOpen","setIsFileNameModalOpen","fileName","setFileName","selectedFileFormat","setSelectedFileFormat","updatedCriteria","forEach","header","newColumn","includes","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","filteredData","every","criteria","groupedAndSortedData","groupAndSortTableData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","meta","fields","jsonData","JSON","Object","keys","error","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","length","substring","omit","grow","handleRowClick","handleColumnToggle","column","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","handleFileNameSubmit","tableData","groups","groupKey","entries","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","className","children","_jsxFileName","lineNumber","columnNumber","type","onChange","e","maxLength","style","width","_dropdownOptions$head","Fragment","placeholder","prevCriteria","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","handleReset","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","promptFileName","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\"; // Import the RowPopup component\nimport { flattenData, flattenJSONColumns } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    const updatedCriteria = {};\n    headers.forEach((header) => {\n      const newColumn = renamedHeaders[header] || header;\n      if (!hiddenColumns.includes(newColumn)) {\n        updatedCriteria[newColumn] = filterCriteria[header];\n      }\n    });\n    setFilterCriteria(updatedCriteria);\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    const updatedOptions = { ...dropdownOptions };\n    headers.forEach((header) => {\n      if (!hiddenColumns.includes(header)) {\n        const searchTerm = searchTerms[header]?.toLowerCase();\n        const allValues = Array.from(new Set(data.map((row) => row[header])));\n        const filteredValues = allValues.filter(\n          (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n        );\n        updatedOptions[header] = filteredValues;\n      }\n    });\n    setDropdownOptions(updatedOptions);\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        try {\n          const jsonData = JSON.parse(fileContent);\n          setData(jsonData);\n          setHeaders(Object.keys(jsonData[0]));\n          setRenamedHeaders({});\n          setHiddenColumns([]);\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n        } catch (error) {\n          alert(\"Error parsing JSON data. Please upload a valid JSON file.\");\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) =>\n      isChecked\n        ? prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column)\n        : [...prevHiddenColumns, column]\n    );\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const handleFileNameSubmit = () => {\n    // Logic for handling the file name submission and download\n    setIsFileNameModalOpen(false);\n    // ... (rest of the logic for file download goes here)\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}