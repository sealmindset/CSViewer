{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [isJSONData, setIsJSONData] = useState(false); // New state to track JSON data\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      // Clone hiddenColumns as an array\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n  useEffect(() => {\n    // Update the columns whenever data, headers, or hiddenColumns change\n    updateColumns();\n  }, [data, headers, hiddenColumns]);\n  const updateColumns = () => {\n    const groupByColumn = \"groupby\";\n    const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n    const updatedColumns = updatedHeaders.map(header => ({\n      name: renamedHeaders[header] || header,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: row => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1\n    }));\n    setColumns(updatedColumns);\n  };\n  const [columns, setColumns] = useState([]); // New state variable for columns\n\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    setIsJSONData(file.name.endsWith(\".json\")); // Update isJSONData based on file extension\n\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            const csvData = result.data;\n            const headers = result.meta.fields;\n            // Process CSV data to flatten JSON properties\n            const processedData = csvData.map(row => {\n              const flattenedRow = {};\n              for (const header of headers) {\n                const cellData = row[header];\n                try {\n                  const parsedData = JSON.parse(cellData);\n                  if (typeof parsedData === \"object\" && parsedData !== null) {\n                    // If it's a JSON object or array, flatten it and add to the row\n                    const flattenedCellData = flattenObject(parsedData);\n                    Object.entries(flattenedCellData).forEach(([key, value]) => {\n                      flattenedRow[`${header}.${key}`] = value;\n                    });\n                  } else {\n                    // If not, treat it as normal text\n                    flattenedRow[header] = cellData;\n                  }\n                } catch (error) {\n                  // If parsing fails, treat it as normal text\n                  flattenedRow[header] = cellData;\n                }\n              }\n              return flattenedRow;\n            });\n            setData(processedData);\n            setHeaders(headers);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        handleJSONInCSV(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const handleJSONInCSV = jsonData => {\n    if (Array.isArray(jsonData)) {\n      // JSON data is an array of objects\n      const headers = Object.keys(jsonData[0]);\n      const flattenedData = [];\n      jsonData.forEach(row => {\n        const flatRow = {};\n        for (const header of headers) {\n          const cellData = row[header];\n          try {\n            // Check if the cell data is a valid JSON object or array\n            const parsedData = JSON.parse(cellData);\n            if (typeof parsedData === \"object\" && parsedData !== null) {\n              // If it's a JSON object or array, flatten it and add to the row\n              const flattenedCellData = flattenObject(parsedData);\n              Object.entries(flattenedCellData).forEach(([key, value]) => {\n                flatRow[`${header}.${key}`] = value;\n              });\n            } else {\n              // If not, treat it as normal text\n              flatRow[header] = cellData;\n            }\n          } catch (error) {\n            // If parsing fails, treat it as normal text\n            flatRow[header] = cellData;\n          }\n        }\n        flattenedData.push(flatRow);\n      });\n      setData(flattenedData);\n      setHeaders(headers);\n      setRenamedHeaders({});\n      setHiddenColumns([]);\n      setFilterCriteria({});\n      setSearchTerms({});\n      setDropdownOptions({});\n      setGroupByColumns({});\n    } else {\n      alert(\"Invalid JSON data. Please upload a JSON array of objects.\");\n    }\n  };\n  const flattenObject = (object, parentKey = \"\", result = {}) => {\n    for (const key in object) {\n      const value = object[key];\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof value === \"object\" && !Array.isArray(value)) {\n        flattenObject(value, newKey, result);\n      } else {\n        result[newKey] = value;\n      }\n    }\n    return result;\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV or JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 424,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 423,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100)\n                        }));\n                      },\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 427,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 448,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 450,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: isJSONData ?\n        /*#__PURE__*/\n        // Conditional rendering based on JSON data\n        _jsxDEV(\"table\", {\n          className: \"json-data-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: renamedHeaders[header] || header\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: groupedData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headers.map(header => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row[header]\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 23\n              }, this))\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"cRQa1yTzp6oaeQJ7YW4qNSbfJFc=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","isFileNameModalOpen","setIsFileNameModalOpen","fileName","setFileName","selectedFileFormat","setSelectedFileFormat","isJSONData","setIsJSONData","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","filteredData","every","criteria","groupedAndSortedData","groupAndSortTableData","updateColumns","groupByColumn","updatedHeaders","slice","updatedColumns","name","selector","sortable","wrap","format","length","substring","omit","grow","setColumns","columns","handleDrop","acceptedFiles","file","reader","FileReader","endsWith","onload","event","fileContent","target","result","parse","skipEmptyLines","complete","csvData","meta","fields","processedData","flattenedRow","cellData","parsedData","JSON","flattenedCellData","flattenObject","Object","entries","key","error","jsonData","handleJSONInCSV","alert","readAsText","isArray","keys","flattenedData","flatRow","push","object","parentKey","newKey","getRootProps","getInputProps","onDrop","accept","multiple","handleReset","handleRowClick","handleColumnToggle","column","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","tableData","groups","groupKey","selected","join","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","promptFileName","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","index","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [isJSONData, setIsJSONData] = useState(false); // New state to track JSON data\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    // Update the columns whenever data, headers, or hiddenColumns change\n    updateColumns();\n  }, [data, headers, hiddenColumns]);\n\n  const updateColumns = () => {\n    const groupByColumn = \"groupby\";\n    const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n    const updatedColumns = updatedHeaders.map((header) => ({\n      name: renamedHeaders[header] || header,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: (row) => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1,\n    }));\n    setColumns(updatedColumns);\n  };\n\n  const [columns, setColumns] = useState([]); // New state variable for columns\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    setIsJSONData(file.name.endsWith(\".json\")); // Update isJSONData based on file extension\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            const csvData = result.data;\n            const headers = result.meta.fields;\n            // Process CSV data to flatten JSON properties\n            const processedData = csvData.map((row) => {\n              const flattenedRow = {};\n              for (const header of headers) {\n                const cellData = row[header];\n                try {\n                  const parsedData = JSON.parse(cellData);\n                  if (typeof parsedData === \"object\" && parsedData !== null) {\n                    // If it's a JSON object or array, flatten it and add to the row\n                    const flattenedCellData = flattenObject(parsedData);\n                    Object.entries(flattenedCellData).forEach(([key, value]) => {\n                      flattenedRow[`${header}.${key}`] = value;\n                    });\n                  } else {\n                    // If not, treat it as normal text\n                    flattenedRow[header] = cellData;\n                  }\n                } catch (error) {\n                  // If parsing fails, treat it as normal text\n                  flattenedRow[header] = cellData;\n                }\n              }\n              return flattenedRow;\n            });\n            setData(processedData);\n            setHeaders(headers);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        handleJSONInCSV(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const handleJSONInCSV = (jsonData) => {\n    if (Array.isArray(jsonData)) {\n      // JSON data is an array of objects\n      const headers = Object.keys(jsonData[0]);\n      const flattenedData = [];\n      jsonData.forEach((row) => {\n        const flatRow = {};\n        for (const header of headers) {\n          const cellData = row[header];\n          try {\n            // Check if the cell data is a valid JSON object or array\n            const parsedData = JSON.parse(cellData);\n            if (typeof parsedData === \"object\" && parsedData !== null) {\n              // If it's a JSON object or array, flatten it and add to the row\n              const flattenedCellData = flattenObject(parsedData);\n              Object.entries(flattenedCellData).forEach(([key, value]) => {\n                flatRow[`${header}.${key}`] = value;\n              });\n            } else {\n              // If not, treat it as normal text\n              flatRow[header] = cellData;\n            }\n          } catch (error) {\n            // If parsing fails, treat it as normal text\n            flatRow[header] = cellData;\n          }\n        }\n        flattenedData.push(flatRow);\n      });\n      setData(flattenedData);\n      setHeaders(headers);\n      setRenamedHeaders({});\n      setHiddenColumns([]);\n      setFilterCriteria({});\n      setSearchTerms({});\n      setDropdownOptions({});\n      setGroupByColumns({});\n    } else {\n      alert(\"Invalid JSON data. Please upload a JSON array of objects.\");\n    }\n  };\n\n  const flattenObject = (object, parentKey = \"\", result = {}) => {\n    for (const key in object) {\n      const value = object[key];\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof value === \"object\" && !Array.isArray(value)) {\n        flattenObject(value, newKey, result);\n      } else {\n        result[newKey] = value;\n      }\n    }\n    return result;\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV or JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }}\n                    />\n                  </td>\n                  <td>\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100),\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95}\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      <div className=\"section section5\">\n        <div className=\"table-container\">\n          {isJSONData ? ( // Conditional rendering based on JSON data\n            <table className=\"json-data-table\">\n              <thead>\n                <tr>\n                  {headers.map((header) => (\n                    <th key={header}>{renamedHeaders[header] || header}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {groupedData.map((row, index) => (\n                  <tr key={index}>\n                    {headers.map((header) => (\n                      <td key={header}>{row[header]}</td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <DataTable\n              columns={columns}\n              data={groupedData}\n              pagination\n              paginationPerPage={10}\n              onRowClicked={handleRowClick}\n              noHeader\n              customStyles={{\n                headCells: {\n                  style: {\n                    paddingLeft: \"8px\",\n                    paddingRight: \"8px\",\n                    paddingTop: \"8px\",\n                    paddingBottom: \"8px\",\n                    fontWeight: \"bold\",\n                    textAlign: \"left\",\n                  },\n                },\n                cells: {\n                  style: {\n                    paddingLeft: \"8px\",\n                    paddingRight: \"8px\",\n                    paddingTop: \"8px\",\n                    paddingBottom: \"8px\",\n                    textAlign: \"left\",\n                  },\n                },\n              }}\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={() => setIsModalOpen(false)}\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)}\n          />\n        )}\n      </Modal>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}