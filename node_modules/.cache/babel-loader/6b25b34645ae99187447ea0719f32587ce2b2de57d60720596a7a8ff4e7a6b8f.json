{"ast":null,"code":"export function isJSONString(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nexport function flattenJSON(jsonData, propertiesKey = \"PROPERTIES\") {\n  const result = [];\n  function flattenObject(obj, prefix = \"\") {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, prefix + key + \".\");\n        } else {\n          const newKey = prefix + key;\n          result.push({\n            [newKey]: value\n          });\n        }\n      }\n    }\n  }\n  if (Array.isArray(jsonData)) {\n    jsonData.forEach(item => {\n      if (item.hasOwnProperty(propertiesKey) && typeof item[propertiesKey] === \"object\") {\n        const propertiesData = item[propertiesKey];\n        delete item[propertiesKey];\n        flattenObject(item);\n        for (const key in propertiesData) {\n          if (propertiesData.hasOwnProperty(key)) {\n            const value = propertiesData[key];\n            result.push({\n              [propertiesKey + \".\" + key]: value\n            });\n          }\n        }\n      } else {\n        flattenObject(item);\n      }\n    });\n  } else {\n    // Single JSON object\n    if (jsonData.hasOwnProperty(propertiesKey) && typeof jsonData[propertiesKey] === \"object\") {\n      const propertiesData = jsonData[propertiesKey];\n      delete jsonData[propertiesKey];\n      flattenObject(jsonData);\n      for (const key in propertiesData) {\n        if (propertiesData.hasOwnProperty(key)) {\n          const value = propertiesData[key];\n          result.push({\n            [propertiesKey + \".\" + key]: value\n          });\n        }\n      }\n    } else {\n      flattenObject(jsonData);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["isJSONString","str","JSON","parse","error","flattenJSON","jsonData","propertiesKey","result","flattenObject","obj","prefix","key","hasOwnProperty","value","Array","isArray","newKey","push","forEach","item","propertiesData"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["export function isJSONString(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function flattenJSON(jsonData, propertiesKey = \"PROPERTIES\") {\n  const result = [];\n\n  function flattenObject(obj, prefix = \"\") {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, prefix + key + \".\");\n        } else {\n          const newKey = prefix + key;\n          result.push({ [newKey]: value });\n        }\n      }\n    }\n  }\n\n  if (Array.isArray(jsonData)) {\n    jsonData.forEach((item) => {\n      if (item.hasOwnProperty(propertiesKey) && typeof item[propertiesKey] === \"object\") {\n        const propertiesData = item[propertiesKey];\n        delete item[propertiesKey];\n        flattenObject(item);\n        for (const key in propertiesData) {\n          if (propertiesData.hasOwnProperty(key)) {\n            const value = propertiesData[key];\n            result.push({ [propertiesKey + \".\" + key]: value });\n          }\n        }\n      } else {\n        flattenObject(item);\n      }\n    });\n  } else {\n    // Single JSON object\n    if (jsonData.hasOwnProperty(propertiesKey) && typeof jsonData[propertiesKey] === \"object\") {\n      const propertiesData = jsonData[propertiesKey];\n      delete jsonData[propertiesKey];\n      flattenObject(jsonData);\n      for (const key in propertiesData) {\n        if (propertiesData.hasOwnProperty(key)) {\n          const value = propertiesData[key];\n          result.push({ [propertiesKey + \".\" + key]: value });\n        }\n      }\n    } else {\n      flattenObject(jsonData);\n    }\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,GAAG,EAAE;EAChC,IAAI;IACFC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC;IACf,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF;AAEA,OAAO,SAASC,WAAWA,CAACC,QAAQ,EAAEC,aAAa,GAAG,YAAY,EAAE;EAClE,MAAMC,MAAM,GAAG,EAAE;EAEjB,SAASC,aAAaA,CAACC,GAAG,EAAEC,MAAM,GAAG,EAAE,EAAE;IACvC,KAAK,MAAMC,GAAG,IAAIF,GAAG,EAAE;MACrB,IAAIA,GAAG,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;QAC3B,MAAME,KAAK,GAAGJ,GAAG,CAACE,GAAG,CAAC;QACtB,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACxEL,aAAa,CAACK,KAAK,EAAEH,MAAM,GAAGC,GAAG,GAAG,GAAG,CAAC;QAC1C,CAAC,MAAM;UACL,MAAMK,MAAM,GAAGN,MAAM,GAAGC,GAAG;UAC3BJ,MAAM,CAACU,IAAI,CAAC;YAAE,CAACD,MAAM,GAAGH;UAAM,CAAC,CAAC;QAClC;MACF;IACF;EACF;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACV,QAAQ,CAAC,EAAE;IAC3BA,QAAQ,CAACa,OAAO,CAAEC,IAAI,IAAK;MACzB,IAAIA,IAAI,CAACP,cAAc,CAACN,aAAa,CAAC,IAAI,OAAOa,IAAI,CAACb,aAAa,CAAC,KAAK,QAAQ,EAAE;QACjF,MAAMc,cAAc,GAAGD,IAAI,CAACb,aAAa,CAAC;QAC1C,OAAOa,IAAI,CAACb,aAAa,CAAC;QAC1BE,aAAa,CAACW,IAAI,CAAC;QACnB,KAAK,MAAMR,GAAG,IAAIS,cAAc,EAAE;UAChC,IAAIA,cAAc,CAACR,cAAc,CAACD,GAAG,CAAC,EAAE;YACtC,MAAME,KAAK,GAAGO,cAAc,CAACT,GAAG,CAAC;YACjCJ,MAAM,CAACU,IAAI,CAAC;cAAE,CAACX,aAAa,GAAG,GAAG,GAAGK,GAAG,GAAGE;YAAM,CAAC,CAAC;UACrD;QACF;MACF,CAAC,MAAM;QACLL,aAAa,CAACW,IAAI,CAAC;MACrB;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA,IAAId,QAAQ,CAACO,cAAc,CAACN,aAAa,CAAC,IAAI,OAAOD,QAAQ,CAACC,aAAa,CAAC,KAAK,QAAQ,EAAE;MACzF,MAAMc,cAAc,GAAGf,QAAQ,CAACC,aAAa,CAAC;MAC9C,OAAOD,QAAQ,CAACC,aAAa,CAAC;MAC9BE,aAAa,CAACH,QAAQ,CAAC;MACvB,KAAK,MAAMM,GAAG,IAAIS,cAAc,EAAE;QAChC,IAAIA,cAAc,CAACR,cAAc,CAACD,GAAG,CAAC,EAAE;UACtC,MAAME,KAAK,GAAGO,cAAc,CAACT,GAAG,CAAC;UACjCJ,MAAM,CAACU,IAAI,CAAC;YAAE,CAACX,aAAa,GAAG,GAAG,GAAGK,GAAG,GAAGE;UAAM,CAAC,CAAC;QACrD;MACF;IACF,CAAC,MAAM;MACLL,aAAa,CAACH,QAAQ,CAAC;IACzB;EACF;EAEA,OAAOE,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}