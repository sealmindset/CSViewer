{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties } from './JSONFlatten';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [toggleCurrentPage, setToggleCurrentPage] = useState(1);\n  const [filterCurrentPage, setFilterCurrentPage] = useState(1);\n  const rowsPerPage = 20;\n\n  // First useEffect for updating filter criteria\n  useEffect(() => {\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Second useEffect for updating dropdown options\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Third useEffect for setting initial state\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      // Clone hiddenColumns as an array\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Function to group and sort table data\n  const groupAndSortTableData = useCallback(tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Function to handle file drop\n  const handleDrop = useCallback(acceptedFiles => {\n    setIsLoading(true); // Set loading to true\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    const ignoredKeys = ['lenses', 'metadata', 'subnets'];\n    // Define the array of columns to be unchecked by default\n    const columnsToUncheck = ['ID', 'TYPE', 'TENANTID', 'KIND', 'LOCATION', 'MANAGEDBY', 'SKU', 'PLAN', 'IDENTITY', 'ZONES', 'EXTENDEDLOCATION'];\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            const originalHeaders = Object.keys(result.data[0]);\n            const processedData = result.data.map(row => {\n              let newRow = {\n                ...row\n              };\n\n              // Process PROPERTIES column\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const filteredProperties = Object.fromEntries(Object.entries(flattenedProperties).filter(([key]) => !ignoredKeys.some(ignoredKey => key.startsWith(ignoredKey))));\n                newRow = {\n                  ...newRow,\n                  ...filteredProperties\n                };\n              }\n\n              // Process TAGS column\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                newRow = {\n                  ...newRow,\n                  ...flattenedTags\n                };\n              }\n              return newRow;\n            });\n\n            // Logic to find the longest JSON string for both PROPERTIES and TAGS\n            let maxPropertyKeys = 0;\n            let maxTagKeys = 0;\n            let modelPropertyRow = null;\n            let modelTagRow = null;\n            processedData.forEach(row => {\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const keysCount = Object.keys(flattenedProperties).length;\n                const firstKey = Object.keys(flattenedProperties)[0];\n                if (keysCount > maxPropertyKeys && !ignoredKeys.some(ignoredKey => firstKey.startsWith(ignoredKey))) {\n                  maxPropertyKeys = keysCount;\n                  modelPropertyRow = flattenedProperties;\n                }\n              }\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                const keysCount = Object.keys(flattenedTags).length;\n                if (keysCount > maxTagKeys) {\n                  maxTagKeys = keysCount;\n                  modelTagRow = flattenedTags;\n                }\n              }\n            });\n            let newHeaders = [...originalHeaders];\n            if (modelPropertyRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelPropertyRow)];\n            }\n            if (modelTagRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelTagRow)];\n            }\n\n            // Identify columns with all null or empty values\n            const emptyColumns = newHeaders.reduce((acc, header) => {\n              const allEmpty = processedData.every(row => row[header] == null || typeof row[header] === 'string' && row[header].trim() === '' || Array.isArray(row[header]) && row[header].length === 0);\n              if (allEmpty) {\n                acc.push(header);\n              }\n              return acc;\n            }, []);\n            setHeaders(newHeaders);\n            setData(processedData);\n            setRenamedHeaders({});\n            setHiddenColumns([...new Set([...emptyColumns, ...columnsToUncheck])]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        if (Array.isArray(jsonData) && jsonData.length > 0 && typeof jsonData[0] === 'object') {\n          setHeaders(Object.keys(jsonData[0]));\n        }\n        setData(jsonData);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n    setIsLoading(false); // Set loading to false\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row && row[header]; // Add a check for 'row'\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupAndSortTableData(data).map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const filteredData = useCallback(() => {\n    return data.filter(row => {\n      for (const header of headers) {\n        // Check if there's a search term for this header and if the row doesn't match the search term\n        if (searchTerms[header] && !String(row[header]).toLowerCase().includes(searchTerms[header].toLowerCase())) {\n          return false;\n        }\n        // Check if there's a filter criteria for this header and if the row doesn't match the filter criteria\n        if (filterCriteria[header] && row[header] !== filterCriteria[header]) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [data, headers, searchTerms, filterCriteria]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Array.isArray(headers) && headers.map(header => {\n              const truncatedHeaderValue = (renamedHeaders[header] || header).substring(0, 100);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: !hiddenColumns.includes(header),\n                    onChange: e => handleColumnToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"field-name-cell\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: \"rename-input\",\n                    value: truncatedHeaderValue,\n                    onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                      ...prevRenamedHeaders,\n                      [header]: e.target.value\n                    })),\n                    maxLength: 100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"group-by-label\",\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      checked: groupByColumns[header],\n                      onChange: e => handleGroupByToggle(e, header)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 410,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 408,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 21\n                }, this)]\n              }, header, true, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: e.target.value\n                        }));\n                      },\n                      maxLength: 100,\n                      style: {\n                        width: \"98%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 438,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: filterCriteria[header] || \"\",\n                      onChange: e => {\n                        setFilterCriteria(prevFilterCriteria => ({\n                          ...prevFilterCriteria,\n                          [header]: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"\",\n                        children: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 462,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(option => {\n                        if (!option) return null; // Add this line to handle undefined or null options\n                        const truncatedOption = option.length > 100 ? option.substring(0, 100) + \"...\" : option;\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: option,\n                          children: truncatedOption\n                        }, option, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 467,\n                          columnNumber: 35\n                        }, this);\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 453,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 452,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-section\",\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        title: \"CSV|JSON Data\",\n        columns: columns,\n        data: groupAndSortTableData(filteredData()),\n        pagination: true,\n        highlightOnHover: true,\n        pointerOnHover: true,\n        onRowClicked: handleRowClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"download\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => promptFileName(\"csv\"),\n        children: \"Download as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => promptFileName(\"json\"),\n        children: \"Download as JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(RowPopup, {\n        data: selectedRowData,\n        headers: headers,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-name-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter File Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: fileName,\n          onChange: e => setFileName(e.target.value),\n          placeholder: \"Enter file name without extension\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-name-modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleFileNameSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsFileNameModalOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4hwknhS4PS0Z6q55S7A2i6RZJ00=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenProperties","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","toggleCurrentPage","setToggleCurrentPage","filterCurrentPage","setFilterCurrentPage","rowsPerPage","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","groupAndSortTableData","tableData","Object","keys","length","groups","groupKey","entries","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","aValue","bValue","localeCompare","handleDrop","acceptedFiles","setIsLoading","file","reader","FileReader","ignoredKeys","columnsToUncheck","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","originalHeaders","processedData","newRow","PROPERTIES","flattenedProperties","filteredProperties","fromEntries","key","some","ignoredKey","startsWith","TAGS","flattenedTags","maxPropertyKeys","maxTagKeys","modelPropertyRow","modelTagRow","keysCount","firstKey","newHeaders","emptyColumns","reduce","acc","allEmpty","every","trim","isArray","jsonData","JSON","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","omit","grow","handleRowClick","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","handleReset","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","handleDownload","visibleData","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","filteredData","String","className","children","_jsxFileName","lineNumber","columnNumber","isLoading","truncatedHeaderValue","substring","onChange","e","maxLength","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","width","prevFilterCriteria","option","truncatedOption","title","pagination","highlightOnHover","pointerOnHover","onRowClicked","onClick","isOpen","onRequestClose","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties } from './JSONFlatten';\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [toggleCurrentPage, setToggleCurrentPage] = useState(1);\n  const [filterCurrentPage, setFilterCurrentPage] = useState(1);\n  const rowsPerPage = 20;\n\n  // First useEffect for updating filter criteria\n  useEffect(() => {\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Second useEffect for updating dropdown options\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Third useEffect for setting initial state\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Function to group and sort table data\n  const groupAndSortTableData = useCallback((tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Function to handle file drop\n  const handleDrop = useCallback((acceptedFiles) => {\n    setIsLoading(true);  // Set loading to true\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    const ignoredKeys = ['lenses', 'metadata', 'subnets']  \n    // Define the array of columns to be unchecked by default\n    const columnsToUncheck = ['ID', 'TYPE', 'TENANTID', 'KIND', 'LOCATION', 'MANAGEDBY', 'SKU', 'PLAN', 'IDENTITY', 'ZONES', 'EXTENDEDLOCATION'];\n    \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n  \n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            const originalHeaders = Object.keys(result.data[0]);\n  \n            const processedData = result.data.map(row => {\n              let newRow = { ...row };\n  \n              // Process PROPERTIES column\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const filteredProperties = Object.fromEntries(\n                  Object.entries(flattenedProperties).filter(\n                    ([key]) => !ignoredKeys.some(ignoredKey => key.startsWith(ignoredKey))\n                  )\n                );\n                newRow = { ...newRow, ...filteredProperties };\n              }\n  \n              // Process TAGS column\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                newRow = { ...newRow, ...flattenedTags };\n              }\n  \n              return newRow;\n            });\n  \n            // Logic to find the longest JSON string for both PROPERTIES and TAGS\n            let maxPropertyKeys = 0;\n            let maxTagKeys = 0;\n            let modelPropertyRow = null;\n            let modelTagRow = null;\n  \n            processedData.forEach(row => {\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const keysCount = Object.keys(flattenedProperties).length;\n                const firstKey = Object.keys(flattenedProperties)[0];\n            \n                if (keysCount > maxPropertyKeys && !ignoredKeys.some(ignoredKey => firstKey.startsWith(ignoredKey))) {\n                  maxPropertyKeys = keysCount;\n                  modelPropertyRow = flattenedProperties;\n                }\n              }\n  \n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                const keysCount = Object.keys(flattenedTags).length;\n                if (keysCount > maxTagKeys) {\n                  maxTagKeys = keysCount;\n                  modelTagRow = flattenedTags;\n                }\n              }\n            });\n  \n            let newHeaders = [...originalHeaders];\n            if (modelPropertyRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelPropertyRow)];\n            }\n            if (modelTagRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelTagRow)];\n            }\n\n            // Identify columns with all null or empty values\n            const emptyColumns = newHeaders.reduce((acc, header) => {\n              const allEmpty = processedData.every(row => \n                row[header] == null || \n                (typeof row[header] === 'string' && row[header].trim() === '') ||\n                (Array.isArray(row[header]) && row[header].length === 0)\n              );\n              if (allEmpty) {\n                acc.push(header);\n              }\n              return acc;\n            }, []);\n\n  \n            setHeaders(newHeaders);\n            setData(processedData);\n            setRenamedHeaders({});\n            setHiddenColumns([...new Set([...emptyColumns, ...columnsToUncheck])]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n\n        if (Array.isArray(jsonData) && jsonData.length > 0 && typeof jsonData[0] === 'object') {\n          setHeaders(Object.keys(jsonData[0]));\n        }\n\n        setData(jsonData);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n    setIsLoading(false);  // Set loading to false\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row && row[header]; // Add a check for 'row'\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupAndSortTableData(data).map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n  \n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n  \n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const filteredData = useCallback(() => {\n    return data.filter(row => {\n      for (const header of headers) {\n        // Check if there's a search term for this header and if the row doesn't match the search term\n        if (searchTerms[header] && !String(row[header]).toLowerCase().includes(searchTerms[header].toLowerCase())) {\n          return false;\n        }\n        // Check if there's a filter criteria for this header and if the row doesn't match the filter criteria\n        if (filterCriteria[header] && row[header] !== filterCriteria[header]) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [data, headers, searchTerms, filterCriteria]);\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"header\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n      {isLoading && <div className=\"spinner\"></div>}\n      {/* Section 2: CVS File Input */}\n      <div className=\"upload\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n       {/* Section 3: Toggle Section */}\n       <div className=\"toggle\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            {/* Toggle Section */}\n            <tbody>\n              {Array.isArray(headers) && headers.map((header) => {\n                const truncatedHeaderValue = (renamedHeaders[header] || header).substring(0, 100);\n                return (\n                  <tr key={header}>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        checked={!hiddenColumns.includes(header)}\n                        onChange={(e) => handleColumnToggle(e, header)}\n                      />\n                    </td>\n                    <td className=\"field-name-cell\">\n                      <input\n                        type=\"text\"\n                        className=\"rename-input\"\n                        value={truncatedHeaderValue}\n                        onChange={(e) =>\n                          setRenamedHeaders((prevRenamedHeaders) => ({\n                            ...prevRenamedHeaders,\n                            [header]: e.target.value,\n                          }))\n                        }\n                        maxLength={100}\n                      />\n                    </td>\n                    <td className=\"group-by-label\">\n                      <label>\n                        Group By:\n                        <input\n                          type=\"checkbox\"\n                          checked={groupByColumns[header]}\n                          onChange={(e) => handleGroupByToggle(e, header)}\n                        />\n                      </label>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"filter\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: e.target.value,\n                            }));\n                          }}\n                          maxLength={100}\n                          style={{ width: \"98%\" }}\n                        />\n                      </td>\n                      <td>\n                        <select\n                          value={filterCriteria[header] || \"\"}\n                          onChange={(e) => {\n                            setFilterCriteria((prevFilterCriteria) => ({\n                              ...prevFilterCriteria,\n                              [header]: e.target.value,\n                            }));\n                          }}\n                        >\n                          <option value=\"\">All</option>\n                          {dropdownOptions[header]?.map((option) => {\n                              if (!option) return null;  // Add this line to handle undefined or null options\n                              const truncatedOption = option.length > 100 ? option.substring(0, 100) + \"...\" : option;\n                              return (\n                                  <option key={option} value={option}>\n                                      {truncatedOption}\n                                  </option>\n                              );\n                          })}\n\n                        </select>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 5: Table Section */}\n      <div className=\"table-section\">\n        <DataTable\n          title=\"CSV|JSON Data\"\n          columns={columns}\n          data={groupAndSortTableData(filteredData())}\n          pagination\n          highlightOnHover\n          pointerOnHover\n          onRowClicked={handleRowClick}\n        />\n      </div>\n\n      {/* Section 6: Reset and Download Section */}\n      <div className=\"download\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={() => promptFileName(\"csv\")}>Download as CSV</button>\n        <button onClick={() => promptFileName(\"json\")}>Download as JSON</button>\n      </div>\n\n      {/* Section 7: Modal Section */}\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n        <RowPopup \n            data={selectedRowData} \n            headers={headers}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} \n        />\n\n      </Modal>\n\n      {/* Section 8: File Name Modal */}\n      <Modal isOpen={isFileNameModalOpen} onRequestClose={() => setIsFileNameModalOpen(false)}>\n        <div className=\"file-name-modal\">\n          <h2>Enter File Name</h2>\n          <input\n            type=\"text\"\n            value={fileName}\n            onChange={(e) => setFileName(e.target.value)}\n            placeholder=\"Enter file name without extension\"\n          />\n          <div className=\"file-name-modal-buttons\">\n            <button onClick={handleFileNameSubmit}>Submit</button>\n            <button onClick={() => setIsFileNameModalOpen(false)}>Cancel</button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}