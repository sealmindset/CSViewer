{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties } from './JSONFlatten';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ignoredKeys, setIgnoredKeys] = useState([]);\n  const [columnsToUncheck, setColumnsToUncheck] = useState([]);\n\n  // First useEffect for updating filter criteria\n  useEffect(() => {\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Second useEffect for updating dropdown options\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Third useEffect for setting initial state\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      // Clone hiddenColumns as an array\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Function to group and sort table data\n  const groupAndSortTableData = useCallback(tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Function to handle file drop\n  const handleDrop = useCallback(acceptedFiles => {\n    setIsLoading(true); // Set loading to true\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    //const ignoredKeys = ['lenses', 'metadata', 'subnets']  \n    // Define the array of columns to be unchecked by default\n    //const columnsToUncheck = ['ID', 'TYPE', 'TENANTID', 'KIND', 'LOCATION', 'MANAGEDBY', 'SKU', 'PLAN', 'IDENTITY', 'ZONES', 'EXTENDEDLOCATION'];\n\n    const hasIgnoredKeys = ignoredKeys && ignoredKeys.length > 0;\n    const hasColumnsToUncheck = columnsToUncheck && columnsToUncheck.length > 0;\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            const originalHeaders = Object.keys(result.data[0]);\n            const processedData = result.data.map(row => {\n              let newRow = {\n                ...row\n              };\n\n              // Process PROPERTIES column\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const filteredProperties = Object.fromEntries(hasIgnoredKeys ? Object.entries(flattenedProperties).filter(([key]) => !ignoredKeys.some(ignoredKey => key.startsWith(ignoredKey))) : Object.entries(flattenedProperties));\n                newRow = {\n                  ...newRow,\n                  ...filteredProperties\n                };\n              }\n\n              // Process TAGS column\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                newRow = {\n                  ...newRow,\n                  ...flattenedTags\n                };\n              }\n              return newRow;\n            });\n\n            // Logic to find the longest JSON string for both PROPERTIES and TAGS\n            let maxPropertyKeys = 0;\n            let maxTagKeys = 0;\n            let modelPropertyRow = null;\n            let modelTagRow = null;\n            processedData.forEach(row => {\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const keysCount = Object.keys(flattenedProperties).length;\n                const firstKey = Object.keys(flattenedProperties)[0];\n                if (keysCount > maxPropertyKeys && !ignoredKeys.some(ignoredKey => firstKey.startsWith(ignoredKey))) {\n                  maxPropertyKeys = keysCount;\n                  modelPropertyRow = flattenedProperties;\n                }\n              }\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                const keysCount = Object.keys(flattenedTags).length;\n                if (keysCount > maxTagKeys) {\n                  maxTagKeys = keysCount;\n                  modelTagRow = flattenedTags;\n                }\n              }\n            });\n            let newHeaders = [...originalHeaders];\n            if (modelPropertyRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelPropertyRow)];\n            }\n            if (modelTagRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelTagRow)];\n            }\n\n            // Identify columns with all null or empty values\n            const emptyColumns = newHeaders.reduce((acc, header) => {\n              const allEmpty = processedData.every(row => row[header] == null || typeof row[header] === 'string' && row[header].trim() === '' || Array.isArray(row[header]) && row[header].length === 0);\n              if (allEmpty) {\n                acc.push(header);\n              }\n              return acc;\n            }, []);\n            setHeaders(newHeaders);\n            setData(processedData);\n            setRenamedHeaders({});\n            setHiddenColumns([...new Set([...emptyColumns, ...columnsToUncheck])]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        if (Array.isArray(jsonData) && jsonData.length > 0 && typeof jsonData[0] === 'object') {\n          setHeaders(Object.keys(jsonData[0]));\n        }\n        setData(jsonData);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n      setIsLoading(false); // Set loading to false\n    };\n\n    reader.readAsText(file);\n  }, [ignoredKeys, columnsToUncheck]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row && row[header]; // Add a check for 'row'\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupAndSortTableData(data).map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const filteredData = useCallback(() => {\n    return data.filter(row => {\n      for (const header of headers) {\n        // Check if there's a search term for this header and if the row doesn't match the search term\n        if (searchTerms[header] && !String(row[header]).toLowerCase().includes(searchTerms[header].toLowerCase())) {\n          return false;\n        }\n        // Check if there's a filter criteria for this header and if the row doesn't match the filter criteria\n        if (filterCriteria[header] && row[header] !== filterCriteria[header]) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [data, headers, searchTerms, filterCriteria]);\n  const handleSave = editedRowData => {\n    const updatedData = data.map(row => {\n      if (row.id === editedRowData.id) {\n        // Assuming each row has a unique 'id' field\n        return editedRowData;\n      }\n      return row;\n    });\n    setData(updatedData);\n  };\n  const handleConfigUpload = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      try {\n        const config = JSON.parse(fileContent);\n        if (config.ignoredKeys && Array.isArray(config.ignoredKeys)) {\n          setIgnoredKeys(config.ignoredKeys);\n        }\n        if (config.columnsToUncheck && Array.isArray(config.columnsToUncheck)) {\n          setColumnsToUncheck(config.columnsToUncheck);\n        }\n      } catch (error) {\n        alert(\"Invalid configuration file. Please upload a valid JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps: getConfigRootProps,\n    getInputProps: getConfigInputProps\n  } = useDropzone({\n    onDrop: handleConfigUpload,\n    accept: \".json\",\n    // Only allow JSON files for configuration\n    multiple: false\n  });\n\n  // Function to handle checkbox toggle for ignoredKeys\n  const toggleIgnoredKey = key => {\n    // Your logic to toggle ignored key\n  };\n\n  // Function to handle checkbox toggle for columnsToUncheck\n  const toggleColumnToUncheck = column => {\n    // Your logic to toggle column to uncheck\n  };\n  const updateIgnoredKey = (index, newValue) => {\n    const newIgnoredKeys = [...ignoredKeys];\n    newIgnoredKeys[index] = newValue;\n    setIgnoredKeys(newIgnoredKeys);\n  };\n  const updateColumnToUncheck = (index, newValue) => {\n    const newColumnsToUncheck = [...columnsToUncheck];\n    newColumnsToUncheck[index] = newValue;\n    setColumnsToUncheck(newColumnsToUncheck);\n  };\n  const addNewIgnoredKey = () => {\n    setIgnoredKeys([...ignoredKeys, \"\"]);\n  };\n  const removeIgnoredKey = index => {\n    const newIgnoredKeys = [...ignoredKeys];\n    newIgnoredKeys.splice(index, 1);\n    setIgnoredKeys(newIgnoredKeys);\n  };\n  const addNewColumnToUncheck = () => {\n    setColumnsToUncheck([...columnsToUncheck, \"\"]);\n  };\n  const removeColumnToUncheck = index => {\n    const newColumnsToUncheck = [...columnsToUncheck];\n    newColumnsToUncheck.splice(index, 1);\n    setColumnsToUncheck(newColumnsToUncheck);\n  };\n  const saveConfigToFile = () => {\n    const config = {\n      ignoredKeys,\n      columnsToUncheck\n    };\n    const dataToExport = JSON.stringify(config, null, 2);\n    const blob = new Blob([dataToExport], {\n      type: 'text/json;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', 'config.json');\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exceptup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fields to ignore\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ...getConfigRootProps(),\n        className: \"dropzone\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ...getConfigInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag 'n' drop a Config JSON file here, or click to select a file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exceptype\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: '1%'\n              },\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ignore Column Headers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [ignoredKeys.map((key, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                onChange: () => toggleIgnoredKey(key)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: key,\n                onChange: e => updateIgnoredKey(index, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeIgnoredKey(index),\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this), \" \"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addNewIgnoredKey,\n              children: \"Add Row\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: '1%'\n              },\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Hide Columns\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [columnsToUncheck.map((column, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                onChange: () => toggleColumnToUncheck(column)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: column,\n                onChange: e => updateColumnToUncheck(index, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeColumnToUncheck(index),\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addNewColumnToUncheck,\n              children: \"Add Row\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveConfigToFile,\n        children: \"Save Config\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Array.isArray(headers) && headers.map(header => {\n              const truncatedHeaderValue = (renamedHeaders[header] || header).substring(0, 100);\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: !hiddenColumns.includes(header),\n                    onChange: e => handleColumnToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 557,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"field-name-cell\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: \"rename-input\",\n                    value: truncatedHeaderValue,\n                    onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                      ...prevRenamedHeaders,\n                      [header]: e.target.value\n                    })),\n                    maxLength: 100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 564,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 563,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"group-by-label\",\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      checked: groupByColumns[header],\n                      onChange: e => handleGroupByToggle(e, header)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 580,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 21\n                }, this)]\n              }, header, true, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 605,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 604,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: e.target.value\n                        }));\n                      },\n                      maxLength: 100,\n                      style: {\n                        width: \"98%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 608,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 607,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"select\", {\n                      value: filterCriteria[header] || \"\",\n                      onChange: e => {\n                        setFilterCriteria(prevFilterCriteria => ({\n                          ...prevFilterCriteria,\n                          [header]: e.target.value\n                        }));\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"\",\n                        children: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 632,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(option => {\n                        if (!option) return null; // Add this line to handle undefined or null options\n                        const truncatedOption = option.length > 100 ? option.substring(0, 100) + \"...\" : option;\n                        return /*#__PURE__*/_jsxDEV(\"option\", {\n                          value: option,\n                          children: truncatedOption\n                        }, option, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 637,\n                          columnNumber: 35\n                        }, this);\n                      })]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 623,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 622,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-section\",\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        title: \"CSV|JSON Data\",\n        columns: columns,\n        data: groupAndSortTableData(filteredData()),\n        pagination: true,\n        highlightOnHover: true,\n        pointerOnHover: true,\n        onRowClicked: handleRowClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"download\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => promptFileName(\"csv\"),\n        children: \"Download as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => promptFileName(\"json\"),\n        children: \"Download as JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(RowPopup, {\n        data: selectedRowData,\n        headers: headers,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false),\n        onSave: handleSave // Pass the handleSave function here\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-name-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter File Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: fileName,\n          onChange: e => setFileName(e.target.value),\n          placeholder: \"Enter file name without extension\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-name-modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleFileNameSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsFileNameModalOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"DSNJFALp1+FxeWDmPI0TtWeav3g=\", false, function () {\n  return [useDropzone, useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenProperties","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","isLoading","setIsLoading","ignoredKeys","setIgnoredKeys","columnsToUncheck","setColumnsToUncheck","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","groupAndSortTableData","tableData","Object","keys","length","groups","groupKey","entries","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","aValue","bValue","localeCompare","handleDrop","acceptedFiles","file","reader","FileReader","hasIgnoredKeys","hasColumnsToUncheck","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","originalHeaders","processedData","newRow","PROPERTIES","flattenedProperties","filteredProperties","fromEntries","key","some","ignoredKey","startsWith","TAGS","flattenedTags","maxPropertyKeys","maxTagKeys","modelPropertyRow","modelTagRow","keysCount","firstKey","newHeaders","emptyColumns","reduce","acc","allEmpty","every","trim","isArray","jsonData","JSON","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","omit","grow","handleRowClick","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","handleReset","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","handleDownload","visibleData","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","filteredData","String","handleSave","editedRowData","updatedData","id","handleConfigUpload","config","error","getConfigRootProps","getConfigInputProps","toggleIgnoredKey","toggleColumnToUncheck","updateIgnoredKey","index","newValue","newIgnoredKeys","updateColumnToUncheck","newColumnsToUncheck","addNewIgnoredKey","removeIgnoredKey","splice","addNewColumnToUncheck","removeColumnToUncheck","saveConfigToFile","className","children","_jsxFileName","lineNumber","columnNumber","width","marginTop","onChange","e","onClick","truncatedHeaderValue","substring","maxLength","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","prevFilterCriteria","option","truncatedOption","title","pagination","highlightOnHover","pointerOnHover","onRowClicked","isOpen","onRequestClose","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenProperties } from './JSONFlatten';\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [ignoredKeys, setIgnoredKeys] = useState([]);\n  const [columnsToUncheck, setColumnsToUncheck] = useState([]);\n\n  // First useEffect for updating filter criteria\n  useEffect(() => {\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Second useEffect for updating dropdown options\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Third useEffect for setting initial state\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Function to group and sort table data\n  const groupAndSortTableData = useCallback((tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  }, [groupByColumns, hiddenColumns]);\n\n  // Function to handle file drop\n  const handleDrop = useCallback((acceptedFiles) => {\n    setIsLoading(true);  // Set loading to true\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    //const ignoredKeys = ['lenses', 'metadata', 'subnets']  \n    // Define the array of columns to be unchecked by default\n    //const columnsToUncheck = ['ID', 'TYPE', 'TENANTID', 'KIND', 'LOCATION', 'MANAGEDBY', 'SKU', 'PLAN', 'IDENTITY', 'ZONES', 'EXTENDEDLOCATION'];\n\n    const hasIgnoredKeys = ignoredKeys && ignoredKeys.length > 0;\n    const hasColumnsToUncheck = columnsToUncheck && columnsToUncheck.length > 0;\n\n\n    \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n  \n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            const originalHeaders = Object.keys(result.data[0]);\n  \n            const processedData = result.data.map(row => {\n              let newRow = { ...row };\n  \n              // Process PROPERTIES column\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const filteredProperties = Object.fromEntries(\n                  hasIgnoredKeys ?\n                    Object.entries(flattenedProperties).filter(\n                      ([key]) => !ignoredKeys.some(ignoredKey => key.startsWith(ignoredKey))\n                    )\n                  : Object.entries(flattenedProperties)\n                );\n                newRow = { ...newRow, ...filteredProperties };\n              }\n  \n              // Process TAGS column\n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                newRow = { ...newRow, ...flattenedTags };\n              }\n  \n              return newRow;\n            });\n  \n            // Logic to find the longest JSON string for both PROPERTIES and TAGS\n            let maxPropertyKeys = 0;\n            let maxTagKeys = 0;\n            let modelPropertyRow = null;\n            let modelTagRow = null;\n  \n            processedData.forEach(row => {\n              if (row.PROPERTIES) {\n                const flattenedProperties = flattenProperties(row.PROPERTIES);\n                const keysCount = Object.keys(flattenedProperties).length;\n                const firstKey = Object.keys(flattenedProperties)[0];\n            \n                if (keysCount > maxPropertyKeys && !ignoredKeys.some(ignoredKey => firstKey.startsWith(ignoredKey))) {\n                  maxPropertyKeys = keysCount;\n                  modelPropertyRow = flattenedProperties;\n                }\n              }\n  \n              if (row.TAGS) {\n                const flattenedTags = flattenProperties(row.TAGS);\n                const keysCount = Object.keys(flattenedTags).length;\n                if (keysCount > maxTagKeys) {\n                  maxTagKeys = keysCount;\n                  modelTagRow = flattenedTags;\n                }\n              }\n            });\n  \n            let newHeaders = [...originalHeaders];\n            if (modelPropertyRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelPropertyRow)];\n            }\n            if (modelTagRow) {\n              newHeaders = [...newHeaders, ...Object.keys(modelTagRow)];\n            }\n\n            // Identify columns with all null or empty values\n            const emptyColumns = newHeaders.reduce((acc, header) => {\n              const allEmpty = processedData.every(row => \n                row[header] == null || \n                (typeof row[header] === 'string' && row[header].trim() === '') ||\n                (Array.isArray(row[header]) && row[header].length === 0)\n              );\n              if (allEmpty) {\n                acc.push(header);\n              }\n              return acc;\n            }, []);\n\n  \n            setHeaders(newHeaders);\n            setData(processedData);\n            setRenamedHeaders({});\n            setHiddenColumns([...new Set([...emptyColumns, ...columnsToUncheck])]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n\n        if (Array.isArray(jsonData) && jsonData.length > 0 && typeof jsonData[0] === 'object') {\n          setHeaders(Object.keys(jsonData[0]));\n        }\n\n        setData(jsonData);\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n      setIsLoading(false);  // Set loading to false\n    };\n\n    reader.readAsText(file);\n   \n  }, [ignoredKeys, columnsToUncheck]);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row && row[header]; // Add a check for 'row'\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupAndSortTableData(data).map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n  \n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n  \n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const filteredData = useCallback(() => {\n    return data.filter(row => {\n      for (const header of headers) {\n        // Check if there's a search term for this header and if the row doesn't match the search term\n        if (searchTerms[header] && !String(row[header]).toLowerCase().includes(searchTerms[header].toLowerCase())) {\n          return false;\n        }\n        // Check if there's a filter criteria for this header and if the row doesn't match the filter criteria\n        if (filterCriteria[header] && row[header] !== filterCriteria[header]) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [data, headers, searchTerms, filterCriteria]);\n\n  const handleSave = (editedRowData) => {\n    const updatedData = data.map((row) => {\n      if (row.id === editedRowData.id) {  // Assuming each row has a unique 'id' field\n        return editedRowData;\n      }\n      return row;\n    });\n    setData(updatedData);\n  };\n\n  const handleConfigUpload = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n  \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n  \n      try {\n        const config = JSON.parse(fileContent);\n  \n        if (config.ignoredKeys && Array.isArray(config.ignoredKeys)) {\n          setIgnoredKeys(config.ignoredKeys);\n        }\n        if (config.columnsToUncheck && Array.isArray(config.columnsToUncheck)) {\n          setColumnsToUncheck(config.columnsToUncheck);\n        }\n  \n      } catch (error) {\n        alert(\"Invalid configuration file. Please upload a valid JSON file.\");\n      }\n    };\n  \n    reader.readAsText(file);\n  }, []);\n  \n\n  const { getRootProps: getConfigRootProps, getInputProps: getConfigInputProps } = useDropzone({\n    onDrop: handleConfigUpload,\n    accept: \".json\", // Only allow JSON files for configuration\n    multiple: false,\n  });\n\n  // Function to handle checkbox toggle for ignoredKeys\n  const toggleIgnoredKey = (key) => {\n    // Your logic to toggle ignored key\n  };\n\n  // Function to handle checkbox toggle for columnsToUncheck\n  const toggleColumnToUncheck = (column) => {\n    // Your logic to toggle column to uncheck\n  };\n\n  const updateIgnoredKey = (index, newValue) => {\n    const newIgnoredKeys = [...ignoredKeys];\n    newIgnoredKeys[index] = newValue;\n    setIgnoredKeys(newIgnoredKeys);\n  };\n  \n  const updateColumnToUncheck = (index, newValue) => {\n    const newColumnsToUncheck = [...columnsToUncheck];\n    newColumnsToUncheck[index] = newValue;\n    setColumnsToUncheck(newColumnsToUncheck);\n  };\n  \n  const addNewIgnoredKey = () => {\n    setIgnoredKeys([...ignoredKeys, \"\"]);\n  };\n\n  const removeIgnoredKey = (index) => {\n    const newIgnoredKeys = [...ignoredKeys];\n    newIgnoredKeys.splice(index, 1);\n    setIgnoredKeys(newIgnoredKeys);\n  };\n\n  const addNewColumnToUncheck = () => {\n    setColumnsToUncheck([...columnsToUncheck, \"\"]);\n  };\n\n  const removeColumnToUncheck = (index) => {\n    const newColumnsToUncheck = [...columnsToUncheck];\n    newColumnsToUncheck.splice(index, 1);\n    setColumnsToUncheck(newColumnsToUncheck);\n  };\n\n  const saveConfigToFile = () => {\n    const config = {\n      ignoredKeys,\n      columnsToUncheck\n    };\n  \n    const dataToExport = JSON.stringify(config, null, 2);\n    const blob = new Blob([dataToExport], { type: 'text/json;charset=utf-8;' });\n    const link = document.createElement('a');\n  \n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', 'config.json');\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"header\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 1.5: Exceptype Upload */}\n      <div className=\"exceptup\">\n        <h2>Fields to ignore</h2>\n        <div {...getConfigRootProps()} className=\"dropzone\">\n          <input {...getConfigInputProps()} />\n          <p>Drag 'n' drop a Config JSON file here, or click to select a file</p>\n        </div>\n      </div>\n      \n      {/* Section 1.6: Exceptype Tables */}\n      <div className=\"exceptype\">\n        {/* Table for ignoredKeys */}\n        <table style={{ width: '100%', marginTop: '20px' }}>\n          <thead>\n            <tr>\n              <th style={{ width: '1%' }}> </th>\n              <th>Ignore Column Headers</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ignoredKeys.map((key, index) => (\n              <tr key={index}>\n                <td><input type=\"checkbox\" onChange={() => toggleIgnoredKey(key)} /></td>\n                <td><input type=\"text\" value={key} onChange={(e) => updateIgnoredKey(index, e.target.value)} /></td>\n                <td><button onClick={() => removeIgnoredKey(index)}>Remove</button></td> {/* Add this if you want a remove button */}\n              </tr>\n            ))}\n            <tr><button onClick={addNewIgnoredKey}>Add Row</button></tr>\n          </tbody>\n        </table>\n\n        {/* Table for columnsToUncheck */}\n        <table style={{ width: '100%', marginTop: '20px' }}>\n          <thead>\n            <tr>\n              <th style={{ width: '1%' }}> </th>\n              <th>Hide Columns</th>\n            </tr>\n          </thead>\n          <tbody>\n            {columnsToUncheck.map((column, index) => (\n              <tr key={index}>\n                <td><input type=\"checkbox\" onChange={() => toggleColumnToUncheck(column)} /></td>\n                <td><input type=\"text\" value={column} onChange={(e) => updateColumnToUncheck(index, e.target.value)} /></td>\n                <td><button onClick={() => removeColumnToUncheck(index)}>Remove</button></td>\n              </tr>\n            ))}\n            <tr><button onClick={addNewColumnToUncheck}>Add Row</button></tr>\n          </tbody>\n        </table>\n        <button onClick={saveConfigToFile}>Save Config</button>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"upload\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n\n        </div>\n      </div>\n\n      {isLoading && <div className=\"spinner\"></div>}\n\n       {/* Section 3: Toggle Section */}\n       <div className=\"toggle\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            {/* Toggle Section */}\n            <tbody>\n              {Array.isArray(headers) && headers.map((header) => {\n                const truncatedHeaderValue = (renamedHeaders[header] || header).substring(0, 100);\n                return (\n                  <tr key={header}>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        checked={!hiddenColumns.includes(header)}\n                        onChange={(e) => handleColumnToggle(e, header)}\n                      />\n                    </td>\n                    <td className=\"field-name-cell\">\n                      <input\n                        type=\"text\"\n                        className=\"rename-input\"\n                        value={truncatedHeaderValue}\n                        onChange={(e) =>\n                          setRenamedHeaders((prevRenamedHeaders) => ({\n                            ...prevRenamedHeaders,\n                            [header]: e.target.value,\n                          }))\n                        }\n                        maxLength={100}\n                      />\n                    </td>\n                    <td className=\"group-by-label\">\n                      <label>\n                        Group By:\n                        <input\n                          type=\"checkbox\"\n                          checked={groupByColumns[header]}\n                          onChange={(e) => handleGroupByToggle(e, header)}\n                        />\n                      </label>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"filter\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: e.target.value,\n                            }));\n                          }}\n                          maxLength={100}\n                          style={{ width: \"98%\" }}\n                        />\n                      </td>\n                      <td>\n                        <select\n                          value={filterCriteria[header] || \"\"}\n                          onChange={(e) => {\n                            setFilterCriteria((prevFilterCriteria) => ({\n                              ...prevFilterCriteria,\n                              [header]: e.target.value,\n                            }));\n                          }}\n                        >\n                          <option value=\"\">All</option>\n                          {dropdownOptions[header]?.map((option) => {\n                              if (!option) return null;  // Add this line to handle undefined or null options\n                              const truncatedOption = option.length > 100 ? option.substring(0, 100) + \"...\" : option;\n                              return (\n                                  <option key={option} value={option}>\n                                      {truncatedOption}\n                                  </option>\n                              );\n                          })}\n\n                        </select>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 5: Table Section */}\n      <div className=\"table-section\">\n        <DataTable\n          title=\"CSV|JSON Data\"\n          columns={columns}\n          data={groupAndSortTableData(filteredData())}\n          pagination\n          highlightOnHover\n          pointerOnHover\n          onRowClicked={handleRowClick}\n        />\n      </div>\n\n      {/* Section 6: Reset and Download Section */}\n      <div className=\"download\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={() => promptFileName(\"csv\")}>Download as CSV</button>\n        <button onClick={() => promptFileName(\"json\")}>Download as JSON</button>\n      </div>\n\n      {/* Section 7: Modal Section */}\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n        <RowPopup \n            data={selectedRowData} \n            headers={headers}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)}\n            onSave={handleSave}  // Pass the handleSave function here\n        />\n      </Modal>\n\n      {/* Section 8: File Name Modal */}\n      <Modal isOpen={isFileNameModalOpen} onRequestClose={() => setIsFileNameModalOpen(false)}>\n        <div className=\"file-name-modal\">\n          <h2>Enter File Name</h2>\n          <input\n            type=\"text\"\n            value={fileName}\n            onChange={(e) => setFileName(e.target.value)}\n            placeholder=\"Enter file name without extension\"\n          />\n          <div className=\"file-name-modal-buttons\">\n            <button onClick={handleFileNameSubmit}>Submit</button>\n            <button onClick={() => setIsFileNameModalOpen(false)}>Cancel</button>\n          </div>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,SAAS,MAAM,4BAA4B;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,iBAAiB,QAAQ,eAAe;AACjD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnBJ,KAAK,CAACK,aAAa,CAAC,OAAO,CAAC;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC8B,cAAc,EAAEC,iBAAiB,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACkC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACoC,SAAS,EAAEC,YAAY,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;;EAE5D;EACAC,SAAS,CAAC,MAAM;IACdsB,iBAAiB,CAAEmB,YAAY,IAAK;MAClC,MAAMC,eAAe,GAAG,CAAC,CAAC;MAC1B3B,OAAO,CAAC4B,OAAO,CAAEC,MAAM,IAAK;QAC1B,MAAMC,SAAS,GAAG5B,cAAc,CAAC2B,MAAM,CAAC,IAAIA,MAAM;QAClD,IAAI,CAACzB,aAAa,CAAC2B,QAAQ,CAACD,SAAS,CAAC,EAAE;UACtCH,eAAe,CAACG,SAAS,CAAC,GAAGJ,YAAY,CAACG,MAAM,CAAC;QACnD;MACF,CAAC,CAAC;MACF,OAAOF,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACzB,cAAc,EAAEE,aAAa,EAAEJ,OAAO,EAAEM,cAAc,CAAC,CAAC;;EAE5D;EACArB,SAAS,CAAC,MAAM;IACd0B,kBAAkB,CAAEqB,WAAW,IAAK;MAClC,MAAMC,cAAc,GAAG;QAAE,GAAGD;MAAY,CAAC;MACzChC,OAAO,CAAC4B,OAAO,CAAEC,MAAM,IAAK;QAC1B,IAAI,CAACzB,aAAa,CAAC2B,QAAQ,CAACF,MAAM,CAAC,EAAE;UAAA,IAAAK,mBAAA;UACnC,MAAMC,UAAU,IAAAD,mBAAA,GAAG1B,WAAW,CAACqB,MAAM,CAAC,cAAAK,mBAAA,uBAAnBA,mBAAA,CAAqBE,WAAW,CAAC,CAAC;UACrD,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC1C,IAAI,CAAC2C,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACb,MAAM,CAAC,CAAC,CAAC,CAAC;UACrE,MAAMc,cAAc,GAAGN,SAAS,CAACO,MAAM,CACpCC,KAAK,IAAK,CAACV,UAAU,IAAIU,KAAK,CAACT,WAAW,CAAC,CAAC,CAACL,QAAQ,CAACI,UAAU,CACnE,CAAC;UACDF,cAAc,CAACJ,MAAM,CAAC,GAAGc,cAAc;QACzC;MACF,CAAC,CAAC;MACF,OAAOV,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACzB,WAAW,EAAEV,IAAI,EAAEE,OAAO,EAAEI,aAAa,CAAC,CAAC;;EAE/C;EACAnB,SAAS,CAAC,MAAM;IACd4B,eAAe,CAAC;MACdX,cAAc,EAAE;QAAE,GAAGA;MAAe,CAAC;MACrCE,aAAa,EAAE,CAAC,GAAGA,aAAa,CAAC;MAAE;MACnCE,cAAc,EAAE;QAAE,GAAGA;MAAe,CAAC;MACrCE,WAAW,EAAE;QAAE,GAAGA;MAAY;IAChC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACN,cAAc,EAAEE,aAAa,EAAEE,cAAc,EAAEE,WAAW,CAAC,CAAC;;EAEhE;EACA,MAAMsC,qBAAqB,GAAG5D,WAAW,CAAE6D,SAAS,IAAK;IACvD,IAAIC,MAAM,CAACC,IAAI,CAACnC,cAAc,CAAC,CAACoC,MAAM,KAAK,CAAC,EAAE;MAC5C,OAAOH,SAAS;IAClB;IAEA,MAAMI,MAAM,GAAG,CAAC,CAAC;IACjBJ,SAAS,CAACnB,OAAO,CAAEc,GAAG,IAAK;MACzB,MAAMU,QAAQ,GAAGJ,MAAM,CAACK,OAAO,CAACvC,cAAc,CAAC,CAC5C2B,GAAG,CAAC,CAAC,CAACa,MAAM,EAAEC,QAAQ,CAAC,KAAMA,QAAQ,GAAGb,GAAG,CAACY,MAAM,CAAC,GAAG,EAAG,CAAC,CAC1DE,IAAI,CAAC,GAAG,CAAC;MACZ,IAAI,CAACL,MAAM,CAACC,QAAQ,CAAC,EAAE;QACrBD,MAAM,CAACC,QAAQ,CAAC,GAAG,EAAE;MACvB;MACAD,MAAM,CAACC,QAAQ,CAAC,CAACK,IAAI,CAACf,GAAG,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACA,OAAOM,MAAM,CAACU,MAAM,CAACP,MAAM,CAAC,CAACQ,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACjD;MACA,MAAMC,YAAY,GAAGf,MAAM,CAACK,OAAO,CAACvC,cAAc,CAAC,CAACkD,IAAI,CAAC,CAAC,CAACV,MAAM,EAAEC,QAAQ,CAAC,KAAKA,QAAQ,CAAC;MAC1F,IAAIQ,YAAY,EAAE;QAChB,MAAM,CAACE,MAAM,CAAC,GAAGF,YAAY;QAC7B,MAAMG,MAAM,GAAGL,CAAC,CAACI,MAAM,CAAC;QACxB,MAAME,MAAM,GAAGL,CAAC,CAACG,MAAM,CAAC;QACxB,IAAI,CAAC7D,aAAa,CAAC2B,QAAQ,CAACkC,MAAM,CAAC,EAAE;UACnC,OAAOC,MAAM,CAACE,aAAa,CAACD,MAAM,CAAC;QACrC;MACF;MACA,OAAO,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrD,cAAc,EAAEV,aAAa,CAAC,CAAC;;EAEnC;EACA,MAAMiE,UAAU,GAAGnF,WAAW,CAAEoF,aAAa,IAAK;IAChDjD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAE;IACrB,MAAMkD,IAAI,GAAGD,aAAa,CAAC,CAAC,CAAC;IAC7B,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/B;IACA;IACA;;IAEA,MAAMC,cAAc,GAAGpD,WAAW,IAAIA,WAAW,CAAC4B,MAAM,GAAG,CAAC;IAC5D,MAAMyB,mBAAmB,GAAGnD,gBAAgB,IAAIA,gBAAgB,CAAC0B,MAAM,GAAG,CAAC;IAI3EsB,MAAM,CAACI,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAEvC,IAAIT,IAAI,CAACU,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC9B/F,IAAI,CAACgG,KAAK,CAACL,WAAW,EAAE;UACtBjD,MAAM,EAAE,IAAI;UACZuD,cAAc,EAAE,IAAI;UACpBC,QAAQ,EAAGL,MAAM,IAAK;YACpB,MAAMM,eAAe,GAAGtC,MAAM,CAACC,IAAI,CAAC+B,MAAM,CAAClF,IAAI,CAAC,CAAC,CAAC,CAAC;YAEnD,MAAMyF,aAAa,GAAGP,MAAM,CAAClF,IAAI,CAAC2C,GAAG,CAACC,GAAG,IAAI;cAC3C,IAAI8C,MAAM,GAAG;gBAAE,GAAG9C;cAAI,CAAC;;cAEvB;cACA,IAAIA,GAAG,CAAC+C,UAAU,EAAE;gBAClB,MAAMC,mBAAmB,GAAGlG,iBAAiB,CAACkD,GAAG,CAAC+C,UAAU,CAAC;gBAC7D,MAAME,kBAAkB,GAAG3C,MAAM,CAAC4C,WAAW,CAC3ClB,cAAc,GACZ1B,MAAM,CAACK,OAAO,CAACqC,mBAAmB,CAAC,CAAC9C,MAAM,CACxC,CAAC,CAACiD,GAAG,CAAC,KAAK,CAACvE,WAAW,CAACwE,IAAI,CAACC,UAAU,IAAIF,GAAG,CAACG,UAAU,CAACD,UAAU,CAAC,CACvE,CAAC,GACD/C,MAAM,CAACK,OAAO,CAACqC,mBAAmB,CACtC,CAAC;gBACDF,MAAM,GAAG;kBAAE,GAAGA,MAAM;kBAAE,GAAGG;gBAAmB,CAAC;cAC/C;;cAEA;cACA,IAAIjD,GAAG,CAACuD,IAAI,EAAE;gBACZ,MAAMC,aAAa,GAAG1G,iBAAiB,CAACkD,GAAG,CAACuD,IAAI,CAAC;gBACjDT,MAAM,GAAG;kBAAE,GAAGA,MAAM;kBAAE,GAAGU;gBAAc,CAAC;cAC1C;cAEA,OAAOV,MAAM;YACf,CAAC,CAAC;;YAEF;YACA,IAAIW,eAAe,GAAG,CAAC;YACvB,IAAIC,UAAU,GAAG,CAAC;YAClB,IAAIC,gBAAgB,GAAG,IAAI;YAC3B,IAAIC,WAAW,GAAG,IAAI;YAEtBf,aAAa,CAAC3D,OAAO,CAACc,GAAG,IAAI;cAC3B,IAAIA,GAAG,CAAC+C,UAAU,EAAE;gBAClB,MAAMC,mBAAmB,GAAGlG,iBAAiB,CAACkD,GAAG,CAAC+C,UAAU,CAAC;gBAC7D,MAAMc,SAAS,GAAGvD,MAAM,CAACC,IAAI,CAACyC,mBAAmB,CAAC,CAACxC,MAAM;gBACzD,MAAMsD,QAAQ,GAAGxD,MAAM,CAACC,IAAI,CAACyC,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBAEpD,IAAIa,SAAS,GAAGJ,eAAe,IAAI,CAAC7E,WAAW,CAACwE,IAAI,CAACC,UAAU,IAAIS,QAAQ,CAACR,UAAU,CAACD,UAAU,CAAC,CAAC,EAAE;kBACnGI,eAAe,GAAGI,SAAS;kBAC3BF,gBAAgB,GAAGX,mBAAmB;gBACxC;cACF;cAEA,IAAIhD,GAAG,CAACuD,IAAI,EAAE;gBACZ,MAAMC,aAAa,GAAG1G,iBAAiB,CAACkD,GAAG,CAACuD,IAAI,CAAC;gBACjD,MAAMM,SAAS,GAAGvD,MAAM,CAACC,IAAI,CAACiD,aAAa,CAAC,CAAChD,MAAM;gBACnD,IAAIqD,SAAS,GAAGH,UAAU,EAAE;kBAC1BA,UAAU,GAAGG,SAAS;kBACtBD,WAAW,GAAGJ,aAAa;gBAC7B;cACF;YACF,CAAC,CAAC;YAEF,IAAIO,UAAU,GAAG,CAAC,GAAGnB,eAAe,CAAC;YACrC,IAAIe,gBAAgB,EAAE;cACpBI,UAAU,GAAG,CAAC,GAAGA,UAAU,EAAE,GAAGzD,MAAM,CAACC,IAAI,CAACoD,gBAAgB,CAAC,CAAC;YAChE;YACA,IAAIC,WAAW,EAAE;cACfG,UAAU,GAAG,CAAC,GAAGA,UAAU,EAAE,GAAGzD,MAAM,CAACC,IAAI,CAACqD,WAAW,CAAC,CAAC;YAC3D;;YAEA;YACA,MAAMI,YAAY,GAAGD,UAAU,CAACE,MAAM,CAAC,CAACC,GAAG,EAAE/E,MAAM,KAAK;cACtD,MAAMgF,QAAQ,GAAGtB,aAAa,CAACuB,KAAK,CAACpE,GAAG,IACtCA,GAAG,CAACb,MAAM,CAAC,IAAI,IAAI,IAClB,OAAOa,GAAG,CAACb,MAAM,CAAC,KAAK,QAAQ,IAAIa,GAAG,CAACb,MAAM,CAAC,CAACkF,IAAI,CAAC,CAAC,KAAK,EAAG,IAC7DzE,KAAK,CAAC0E,OAAO,CAACtE,GAAG,CAACb,MAAM,CAAC,CAAC,IAAIa,GAAG,CAACb,MAAM,CAAC,CAACqB,MAAM,KAAK,CACxD,CAAC;cACD,IAAI2D,QAAQ,EAAE;gBACZD,GAAG,CAACnD,IAAI,CAAC5B,MAAM,CAAC;cAClB;cACA,OAAO+E,GAAG;YACZ,CAAC,EAAE,EAAE,CAAC;YAGN3G,UAAU,CAACwG,UAAU,CAAC;YACtB1G,OAAO,CAACwF,aAAa,CAAC;YACtBpF,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACrBE,gBAAgB,CAAC,CAAC,GAAG,IAAImC,GAAG,CAAC,CAAC,GAAGkE,YAAY,EAAE,GAAGlF,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACtEjB,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACrBE,cAAc,CAAC,CAAC,CAAC,CAAC;YAClBE,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACtBI,iBAAiB,CAAC,CAAC,CAAC,CAAC;UACvB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIwD,IAAI,CAACU,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACtC,MAAM+B,QAAQ,GAAGC,IAAI,CAAC/B,KAAK,CAACL,WAAW,CAAC;QAExC,IAAIxC,KAAK,CAAC0E,OAAO,CAACC,QAAQ,CAAC,IAAIA,QAAQ,CAAC/D,MAAM,GAAG,CAAC,IAAI,OAAO+D,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;UACrFhH,UAAU,CAAC+C,MAAM,CAACC,IAAI,CAACgE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC;QAEAlH,OAAO,CAACkH,QAAQ,CAAC;QACjB9G,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACrBE,gBAAgB,CAAC,EAAE,CAAC;QACpBE,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACrBE,cAAc,CAAC,CAAC,CAAC,CAAC;QAClBE,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACtBI,iBAAiB,CAAC,CAAC,CAAC,CAAC;MACvB,CAAC,MAAM;QACLoG,KAAK,CAAC,iEAAiE,CAAC;MAC1E;MACA9F,YAAY,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB,CAAC;;IAEDmD,MAAM,CAAC4C,UAAU,CAAC7C,IAAI,CAAC;EAEzB,CAAC,EAAE,CAACjD,WAAW,EAAEE,gBAAgB,CAAC,CAAC;EAEnC,MAAM;IAAE6F,YAAY;IAAEC;EAAc,CAAC,GAAGjI,WAAW,CAAC;IAClDkI,MAAM,EAAElD,UAAU;IAClBmD,MAAM,EAAE,aAAa;IAAE;IACvBC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAG,SAAS;EAC/B,MAAMC,cAAc,GAAG,CAAC,GAAG3H,OAAO,CAAC4H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEF,aAAa,EAAE,GAAG1H,OAAO,CAAC4H,KAAK,CAAC,CAAC,CAAC,CAAC;EAEnF,MAAMC,OAAO,GAAGF,cAAc,CAAClF,GAAG,CAAEZ,MAAM,KAAM;IAC9CoD,IAAI,EAAE/E,cAAc,CAAC2B,MAAM,CAAC,IAAIA,MAAM;IACtCiG,QAAQ,EAAEjG,MAAM;IAChBkG,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAGvF,GAAG,IAAK;MACf,MAAMG,KAAK,GAAGH,GAAG,IAAIA,GAAG,CAACb,MAAM,CAAC,CAAC,CAAC;MAClC,OAAOgB,KAAK;IACd,CAAC;IACDqF,IAAI,EAAErG,MAAM,KAAK6F,aAAa,IAAItH,aAAa,CAAC2B,QAAQ,CAACF,MAAM,CAAC;IAChEsG,IAAI,EAAE;EACR,CAAC,CAAC,CAAC;EAEH,MAAMC,cAAc,GAAI1F,GAAG,IAAK;IAC9BzB,kBAAkB,CAACyB,GAAG,CAAC;IACvBvB,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMkH,kBAAkB,GAAGA,CAACxD,KAAK,EAAEvB,MAAM,KAAK;IAC5C,MAAMgF,SAAS,GAAGzD,KAAK,CAACE,MAAM,CAACwD,OAAO;IACtClI,gBAAgB,CAAEmI,iBAAiB,IAAK;MACtC,IAAIF,SAAS,EAAE;QACb;QACA,OAAOE,iBAAiB,CAAC5F,MAAM,CAAE6F,YAAY,IAAKA,YAAY,KAAKnF,MAAM,CAAC;MAC5E,CAAC,MAAM;QACL;QACA,OAAO,CAAC,GAAGkF,iBAAiB,EAAElF,MAAM,CAAC;MACvC;IACF,CAAC,CAAC;IACFnD,iBAAiB,CAAEuI,kBAAkB,IAAK;MACxC,MAAMf,cAAc,GAAG;QAAE,GAAGe;MAAmB,CAAC;MAChD,IAAI,CAACJ,SAAS,EAAE;QACd,OAAOX,cAAc,CAACrE,MAAM,CAAC;MAC/B;MACA,OAAOqE,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMgB,mBAAmB,GAAGA,CAAC9D,KAAK,EAAEvB,MAAM,KAAK;IAC7C,MAAMgF,SAAS,GAAGzD,KAAK,CAACE,MAAM,CAACwD,OAAO;IACtCxH,iBAAiB,CAAE6H,kBAAkB,KAAM;MACzC,GAAGA,kBAAkB;MACrB,CAACtF,MAAM,GAAGgF;IACZ,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxB1I,iBAAiB,CAACS,YAAY,CAACV,cAAc,CAAC;IAC9CG,gBAAgB,CAACO,YAAY,CAACR,aAAa,CAAC;IAC5CG,iBAAiB,CAACK,YAAY,CAACN,cAAc,CAAC;IAC9CG,cAAc,CAACG,YAAY,CAACJ,WAAW,CAAC;IACxCO,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAM,CAAC+H,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG/J,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACgK,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjK,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACkK,QAAQ,EAAEC,WAAW,CAAC,GAAGnK,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMoK,cAAc,GAAInB,MAAM,IAAK;IACjCgB,qBAAqB,CAAChB,MAAM,CAAC;IAC7Bc,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;EAED,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;IACjCN,sBAAsB,CAAC,KAAK,CAAC;IAC7B,IAAIG,QAAQ,CAACnC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1BuC,cAAc,CAACN,kBAAkB,EAAEE,QAAQ,CAAC;IAC9C;EACF,CAAC;EAED,MAAMI,cAAc,GAAGA,CAACrB,MAAM,EAAEiB,QAAQ,KAAK;IAC3C,MAAMK,WAAW,GAAGzG,qBAAqB,CAAChD,IAAI,CAAC,CAAC2C,GAAG,CAAEC,GAAG,IACtD1C,OAAO,CAAC2G,MAAM,CAAC,CAACC,GAAG,EAAE/E,MAAM,KAAK;MAC9B,IAAI,CAACzB,aAAa,CAAC2B,QAAQ,CAACF,MAAM,CAAC,EAAE;QACnC,MAAMC,SAAS,GAAG5B,cAAc,CAAC2B,MAAM,CAAC,IAAIA,MAAM;QAClD+E,GAAG,CAAC9E,SAAS,CAAC,GAAGY,GAAG,CAACb,MAAM,CAAC;MAC9B;MACA,OAAO+E,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CACP,CAAC;IAED,IAAI4C,YAAY,EAAEC,aAAa;IAC/B,IAAIxB,MAAM,KAAK,KAAK,EAAE;MACpBuB,YAAY,GAAGrK,IAAI,CAACuK,OAAO,CAACH,WAAW,EAAE;QAAE1H,MAAM,EAAE;MAAK,CAAC,CAAC;MAC1D4H,aAAa,GAAG,KAAK;IACvB,CAAC,MAAM,IAAIxB,MAAM,KAAK,MAAM,EAAE;MAC5BuB,YAAY,GAAGtC,IAAI,CAACyC,SAAS,CAACJ,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;MACnDE,aAAa,GAAG,MAAM;IACxB;IAEA,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,YAAY,CAAC,EAAE;MAAEM,IAAI,EAAG,QAAOL,aAAc;IAAiB,CAAC,CAAC;IACvF,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxC,IAAIF,IAAI,CAACG,QAAQ,KAAKC,SAAS,EAAE;MAC/B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACV,IAAI,CAAC;MACrCG,IAAI,CAACQ,YAAY,CAAC,MAAM,EAAEH,GAAG,CAAC;MAC9BL,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAG,GAAErB,QAAS,IAAGO,aAAc,EAAC,CAAC;MAC7DM,IAAI,CAACS,KAAK,CAACC,UAAU,GAAG,QAAQ;MAChCT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,IAAI,CAAC;MAC/BA,IAAI,CAACa,KAAK,CAAC,CAAC;MACZZ,QAAQ,CAACU,IAAI,CAACG,WAAW,CAACd,IAAI,CAAC;IACjC;EACF,CAAC;EAED,MAAMe,YAAY,GAAG5L,WAAW,CAAC,MAAM;IACrC,OAAOY,IAAI,CAAC8C,MAAM,CAACF,GAAG,IAAI;MACxB,KAAK,MAAMb,MAAM,IAAI7B,OAAO,EAAE;QAC5B;QACA,IAAIQ,WAAW,CAACqB,MAAM,CAAC,IAAI,CAACkJ,MAAM,CAACrI,GAAG,CAACb,MAAM,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC,CAACL,QAAQ,CAACvB,WAAW,CAACqB,MAAM,CAAC,CAACO,WAAW,CAAC,CAAC,CAAC,EAAE;UACzG,OAAO,KAAK;QACd;QACA;QACA,IAAI9B,cAAc,CAACuB,MAAM,CAAC,IAAIa,GAAG,CAACb,MAAM,CAAC,KAAKvB,cAAc,CAACuB,MAAM,CAAC,EAAE;UACpE,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/B,IAAI,EAAEE,OAAO,EAAEQ,WAAW,EAAEF,cAAc,CAAC,CAAC;EAEhD,MAAM0K,UAAU,GAAIC,aAAa,IAAK;IACpC,MAAMC,WAAW,GAAGpL,IAAI,CAAC2C,GAAG,CAAEC,GAAG,IAAK;MACpC,IAAIA,GAAG,CAACyI,EAAE,KAAKF,aAAa,CAACE,EAAE,EAAE;QAAG;QAClC,OAAOF,aAAa;MACtB;MACA,OAAOvI,GAAG;IACZ,CAAC,CAAC;IACF3C,OAAO,CAACmL,WAAW,CAAC;EACtB,CAAC;EAED,MAAME,kBAAkB,GAAGlM,WAAW,CAAEoF,aAAa,IAAK;IACxD,MAAMC,IAAI,GAAGD,aAAa,CAAC,CAAC,CAAC;IAC7B,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACI,MAAM,GAAIC,KAAK,IAAK;MACzB,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAEvC,IAAI;QACF,MAAMqG,MAAM,GAAGnE,IAAI,CAAC/B,KAAK,CAACL,WAAW,CAAC;QAEtC,IAAIuG,MAAM,CAAC/J,WAAW,IAAIgB,KAAK,CAAC0E,OAAO,CAACqE,MAAM,CAAC/J,WAAW,CAAC,EAAE;UAC3DC,cAAc,CAAC8J,MAAM,CAAC/J,WAAW,CAAC;QACpC;QACA,IAAI+J,MAAM,CAAC7J,gBAAgB,IAAIc,KAAK,CAAC0E,OAAO,CAACqE,MAAM,CAAC7J,gBAAgB,CAAC,EAAE;UACrEC,mBAAmB,CAAC4J,MAAM,CAAC7J,gBAAgB,CAAC;QAC9C;MAEF,CAAC,CAAC,OAAO8J,KAAK,EAAE;QACdnE,KAAK,CAAC,8DAA8D,CAAC;MACvE;IACF,CAAC;IAED3C,MAAM,CAAC4C,UAAU,CAAC7C,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAGN,MAAM;IAAE8C,YAAY,EAAEkE,kBAAkB;IAAEjE,aAAa,EAAEkE;EAAoB,CAAC,GAAGnM,WAAW,CAAC;IAC3FkI,MAAM,EAAE6D,kBAAkB;IAC1B5D,MAAM,EAAE,OAAO;IAAE;IACjBC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMgE,gBAAgB,GAAI5F,GAAG,IAAK;IAChC;EAAA,CACD;;EAED;EACA,MAAM6F,qBAAqB,GAAIpI,MAAM,IAAK;IACxC;EAAA,CACD;EAED,MAAMqI,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,cAAc,GAAG,CAAC,GAAGxK,WAAW,CAAC;IACvCwK,cAAc,CAACF,KAAK,CAAC,GAAGC,QAAQ;IAChCtK,cAAc,CAACuK,cAAc,CAAC;EAChC,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAACH,KAAK,EAAEC,QAAQ,KAAK;IACjD,MAAMG,mBAAmB,GAAG,CAAC,GAAGxK,gBAAgB,CAAC;IACjDwK,mBAAmB,CAACJ,KAAK,CAAC,GAAGC,QAAQ;IACrCpK,mBAAmB,CAACuK,mBAAmB,CAAC;EAC1C,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B1K,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAE,EAAE,CAAC,CAAC;EACtC,CAAC;EAED,MAAM4K,gBAAgB,GAAIN,KAAK,IAAK;IAClC,MAAME,cAAc,GAAG,CAAC,GAAGxK,WAAW,CAAC;IACvCwK,cAAc,CAACK,MAAM,CAACP,KAAK,EAAE,CAAC,CAAC;IAC/BrK,cAAc,CAACuK,cAAc,CAAC;EAChC,CAAC;EAED,MAAMM,qBAAqB,GAAGA,CAAA,KAAM;IAClC3K,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAE,EAAE,CAAC,CAAC;EAChD,CAAC;EAED,MAAM6K,qBAAqB,GAAIT,KAAK,IAAK;IACvC,MAAMI,mBAAmB,GAAG,CAAC,GAAGxK,gBAAgB,CAAC;IACjDwK,mBAAmB,CAACG,MAAM,CAACP,KAAK,EAAE,CAAC,CAAC;IACpCnK,mBAAmB,CAACuK,mBAAmB,CAAC;EAC1C,CAAC;EAED,MAAMM,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMjB,MAAM,GAAG;MACb/J,WAAW;MACXE;IACF,CAAC;IAED,MAAMgI,YAAY,GAAGtC,IAAI,CAACyC,SAAS,CAAC0B,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACpD,MAAMzB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,YAAY,CAAC,EAAE;MAAEM,IAAI,EAAE;IAA2B,CAAC,CAAC;IAC3E,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IAExC,IAAIF,IAAI,CAACG,QAAQ,KAAKC,SAAS,EAAE;MAC/B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACV,IAAI,CAAC;MACrCG,IAAI,CAACQ,YAAY,CAAC,MAAM,EAAEH,GAAG,CAAC;MAC9BL,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAE,aAAa,CAAC;MAC5CR,IAAI,CAACS,KAAK,CAACC,UAAU,GAAG,QAAQ;MAChCT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,IAAI,CAAC;MAC/BA,IAAI,CAACa,KAAK,CAAC,CAAC;MACZZ,QAAQ,CAACU,IAAI,CAACG,WAAW,CAACd,IAAI,CAAC;IACjC;EACF,CAAC;EAGD,oBACErK,OAAA;IAAK6M,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAElB9M,OAAA;MAAK6M,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACrB9M,OAAA;QAAA8M,QAAA,EAAI;MAAiB;QAAAtD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eAGNjN,OAAA;MAAK6M,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB9M,OAAA;QAAA8M,QAAA,EAAI;MAAgB;QAAAtD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBjN,OAAA;QAAA,GAAS6L,kBAAkB,CAAC,CAAC;QAAEgB,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACjD9M,OAAA;UAAA,GAAW8L,mBAAmB,CAAC;QAAC;UAAAtC,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACpCjN,OAAA;UAAA8M,QAAA,EAAG;QAAgE;UAAAtD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjN,OAAA;MAAK6M,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAExB9M,OAAA;QAAO8K,KAAK,EAAE;UAAEoC,KAAK,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAAL,QAAA,gBACjD9M,OAAA;UAAA8M,QAAA,eACE9M,OAAA;YAAA8M,QAAA,gBACE9M,OAAA;cAAI8K,KAAK,EAAE;gBAAEoC,KAAK,EAAE;cAAK,CAAE;cAAAJ,QAAA,EAAC;YAAC;cAAAtD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClCjN,OAAA;cAAA8M,QAAA,EAAI;YAAqB;cAAAtD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAzD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B;QAAC;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRjN,OAAA;UAAA8M,QAAA,GACGlL,WAAW,CAACmB,GAAG,CAAC,CAACoD,GAAG,EAAE+F,KAAK,kBAC1BlM,OAAA;YAAA8M,QAAA,gBACE9M,OAAA;cAAA8M,QAAA,eAAI9M,OAAA;gBAAOoK,IAAI,EAAC,UAAU;gBAACgD,QAAQ,EAAEA,CAAA,KAAMrB,gBAAgB,CAAC5F,GAAG;cAAE;gBAAAqD,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAzD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzEjN,OAAA;cAAA8M,QAAA,eAAI9M,OAAA;gBAAOoK,IAAI,EAAC,MAAM;gBAACjH,KAAK,EAAEgD,GAAI;gBAACiH,QAAQ,EAAGC,CAAC,IAAKpB,gBAAgB,CAACC,KAAK,EAAEmB,CAAC,CAAChI,MAAM,CAAClC,KAAK;cAAE;gBAAAqG,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAzD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpGjN,OAAA;cAAA8M,QAAA,eAAI9M,OAAA;gBAAQsN,OAAO,EAAEA,CAAA,KAAMd,gBAAgB,CAACN,KAAK,CAAE;gBAAAY,QAAA,EAAC;cAAM;gBAAAtD,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAzD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,KAAC;UAAA,GAHlEf,KAAK;YAAA1C,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIV,CACL,CAAC,eACFjN,OAAA;YAAA8M,QAAA,eAAI9M,OAAA;cAAQsN,OAAO,EAAEf,gBAAiB;cAAAO,QAAA,EAAC;YAAO;cAAAtD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAzD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGRjN,OAAA;QAAO8K,KAAK,EAAE;UAAEoC,KAAK,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAAL,QAAA,gBACjD9M,OAAA;UAAA8M,QAAA,eACE9M,OAAA;YAAA8M,QAAA,gBACE9M,OAAA;cAAI8K,KAAK,EAAE;gBAAEoC,KAAK,EAAE;cAAK,CAAE;cAAAJ,QAAA,EAAC;YAAC;cAAAtD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClCjN,OAAA;cAAA8M,QAAA,EAAI;YAAY;cAAAtD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAzD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB;QAAC;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRjN,OAAA;UAAA8M,QAAA,GACGhL,gBAAgB,CAACiB,GAAG,CAAC,CAACa,MAAM,EAAEsI,KAAK,kBAClClM,OAAA;YAAA8M,QAAA,gBACE9M,OAAA;cAAA8M,QAAA,eAAI9M,OAAA;gBAAOoK,IAAI,EAAC,UAAU;gBAACgD,QAAQ,EAAEA,CAAA,KAAMpB,qBAAqB,CAACpI,MAAM;cAAE;gBAAA4F,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAzD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjFjN,OAAA;cAAA8M,QAAA,eAAI9M,OAAA;gBAAOoK,IAAI,EAAC,MAAM;gBAACjH,KAAK,EAAES,MAAO;gBAACwJ,QAAQ,EAAGC,CAAC,IAAKhB,qBAAqB,CAACH,KAAK,EAAEmB,CAAC,CAAChI,MAAM,CAAClC,KAAK;cAAE;gBAAAqG,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAzD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5GjN,OAAA;cAAA8M,QAAA,eAAI9M,OAAA;gBAAQsN,OAAO,EAAEA,CAAA,KAAMX,qBAAqB,CAACT,KAAK,CAAE;gBAAAY,QAAA,EAAC;cAAM;gBAAAtD,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAzD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA,GAHtEf,KAAK;YAAA1C,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIV,CACL,CAAC,eACFjN,OAAA;YAAA8M,QAAA,eAAI9M,OAAA;cAAQsN,OAAO,EAAEZ,qBAAsB;cAAAI,QAAA,EAAC;YAAO;cAAAtD,QAAA,EAAAuD,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAzD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC;MAAA;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACRjN,OAAA;QAAQsN,OAAO,EAAEV,gBAAiB;QAAAE,QAAA,EAAC;MAAW;QAAAtD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eAGNjN,OAAA;MAAK6M,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACrB9M,OAAA;QAAK6M,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B9M,OAAA;UAAA8M,QAAA,EAAI;QAA8B;UAAAtD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvCjN,OAAA;UAAA,GAAS2H,YAAY,CAAC,CAAC;UAAEkF,SAAS,EAAC,UAAU;UAAAC,QAAA,gBAC3C9M,OAAA;YAAA,GAAW4H,aAAa,CAAC;UAAC;YAAA4B,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC9BjN,OAAA;YAAA8M,QAAA,EAAG;UAAgE;YAAAtD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpE,CAAC;MAAA;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELvL,SAAS,iBAAI1B,OAAA;MAAK6M,SAAS,EAAC;IAAS;MAAArD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAG5CjN,OAAA;MAAK6M,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACtB9M,OAAA;QAAK6M,SAAS,EAAC,wBAAwB;QAAAC,QAAA,eACrC9M,OAAA;UAAO6M,SAAS,EAAC,sBAAsB;UAAAC,QAAA,eAErC9M,OAAA;YAAA8M,QAAA,EACGlK,KAAK,CAAC0E,OAAO,CAAChH,OAAO,CAAC,IAAIA,OAAO,CAACyC,GAAG,CAAEZ,MAAM,IAAK;cACjD,MAAMoL,oBAAoB,GAAG,CAAC/M,cAAc,CAAC2B,MAAM,CAAC,IAAIA,MAAM,EAAEqL,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;cACjF,oBACExN,OAAA;gBAAA8M,QAAA,gBACE9M,OAAA;kBAAA8M,QAAA,eACE9M,OAAA;oBACEoK,IAAI,EAAC,UAAU;oBACfvB,OAAO,EAAE,CAACnI,aAAa,CAAC2B,QAAQ,CAACF,MAAM,CAAE;oBACzCiL,QAAQ,EAAGC,CAAC,IAAK1E,kBAAkB,CAAC0E,CAAC,EAAElL,MAAM;kBAAE;oBAAAqH,QAAA,EAAAuD,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChD;gBAAC;kBAAAzD,QAAA,EAAAuD,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA,CAAC,eACLjN,OAAA;kBAAI6M,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,eAC7B9M,OAAA;oBACEoK,IAAI,EAAC,MAAM;oBACXyC,SAAS,EAAC,cAAc;oBACxB1J,KAAK,EAAEoK,oBAAqB;oBAC5BH,QAAQ,EAAGC,CAAC,IACV5M,iBAAiB,CAAEuI,kBAAkB,KAAM;sBACzC,GAAGA,kBAAkB;sBACrB,CAAC7G,MAAM,GAAGkL,CAAC,CAAChI,MAAM,CAAClC;oBACrB,CAAC,CAAC,CACH;oBACDsK,SAAS,EAAE;kBAAI;oBAAAjE,QAAA,EAAAuD,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChB;gBAAC;kBAAAzD,QAAA,EAAAuD,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA,CAAC,eACLjN,OAAA;kBAAI6M,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,eAC5B9M,OAAA;oBAAA8M,QAAA,GAAO,WAEL,eAAA9M,OAAA;sBACEoK,IAAI,EAAC,UAAU;sBACfvB,OAAO,EAAEzH,cAAc,CAACe,MAAM,CAAE;sBAChCiL,QAAQ,EAAGC,CAAC,IAAKpE,mBAAmB,CAACoE,CAAC,EAAElL,MAAM;oBAAE;sBAAAqH,QAAA,EAAAuD,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACjD,CAAC;kBAAA;oBAAAzD,QAAA,EAAAuD,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACG;gBAAC;kBAAAzD,QAAA,EAAAuD,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACN,CAAC;cAAA,GA/BE9K,MAAM;gBAAAqH,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAgCX,CAAC;YAET,CAAC;UAAC;YAAAzD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjN,OAAA;MAAK6M,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACrB9M,OAAA;QAAK6M,SAAS,EAAC,wBAAwB;QAAAC,QAAA,eACrC9M,OAAA;UAAO6M,SAAS,EAAC,cAAc;UAAAC,QAAA,eAC7B9M,OAAA;YAAA8M,QAAA,EACGxM,OAAO,CAACyC,GAAG,CAAEZ,MAAM;cAAA,IAAAuL,qBAAA;cAAA,oBAClB1N,OAAA,CAACX,KAAK,CAACsO,QAAQ;gBAAAb,QAAA,EACZ,CAACpM,aAAa,CAAC2B,QAAQ,CAACF,MAAM,CAAC,iBAC9BnC,OAAA;kBAAA8M,QAAA,gBACE9M,OAAA;oBAAA8M,QAAA,eACE9M,OAAA;sBAAA8M,QAAA,GAAOtM,cAAc,CAAC2B,MAAM,CAAC,IAAIA,MAAM,EAAC,GAAC;oBAAA;sBAAAqH,QAAA,EAAAuD,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM;kBAAC;oBAAAzD,QAAA,EAAAuD,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC9C,CAAC,eACLjN,OAAA;oBAAI6M,SAAS,EAAC,iBAAiB;oBAAAC,QAAA,eAC7B9M,OAAA;sBACEoK,IAAI,EAAC,MAAM;sBACXwD,WAAW,EAAG,UAASpN,cAAc,CAAC2B,MAAM,CAAC,IAAIA,MAAO,EAAE;sBAC1DgB,KAAK,EAAErC,WAAW,CAACqB,MAAM,CAAC,IAAI,EAAG;sBACjCiL,QAAQ,EAAGC,CAAC,IAAK;wBACftM,cAAc,CAAE8M,eAAe,KAAM;0BACnC,GAAGA,eAAe;0BAClB,CAAC1L,MAAM,GAAGkL,CAAC,CAAChI,MAAM,CAAClC;wBACrB,CAAC,CAAC,CAAC;sBACL,CAAE;sBACFsK,SAAS,EAAE,GAAI;sBACf3C,KAAK,EAAE;wBAAEoC,KAAK,EAAE;sBAAM;oBAAE;sBAAA1D,QAAA,EAAAuD,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACzB;kBAAC;oBAAAzD,QAAA,EAAAuD,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC,eACLjN,OAAA;oBAAA8M,QAAA,eACE9M,OAAA;sBACEmD,KAAK,EAAEvC,cAAc,CAACuB,MAAM,CAAC,IAAI,EAAG;sBACpCiL,QAAQ,EAAGC,CAAC,IAAK;wBACfxM,iBAAiB,CAAEiN,kBAAkB,KAAM;0BACzC,GAAGA,kBAAkB;0BACrB,CAAC3L,MAAM,GAAGkL,CAAC,CAAChI,MAAM,CAAClC;wBACrB,CAAC,CAAC,CAAC;sBACL,CAAE;sBAAA2J,QAAA,gBAEF9M,OAAA;wBAAQmD,KAAK,EAAC,EAAE;wBAAA2J,QAAA,EAAC;sBAAG;wBAAAtD,QAAA,EAAAuD,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAQ,CAAC,GAAAS,qBAAA,GAC5B1M,eAAe,CAACmB,MAAM,CAAC,cAAAuL,qBAAA,uBAAvBA,qBAAA,CAAyB3K,GAAG,CAAEgL,MAAM,IAAK;wBACtC,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI,CAAC,CAAE;wBAC3B,MAAMC,eAAe,GAAGD,MAAM,CAACvK,MAAM,GAAG,GAAG,GAAGuK,MAAM,CAACP,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAGO,MAAM;wBACvF,oBACI/N,OAAA;0BAAqBmD,KAAK,EAAE4K,MAAO;0BAAAjB,QAAA,EAC9BkB;wBAAe,GADPD,MAAM;0BAAAvE,QAAA,EAAAuD,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAEX,CAAC;sBAEjB,CAAC,CAAC;oBAAA;sBAAAzD,QAAA,EAAAuD,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAEI;kBAAC;oBAAAzD,QAAA,EAAAuD,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACP,CAAC;gBAAA;kBAAAzD,QAAA,EAAAuD,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH;cACL,GA7CkB9K,MAAM;gBAAAqH,QAAA,EAAAuD,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OA8CX,CAAC;YAAA,CAClB;UAAC;YAAAzD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG;QAAC;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNjN,OAAA;MAAK6M,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5B9M,OAAA,CAACN,SAAS;QACRuO,KAAK,EAAC,eAAe;QACrB9F,OAAO,EAAEA,OAAQ;QACjB/H,IAAI,EAAEgD,qBAAqB,CAACgI,YAAY,CAAC,CAAC,CAAE;QAC5C8C,UAAU;QACVC,gBAAgB;QAChBC,cAAc;QACdC,YAAY,EAAE3F;MAAe;QAAAc,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGNjN,OAAA;MAAK6M,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB9M,OAAA;QAAQsN,OAAO,EAAEnE,WAAY;QAAA2D,QAAA,EAAC;MAAK;QAAAtD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5CjN,OAAA;QAAQsN,OAAO,EAAEA,CAAA,KAAM5D,cAAc,CAAC,KAAK,CAAE;QAAAoD,QAAA,EAAC;MAAe;QAAAtD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtEjN,OAAA;QAAQsN,OAAO,EAAEA,CAAA,KAAM5D,cAAc,CAAC,MAAM,CAAE;QAAAoD,QAAA,EAAC;MAAgB;QAAAtD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,eAGNjN,OAAA,CAACJ,KAAK;MAAC0O,MAAM,EAAE9M,WAAY;MAAC+M,cAAc,EAAEA,CAAA,KAAM9M,cAAc,CAAC,KAAK,CAAE;MAAAqL,QAAA,eACtE9M,OAAA,CAACH,QAAQ;QACLO,IAAI,EAAEkB,eAAgB;QACtBhB,OAAO,EAAEA,OAAQ;QACjBE,cAAc,EAAEA,cAAe;QAC/BE,aAAa,EAAEA,aAAc;QAC7B8N,OAAO,EAAEA,CAAA,KAAM/M,cAAc,CAAC,KAAK,CAAE;QACrCgN,MAAM,EAAEnD,UAAW,CAAE;MAAA;QAAA9B,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAGRjN,OAAA,CAACJ,KAAK;MAAC0O,MAAM,EAAElF,mBAAoB;MAACmF,cAAc,EAAEA,CAAA,KAAMlF,sBAAsB,CAAC,KAAK,CAAE;MAAAyD,QAAA,eACtF9M,OAAA;QAAK6M,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B9M,OAAA;UAAA8M,QAAA,EAAI;QAAe;UAAAtD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxBjN,OAAA;UACEoK,IAAI,EAAC,MAAM;UACXjH,KAAK,EAAEqG,QAAS;UAChB4D,QAAQ,EAAGC,CAAC,IAAK5D,WAAW,CAAC4D,CAAC,CAAChI,MAAM,CAAClC,KAAK,CAAE;UAC7CyK,WAAW,EAAC;QAAmC;UAAApE,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,eACFjN,OAAA;UAAK6M,SAAS,EAAC,yBAAyB;UAAAC,QAAA,gBACtC9M,OAAA;YAAQsN,OAAO,EAAE3D,oBAAqB;YAAAmD,QAAA,EAAC;UAAM;YAAAtD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtDjN,OAAA;YAAQsN,OAAO,EAAEA,CAAA,KAAMjE,sBAAsB,CAAC,KAAK,CAAE;YAAAyD,QAAA,EAAC;UAAM;YAAAtD,QAAA,EAAAuD,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAzD,QAAA,EAAAuD,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClE,CAAC;MAAA;QAAAzD,QAAA,EAAAuD,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAzD,QAAA,EAAAuD,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAzD,QAAA,EAAAuD,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEV,CAAC;AAAC9M,EAAA,CArrBID,GAAG;EAAA,QAiOiCP,WAAW,EAqK8BA,WAAW;AAAA;AAAA+O,EAAA,GAtYxFxO,GAAG;AAurBT,eAAeA,GAAG;AAAC,IAAAwO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}