{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  useEffect(() => {\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false\n  });\n  const handleColumnToggle = (event, header) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== header);\n      } else {\n        return [...prevHiddenColumns, header];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[header];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, header) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [header]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n  const convertJSONToCSV = jsonData => {\n    if (!jsonData || jsonData.length === 0) {\n      return \"\";\n    }\n    const headers = Object.keys(jsonData[0]);\n    let csvContent = headers.join(\",\") + \"\\n\";\n    jsonData.forEach(row => {\n      const values = headers.map(header => {\n        const value = row[header];\n        return typeof value === \"string\" ? `\"${value}\"` : value;\n      });\n      csvContent += values.join(\",\") + \"\\n\";\n    });\n    return csvContent;\n  };\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = convertJSONToCSV(visibleData);\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const updatedHeaders = [...headers.slice(0, 1), \"groupby\", ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === \"groupby\" || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV | JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100)\n                        }));\n                      },\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 373,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 375,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 372,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\",\n                textOverflow: \"ellipsis\",\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\"\n              }\n            },\n            rows: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\"\n              }\n            },\n            table: {\n              style: {\n                minWidth: \"100%\"\n              }\n            },\n            pagination: {\n              style: {\n                marginTop: \"16px\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(RowPopup, {\n        data: selectedRowData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Enter File Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: fileName,\n        onChange: e => setFileName(e.target.value),\n        maxLength: 100,\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileNameSubmit,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section7\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7zhfsAeocTJ4yzoicH9uy8Bi1q8=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","filteredData","every","criteria","groupedAndSortedData","groupAndSortTableData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","meta","fields","jsonData","JSON","Object","keys","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","updatedHeaders","handleGroupByToggle","prevGroupByColumns","tableData","length","groups","groupKey","entries","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","convertJSONToCSV","csvContent","handleReset","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","format","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","dataToExport","fileExtension","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","handleRowClick","slice","columns","selector","sortable","wrap","substring","omit","grow","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","rows","table","minWidth","marginTop","isOpen","onRequestClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n\n  useEffect(() => {\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n  \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n  \n    reader.readAsText(file);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false,\n  });\n\n  const handleColumnToggle = (event, header) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== header);\n      } else {\n        return [...prevHiddenColumns, header];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[header];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, header) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [header]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  const convertJSONToCSV = (jsonData) => {\n    if (!jsonData || jsonData.length === 0) {\n      return \"\";\n    }\n\n    const headers = Object.keys(jsonData[0]);\n    let csvContent = headers.join(\",\") + \"\\n\";\n\n    jsonData.forEach((row) => {\n      const values = headers.map((header) => {\n        const value = row[header];\n        return typeof value === \"string\" ? `\"${value}\"` : value;\n      });\n      csvContent += values.join(\",\") + \"\\n\";\n    });\n\n    return csvContent;\n  };\n\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = convertJSONToCSV(visibleData);\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const updatedHeaders = [...headers.slice(0, 1), \"groupby\", ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === \"groupby\" || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  return (\n    <div className=\"App\">\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV | JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }}\n                    />\n                  </td>\n                  <td>\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100),\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95}\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      <div className=\"section section5\">\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData}\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                  textOverflow: \"ellipsis\",\n                  overflow: \"hidden\",\n                  whiteSpace: \"nowrap\",\n                },\n              },\n              rows: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                },\n              },\n              table: {\n                style: {\n                  minWidth: \"100%\",\n                },\n              },\n              pagination: {\n                style: {\n                  marginTop: \"16px\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n        <RowPopup data={selectedRowData} />\n      </Modal>\n\n      <Modal isOpen={isFileNameModalOpen} onRequestClose={() => setIsFileNameModalOpen(false)}>\n        <h3>Enter File Name:</h3>\n        <input\n          type=\"text\"\n          value={fileName}\n          onChange={(e) => setFileName(e.target.value)}\n          maxLength={100}\n          style={{ width: \"100%\" }}\n        />\n        <button onClick={handleFileNameSubmit}>Download</button>\n      </Modal>\n\n      <div className=\"section section7\">\n        <div className=\"download-container\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}