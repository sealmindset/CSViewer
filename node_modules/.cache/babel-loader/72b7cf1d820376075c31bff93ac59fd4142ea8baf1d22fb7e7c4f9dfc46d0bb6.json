{"ast":null,"code":"export function isJSONString(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nexport function flattenJSON(jsonData, propertiesKey = \"PROPERTIES\") {\n  const result = [];\n  function flattenObject(obj, prefix = \"\") {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, prefix + key + \"_\"); // Use underscore as the separator\n        } else if (Array.isArray(value)) {\n          // Handle arrays\n          value.forEach((item, index) => {\n            if (typeof item === \"object\" && item !== null) {\n              flattenObject(item, `${prefix}${key}[${index}]_`);\n            } else {\n              const newKey = `${prefix}${key}[${index}]`;\n              result.push({\n                [newKey]: item\n              });\n            }\n          });\n        } else {\n          const newKey = prefix + key;\n          result.push({\n            [newKey]: value\n          });\n        }\n      }\n    }\n  }\n  if (Array.isArray(jsonData)) {\n    jsonData.forEach(item => {\n      if (item.hasOwnProperty(propertiesKey) && typeof item[propertiesKey] === \"object\") {\n        const propertiesData = item[propertiesKey];\n        delete item[propertiesKey];\n        flattenObject(item);\n        for (const key in propertiesData) {\n          if (propertiesData.hasOwnProperty(key)) {\n            const value = propertiesData[key];\n            result.push({\n              [propertiesKey + \"_\" + key]: value\n            });\n          }\n        }\n      } else {\n        flattenObject(item);\n      }\n    });\n  } else if (typeof jsonData === \"object\") {\n    // Single JSON object\n    if (jsonData.hasOwnProperty(propertiesKey) && typeof jsonData[propertiesKey] === \"object\") {\n      const propertiesData = jsonData[propertiesKey];\n      delete jsonData[propertiesKey];\n      flattenObject(jsonData);\n      for (const key in propertiesData) {\n        if (propertiesData.hasOwnProperty(key)) {\n          const value = propertiesData[key];\n          result.push({\n            [propertiesKey + \"_\" + key]: value\n          });\n        }\n      }\n    } else {\n      flattenObject(jsonData);\n    }\n  }\n  return result;\n}\nexport function flattenJSONColumns(data, renamedHeaders) {\n  const flattenedData = [];\n  function flattenObject(obj, prefix = \"\") {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, prefix + key + \".\");\n        } else {\n          const newKey = renamedHeaders[key] || key;\n          flattenedData.push({\n            [newKey]: value\n          });\n        }\n      }\n    }\n  }\n  data.forEach(row => {\n    const newRow = {};\n    for (const header in row) {\n      if (row.hasOwnProperty(header)) {\n        const value = row[header];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, header + \".\");\n        } else {\n          const newHeader = renamedHeaders[header] || header;\n          newRow[newHeader] = value;\n        }\n      }\n    }\n    flattenedData.push(newRow);\n  });\n  return flattenedData;\n}","map":{"version":3,"names":["isJSONString","str","JSON","parse","error","flattenJSON","jsonData","propertiesKey","result","flattenObject","obj","prefix","key","hasOwnProperty","value","Array","isArray","forEach","item","index","newKey","push","propertiesData","flattenJSONColumns","data","renamedHeaders","flattenedData","row","newRow","header","newHeader"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["export function isJSONString(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function flattenJSON(jsonData, propertiesKey = \"PROPERTIES\") {\n  const result = [];\n\n  function flattenObject(obj, prefix = \"\") {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, prefix + key + \"_\"); // Use underscore as the separator\n        } else if (Array.isArray(value)) {\n          // Handle arrays\n          value.forEach((item, index) => {\n            if (typeof item === \"object\" && item !== null) {\n              flattenObject(item, `${prefix}${key}[${index}]_`);\n            } else {\n              const newKey = `${prefix}${key}[${index}]`;\n              result.push({ [newKey]: item });\n            }\n          });\n        } else {\n          const newKey = prefix + key;\n          result.push({ [newKey]: value });\n        }\n      }\n    }\n  }\n\n  if (Array.isArray(jsonData)) {\n    jsonData.forEach((item) => {\n      if (item.hasOwnProperty(propertiesKey) && typeof item[propertiesKey] === \"object\") {\n        const propertiesData = item[propertiesKey];\n        delete item[propertiesKey];\n        flattenObject(item);\n        for (const key in propertiesData) {\n          if (propertiesData.hasOwnProperty(key)) {\n            const value = propertiesData[key];\n            result.push({ [propertiesKey + \"_\" + key]: value });\n          }\n        }\n      } else {\n        flattenObject(item);\n      }\n    });\n  } else if (typeof jsonData === \"object\") {\n    // Single JSON object\n    if (jsonData.hasOwnProperty(propertiesKey) && typeof jsonData[propertiesKey] === \"object\") {\n      const propertiesData = jsonData[propertiesKey];\n      delete jsonData[propertiesKey];\n      flattenObject(jsonData);\n      for (const key in propertiesData) {\n        if (propertiesData.hasOwnProperty(key)) {\n          const value = propertiesData[key];\n          result.push({ [propertiesKey + \"_\" + key]: value });\n        }\n      }\n    } else {\n      flattenObject(jsonData);\n    }\n  }\n\n  return result;\n}\n\nexport function flattenJSONColumns(data, renamedHeaders) {\n  const flattenedData = [];\n\n  function flattenObject(obj, prefix = \"\") {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, prefix + key + \".\");\n        } else {\n          const newKey = renamedHeaders[key] || key;\n          flattenedData.push({ [newKey]: value });\n        }\n      }\n    }\n  }\n\n  data.forEach((row) => {\n    const newRow = {};\n    for (const header in row) {\n      if (row.hasOwnProperty(header)) {\n        const value = row[header];\n        if (typeof value === \"object\" && value !== null && !Array.isArray(value)) {\n          flattenObject(value, header + \".\");\n        } else {\n          const newHeader = renamedHeaders[header] || header;\n          newRow[newHeader] = value;\n        }\n      }\n    }\n    flattenedData.push(newRow);\n  });\n\n  return flattenedData;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}