{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [fileData, setFileData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const [groupedData, setGroupedData] = useState([]); // Define groupedData state variable\n\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setFileData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setFileData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  useEffect(() => {\n    const processData = () => {\n      const filteredData = fileData.filter(row => headers.every(header => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n      }));\n      const flattenedData = filteredData.map(row => ({\n        ...row,\n        PROPERTIES: flattenJSON(row.PROPERTIES)\n      }));\n      const groupedAndSortedData = groupAndSortTableData(flattenedData);\n      setGroupedData(groupedAndSortedData);\n    };\n    processData();\n  }, [fileData, headers, filterCriteria, searchTerms, groupByColumns]);\n  const handleColumnToggle = header => {\n    setHiddenColumns(prevHiddenColumns => prevHiddenColumns.includes(header) ? prevHiddenColumns.filter(col => col !== header) : [...prevHiddenColumns, header]);\n  };\n  const handleGroupByToggle = header => {\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [header]: !prevGroupByColumns[header]\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    const sortColumns = Object.keys(groupByColumns).filter(col => !hiddenColumns.includes(col));\n    tableData.forEach(row => {\n      const groupKey = sortColumns.map(column => row[column]).join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      for (const column of sortColumns) {\n        const aValue = a[column];\n        const bValue = b[column];\n        const sortBy = groupByColumns[column];\n        if (aValue !== bValue) {\n          return sortBy ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n      }\n      return 0;\n    });\n  };\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setGroupByColumns({});\n  };\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: () => handleColumnToggle(header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: () => handleGroupByToggle(header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [renamedHeaders[header] || header, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"field-name-cell\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: `Search ${renamedHeaders[header] || header}`,\n                    value: searchTerms[header] || \"\",\n                    onChange: e => {\n                      const value = e.target.value;\n                      const newColumn = renamedHeaders[header] || header;\n                      setFilterCriteria(prevCriteria => ({\n                        ...prevCriteria,\n                        [header]: value\n                      }));\n                      setSearchTerms(prevSearchTerms => ({\n                        ...prevSearchTerms,\n                        [header]: value.slice(-100) // Take the latter part of the value\n                      }));\n                    },\n\n                    list: `datalist-${header}`,\n                    maxLength: 98,\n                    size: 95 // Set the input size to 100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                    id: `datalist-${header}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"All\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 27\n                    }, this), headers.filter(col => !hiddenColumns.includes(col)).map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: col,\n                      style: {\n                        width: \"100%\",\n                        whiteSpace: \"nowrap\",\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\"\n                      },\n                      children: col.length > 100 ? `...${col.slice(-100)}` : col\n                    }, col, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 31\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this)\n            }, header, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"XRKCSSJ9i1iklTbpUJGckhOUggI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","fileData","setFileData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","groupByColumns","setGroupByColumns","isModalOpen","setIsModalOpen","selectedRowData","setSelectedRowData","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","groupedData","setGroupedData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","header","skipEmptyLines","complete","data","meta","fields","jsonData","JSON","Object","keys","alert","readAsText","processData","filteredData","filter","row","every","criteria","searchTerm","toLowerCase","includes","flattenedData","map","PROPERTIES","groupedAndSortedData","groupAndSortTableData","handleColumnToggle","prevHiddenColumns","col","handleGroupByToggle","prevGroupByColumns","tableData","length","groups","sortColumns","forEach","groupKey","column","join","push","values","flat","sort","a","b","aValue","bValue","sortBy","localeCompare","handleRowClick","handleReset","promptFileName","format","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","newColumn","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","value","substring","omit","grow","className","children","_jsxFileName","lineNumber","columnNumber","getRootProps","getInputProps","checked","onChange","e","prevRenamedHeaders","maxLength","width","Fragment","placeholder","prevCriteria","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [fileData, setFileData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const [groupedData, setGroupedData] = useState([]); // Define groupedData state variable\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setFileData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setFileData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  useEffect(() => {\n    const processData = () => {\n      const filteredData = fileData.filter((row) =>\n        headers.every((header) => {\n          const criteria = filterCriteria[header];\n          const searchTerm = searchTerms[header];\n          return (\n            (!criteria || criteria === \"All\" || row[header] === criteria) &&\n            (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n          );\n        })\n      );\n\n      const flattenedData = filteredData.map((row) => ({\n        ...row,\n        PROPERTIES: flattenJSON(row.PROPERTIES),\n      }));\n\n      const groupedAndSortedData = groupAndSortTableData(flattenedData);\n      setGroupedData(groupedAndSortedData);\n    };\n\n    processData();\n  }, [fileData, headers, filterCriteria, searchTerms, groupByColumns]);\n\n  const handleColumnToggle = (header) => {\n    setHiddenColumns((prevHiddenColumns) =>\n      prevHiddenColumns.includes(header)\n        ? prevHiddenColumns.filter((col) => col !== header)\n        : [...prevHiddenColumns, header]\n    );\n  };\n\n  const handleGroupByToggle = (header) => {\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [header]: !prevGroupByColumns[header],\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    const sortColumns = Object.keys(groupByColumns).filter((col) => !hiddenColumns.includes(col));\n\n    tableData.forEach((row) => {\n      const groupKey = sortColumns.map((column) => row[column]).join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups).flat().sort((a, b) => {\n      for (const column of sortColumns) {\n        const aValue = a[column];\n        const bValue = b[column];\n        const sortBy = groupByColumns[column];\n        if (aValue !== bValue) {\n          return sortBy ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setGroupByColumns({});\n  };\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={() => handleColumnToggle(header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={() => handleGroupByToggle(header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [header]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {headers\n                            .filter((col) => !hiddenColumns.includes(col))\n                            .map((col) => (\n                              <option\n                                key={col}\n                                value={col}\n                                style={{\n                                  width: \"100%\",\n                                  whiteSpace: \"nowrap\",\n                                  overflow: \"hidden\",\n                                  textOverflow: \"ellipsis\",\n                                }}\n                              >\n                                {col.length > 100 ? `...${col.slice(-100)}` : col}\n                              </option>\n                            ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData}\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={() => setIsModalOpen(false)}\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)}\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}