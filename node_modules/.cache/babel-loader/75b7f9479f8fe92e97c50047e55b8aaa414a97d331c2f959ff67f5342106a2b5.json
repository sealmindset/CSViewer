{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  // State declarations\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const originalDataRef = useRef([]);\n  const [originalData, setOriginalData] = useState([]); // New state for original data\n\n  const initialRenamedHeaders = useRef({});\n  const initialHiddenColumns = useRef([]);\n  const initialFilterCriteria = useRef({});\n  const initialSearchTerms = useRef({});\n\n  // Process uploaded CSV data\n  useEffect(() => {\n    if (data.length > 0) {\n      const flattenedData = data.map(row => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return {\n            ...row,\n            ...flattenJSON(properties)\n          };\n        }\n        return row;\n      });\n      setData(flattenedData);\n\n      // Set the original data and filtered data using useRef only if not already set\n      if (originalDataRef.current.length === 0) {\n        originalDataRef.current = flattenedData;\n        setOriginalData(flattenedData);\n        setFilteredData(flattenedData);\n      }\n    }\n  }, [data]);\n\n  // Perform filtering based on filterCriteria and searchTerms\n  useEffect(() => {\n    const newFilteredData = originalDataRef.current.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n    setFilteredData(newFilteredData);\n  }, [originalDataRef.current, headers, filterCriteria, searchTerms]);\n\n  // Perform grouping and sorting based on groupByColumns\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns]);\n\n  // Update filter criteria with renamed headers and handle hiddenColumns as an array\n  useEffect(() => {\n    const updatedCriteria = {};\n    headers.forEach(header => {\n      const newColumn = renamedHeaders[header] || header;\n      if (!hiddenColumns.includes(newColumn)) {\n        updatedCriteria[newColumn] = filterCriteria[header];\n      }\n    });\n    setFilterCriteria(updatedCriteria);\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Update dropdown options for filter\n  useEffect(() => {\n    const updatedOptions = {};\n    headers.forEach(header => {\n      if (!hiddenColumns.includes(header)) {\n        var _searchTerms$header;\n        const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n        const allValues = Array.from(new Set(data.map(row => row[header])));\n        const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n        updatedOptions[header] = filteredValues;\n      }\n    });\n    setDropdownOptions(updatedOptions);\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Update initialState when renamedHeaders, hiddenColumns, filterCriteria, or searchTerms change\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Handle file drop\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n\n  // Group and sort table data based on groupByColumns\n  const groupAndSortTableData = tableData => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Handle column toggle\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => isChecked ? prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column) : [...prevHiddenColumns, column]);\n  };\n\n  // Handle group by toggle\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => {\n      const updatedGroupByColumns = {\n        ...prevGroupByColumns\n      };\n      updatedGroupByColumns[column] = isChecked;\n      return updatedGroupByColumns;\n    });\n  };\n\n  // Reset filters and group by selections\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setGroupByColumns({});\n    setData(originalDataRef.current);\n  };\n\n  // Handle row click\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  // Handle file name submission for download\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  // Handle CSV or JSON download\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop\n  });\n\n  // Define the table columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => {\n    const isPropertiesHeader = header.startsWith(\"PROPERTIES_\");\n    const newColumn = renamedHeaders[header] || header;\n    return {\n      name: isPropertiesHeader ? newColumn.substring(\"PROPERTIES_\".length) : newColumn,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: row => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV | JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 375,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Filter ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value\n                        }));\n                      },\n                      list: `datalist-${header}`,\n                      maxLength: 100,\n                      size: 95 // Set the input size to 95 instead of 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 399,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 401,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 398,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 377,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: filteredData // Use 'filteredData' instead of 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"m5HdkqCxXD8v9EIueVIim5djnU8=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","originalDataRef","originalData","setOriginalData","initialRenamedHeaders","initialHiddenColumns","initialFilterCriteria","initialSearchTerms","length","flattenedData","map","row","properties","JSON","parse","current","setFilteredData","newFilteredData","filter","every","header","criteria","searchTerm","toLowerCase","includes","filteredData","groupedAndSortedData","groupAndSortTableData","updatedCriteria","forEach","newColumn","updatedOptions","_searchTerms$header","allValues","Array","from","Set","filteredValues","value","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","skipEmptyLines","complete","jsonData","alert","readAsText","tableData","Object","keys","groups","groupKey","entries","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","handleGroupByToggle","prevGroupByColumns","updatedGroupByColumns","handleReset","handleRowClick","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","format","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","getRootProps","getInputProps","onDrop","groupByColumn","updatedHeaders","slice","columns","isPropertiesHeader","startsWith","substring","selector","sortable","wrap","omit","grow","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","prevRenamedHeaders","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevCriteria","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  // State declarations\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const originalDataRef = useRef([]);\n  const [originalData, setOriginalData] = useState([]); // New state for original data\n\n  const initialRenamedHeaders = useRef({});\n  const initialHiddenColumns = useRef([]);\n  const initialFilterCriteria = useRef({});\n  const initialSearchTerms = useRef({});\n\n  // Process uploaded CSV data\n  useEffect(() => {\n    if (data.length > 0) {\n      const flattenedData = data.map((row) => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return { ...row, ...flattenJSON(properties) };\n        }\n        return row;\n      });\n\n      setData(flattenedData);\n\n      // Set the original data and filtered data using useRef only if not already set\n      if (originalDataRef.current.length === 0) {\n        originalDataRef.current = flattenedData;\n        setOriginalData(flattenedData);\n        setFilteredData(flattenedData);\n      }\n    }\n  }, [data]);\n\n  // Perform filtering based on filterCriteria and searchTerms\n  useEffect(() => {\n    const newFilteredData = originalDataRef.current.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    setFilteredData(newFilteredData);\n  }, [originalDataRef.current, headers, filterCriteria, searchTerms]);\n\n  // Perform grouping and sorting based on groupByColumns\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns]);\n\n  // Update filter criteria with renamed headers and handle hiddenColumns as an array\n  useEffect(() => {\n    const updatedCriteria = {};\n    headers.forEach((header) => {\n      const newColumn = renamedHeaders[header] || header;\n      if (!hiddenColumns.includes(newColumn)) {\n        updatedCriteria[newColumn] = filterCriteria[header];\n      }\n    });\n    setFilterCriteria(updatedCriteria);\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Update dropdown options for filter\n  useEffect(() => {\n    const updatedOptions = {};\n    headers.forEach((header) => {\n      if (!hiddenColumns.includes(header)) {\n        const searchTerm = searchTerms[header]?.toLowerCase();\n        const allValues = Array.from(new Set(data.map((row) => row[header])));\n        const filteredValues = allValues.filter(\n          (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n        );\n        updatedOptions[header] = filteredValues;\n      }\n    });\n    setDropdownOptions(updatedOptions);\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Update initialState when renamedHeaders, hiddenColumns, filterCriteria, or searchTerms change\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Handle file drop\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  // Group and sort table data based on groupByColumns\n  const groupAndSortTableData = (tableData) => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups)\n      .flat()\n      .sort((a, b) => {\n        const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n        if (sortByColumn) {\n          const [sortBy, _] = sortByColumn;\n          const aValue = a[sortBy];\n          const bValue = b[sortBy];\n          if (!hiddenColumns.includes(sortBy)) {\n            return aValue.localeCompare(bValue);\n          }\n        }\n        return 0;\n      });\n  };\n\n  // Handle column toggle\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) =>\n      isChecked\n        ? prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column)\n        : [...prevHiddenColumns, column]\n    );\n  };\n\n  // Handle group by toggle\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => {\n      const updatedGroupByColumns = { ...prevGroupByColumns };\n      updatedGroupByColumns[column] = isChecked;\n      return updatedGroupByColumns;\n    });\n  };\n\n  // Reset filters and group by selections\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setGroupByColumns({});\n    setData(originalDataRef.current);\n  };\n\n  // Handle row click\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  // Handle file name submission for download\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  // Handle CSV or JSON download\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n  });\n\n  // Define the table columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map((header) => {\n    const isPropertiesHeader = header.startsWith(\"PROPERTIES_\");\n    const newColumn = renamedHeaders[header] || header;\n    return {\n      name: isPropertiesHeader ? newColumn.substring(\"PROPERTIES_\".length) : newColumn,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: (row) => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1,\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CSV File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV | JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Filter ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value,\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={100}\n                          size={95} // Set the input size to 95 instead of 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={filteredData} // Use 'filteredData' instead of 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}