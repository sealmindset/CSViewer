{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      // Clone hiddenColumns as an array\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        if (Array.isArray(jsonData)) {\n          // JSON data is an array of objects\n          handleJSONInCSV(jsonData);\n        } else {\n          // JSON data is a single object\n          setData([jsonData]);\n          setHeaders(Object.keys(jsonData));\n          setRenamedHeaders({});\n          setHiddenColumns([]);\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const handleJSONInCSV = jsonData => {\n    // Flatten the JSON data\n    const flattenedData = jsonData.map(item => {\n      const flatten = (obj, parentKey = \"\") => {\n        let result = {};\n        for (const key in obj) {\n          const value = obj[key];\n          const newKey = parentKey ? `${parentKey}.${key}` : key;\n          if (typeof value === \"object\" && value !== null) {\n            Object.assign(result, flatten(value, newKey));\n          } else {\n            result[newKey] = value;\n          }\n        }\n        return result;\n      };\n      return flatten(item);\n    });\n\n    // Merge the flattened JSON data with the existing CSV data\n    const mergedData = data.map((item, index) => ({\n      ...item,\n      ...flattenedData[index]\n    }));\n    setData(mergedData);\n    setHeaders(Object.keys(mergedData[0]));\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setDropdownOptions({});\n    setGroupByColumns({});\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false\n  });\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns(initialState.groupByColumns);\n  };\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV or JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 305,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100)\n                        }));\n                      },\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 329,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 331,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 328,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onRequestClose: () => setIsModalOpen(false),\n        className: \"modal-content\",\n        children: /*#__PURE__*/_jsxDEV(RowPopup, {\n          rowData: selectedRowData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KythACIW96uSFfef10K81xqT8do=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nconst generateColumns = headers => {\n  return headers.map(header => ({\n    name: header,\n    selector: header,\n    sortable: true\n  }));\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","filteredData","every","criteria","groupedAndSortedData","groupAndSortTableData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","meta","fields","jsonData","JSON","isArray","handleJSONInCSV","Object","keys","alert","readAsText","flattenedData","item","flatten","obj","parentKey","key","newKey","assign","mergedData","index","getRootProps","getInputProps","onDrop","accept","multiple","handleReset","handleRowClick","handleColumnToggle","column","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","updatedHeaders","handleGroupByToggle","prevGroupByColumns","tableData","length","groups","groupKey","entries","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","maxLength","style","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","slice","list","size","id","whiteSpace","overflow","textOverflow","onClick","columns","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","rowData","_c","generateColumns","selector","sortable","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly\n        const jsonData = JSON.parse(fileContent);\n        if (Array.isArray(jsonData)) {\n          // JSON data is an array of objects\n          handleJSONInCSV(jsonData);\n        } else {\n          // JSON data is a single object\n          setData([jsonData]);\n          setHeaders(Object.keys(jsonData));\n          setRenamedHeaders({});\n          setHiddenColumns([]);\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const handleJSONInCSV = (jsonData) => {\n    // Flatten the JSON data\n    const flattenedData = jsonData.map((item) => {\n      const flatten = (obj, parentKey = \"\") => {\n        let result = {};\n        for (const key in obj) {\n          const value = obj[key];\n          const newKey = parentKey ? `${parentKey}.${key}` : key;\n          if (typeof value === \"object\" && value !== null) {\n            Object.assign(result, flatten(value, newKey));\n          } else {\n            result[newKey] = value;\n          }\n        }\n        return result;\n      };\n      return flatten(item);\n    });\n\n    // Merge the flattened JSON data with the existing CSV data\n    const mergedData = data.map((item, index) => ({ ...item, ...flattenedData[index] }));\n\n    setData(mergedData);\n    setHeaders(Object.keys(mergedData[0]));\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setDropdownOptions({});\n    setGroupByColumns({});\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false,\n  });\n\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns(initialState.groupByColumns);\n  };\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV or JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }}\n                    />\n                  </td>\n                  <td>\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100),\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95}\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      <div className=\"section section5\">\n        <div className=\"table-container\">\n        <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      <div className=\"section section6\">\n        <Modal\n          isOpen={isModalOpen}\n          onRequestClose={() => setIsModalOpen(false)}\n          className=\"modal-content\"\n        >\n          <RowPopup rowData={selectedRowData} />\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nconst generateColumns = (headers) => {\n  return headers.map((header) => ({\n    name: header,\n    selector: header,\n    sortable: true,\n  }));\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}