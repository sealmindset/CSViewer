{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      // If data is not available or empty, do nothing\n      return;\n    }\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n  const handleDrop = useCallback(async acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        try {\n          const flattenedData = await processCSVData(fileContent);\n          setData(flattenedData.data);\n          setHeaders(flattenedData.headers);\n          // ... (rest of the state updates)\n        } catch (error) {\n          alert(\"Error processing CSV data: \" + error.message);\n        }\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly as before\n        try {\n          const jsonData = JSON.parse(fileContent);\n          setData(jsonData);\n          setHeaders(Object.keys(jsonData[0]));\n          // ... (rest of the state updates)\n        } catch (error) {\n          alert(\"Error parsing JSON data: \" + error.message);\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const processCSVData = async csvData => {\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvData, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          try {\n            const flattenedData = flattenCSVData(result.data);\n            resolve({\n              data: flattenedData,\n              headers: Object.keys(flattenedData[0])\n            });\n          } catch (error) {\n            reject(error);\n          }\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  };\n  const flattenCSVData = data => {\n    const flattenRow = (row, prefix = \"\") => {\n      let flattenedRow = {};\n      for (const [key, value] of Object.entries(row)) {\n        const newKey = prefix ? `${prefix}_${key}` : key;\n        if (typeof value === \"string\" && value.startsWith(\"{\")) {\n          try {\n            const parsedValue = JSON.parse(value);\n            if (typeof parsedValue === \"object\" && !Array.isArray(parsedValue) && parsedValue !== null) {\n              // If the value is a nested JSON object, recursively flatten it\n              const nestedFlattenedRow = flattenRow(parsedValue, newKey);\n              flattenedRow = {\n                ...flattenedRow,\n                ...nestedFlattenedRow\n              };\n            } else {\n              // If the value is a JSON array or scalar, use the value directly\n              flattenedRow[newKey] = parsedValue;\n            }\n          } catch (error) {\n            // If JSON parsing fails, leave the original value as is\n            flattenedRow[newKey] = value;\n          }\n        } else {\n          // If the value is not a JSON object or JSON array, use the value directly\n          flattenedRow[newKey] = value;\n        }\n      }\n      return flattenedRow;\n    };\n    return data.map(row => flattenRow(row));\n  };\n\n  // Helper function to flatten JSON properties\n  const flattenJSON = (obj, prefix = \"\") => {\n    return Object.keys(obj).reduce((acc, key) => {\n      const newKey = prefix ? `${prefix}_${key}` : key;\n      if (typeof obj[key] === \"object\" && !Array.isArray(obj[key]) && obj[key] !== null) {\n        Object.assign(acc, flattenJSON(obj[key], newKey));\n      } else {\n        acc[newKey] = obj[key];\n      }\n      return acc;\n    }, {});\n  };\n\n  // Function to group and sort table data\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    // Check if header is in hiddenColumns array\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    if (groupedData.length === 0) {\n      alert(\"No data to download.\");\n      return;\n    }\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 416,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 419,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 440,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 442,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 439,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: groupedData && groupedData.length > 0 ? /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data to display.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7zhfsAeocTJ4yzoicH9uy8Bi1q8=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","prevCriteria","updatedCriteria","forEach","header","newColumn","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","length","filteredData","every","criteria","groupedAndSortedData","groupAndSortTableData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","flattenedData","processCSVData","error","alert","message","jsonData","JSON","parse","Object","keys","readAsText","csvData","Promise","resolve","reject","skipEmptyLines","complete","flattenCSVData","flattenRow","prefix","flattenedRow","key","entries","newKey","startsWith","parsedValue","isArray","nestedFlattenedRow","flattenJSON","obj","reduce","acc","assign","tableData","groups","groupKey","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","substring","omit","grow","handleRowClick","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","handleReset","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","trim","handleDownload","visibleData","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = renamedHeaders[header] || header;\n        if (!hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    if (!data || data.length === 0) {\n      // If data is not available or empty, do nothing\n      return;\n    }\n\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  const handleDrop = useCallback(async (acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        try {\n          const flattenedData = await processCSVData(fileContent);\n          setData(flattenedData.data);\n          setHeaders(flattenedData.headers);\n          // ... (rest of the state updates)\n        } catch (error) {\n          alert(\"Error processing CSV data: \" + error.message);\n        }\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly as before\n        try {\n          const jsonData = JSON.parse(fileContent);\n          setData(jsonData);\n          setHeaders(Object.keys(jsonData[0]));\n          // ... (rest of the state updates)\n        } catch (error) {\n          alert(\"Error parsing JSON data: \" + error.message);\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const processCSVData = async (csvData) => {\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvData, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (result) => {\n          try {\n            const flattenedData = flattenCSVData(result.data);\n            resolve({\n              data: flattenedData,\n              headers: Object.keys(flattenedData[0]),\n            });\n          } catch (error) {\n            reject(error);\n          }\n        },\n        error: (error) => {\n          reject(error);\n        },\n      });\n    });\n  };\n\n  const flattenCSVData = (data) => {\n    const flattenRow = (row, prefix = \"\") => {\n      let flattenedRow = {};\n      for (const [key, value] of Object.entries(row)) {\n        const newKey = prefix ? `${prefix}_${key}` : key;\n        if (typeof value === \"string\" && value.startsWith(\"{\")) {\n          try {\n            const parsedValue = JSON.parse(value);\n            if (typeof parsedValue === \"object\" && !Array.isArray(parsedValue) && parsedValue !== null) {\n              // If the value is a nested JSON object, recursively flatten it\n              const nestedFlattenedRow = flattenRow(parsedValue, newKey);\n              flattenedRow = { ...flattenedRow, ...nestedFlattenedRow };\n            } else {\n              // If the value is a JSON array or scalar, use the value directly\n              flattenedRow[newKey] = parsedValue;\n            }\n          } catch (error) {\n            // If JSON parsing fails, leave the original value as is\n            flattenedRow[newKey] = value;\n          }\n        } else {\n          // If the value is not a JSON object or JSON array, use the value directly\n          flattenedRow[newKey] = value;\n        }\n      }\n      return flattenedRow;\n    };\n  \n    return data.map((row) => flattenRow(row));\n  };\n  \n\n  // Helper function to flatten JSON properties\n  const flattenJSON = (obj, prefix = \"\") => {\n    return Object.keys(obj).reduce((acc, key) => {\n      const newKey = prefix ? `${prefix}_${key}` : key;\n      if (typeof obj[key] === \"object\" && !Array.isArray(obj[key]) && obj[key] !== null) {\n        Object.assign(acc, flattenJSON(obj[key], newKey));\n      } else {\n        acc[newKey] = obj[key];\n      }\n      return acc;\n    }, {});\n  };\n\n  // Function to group and sort table data\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header), // Check if header is in hiddenColumns array\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    if (groupedData.length === 0) {\n      alert(\"No data to download.\");\n      return;\n    }\n\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n      {/* ... (content for table section) */}\n      <div className=\"table-container\">\n      {groupedData && groupedData.length > 0 ? (\n            <DataTable\n              columns={columns}\n              data={groupedData}\n              pagination\n              paginationPerPage={10}\n              onRowClicked={handleRowClick}\n              noHeader\n              customStyles={{\n                headCells: {\n                  style: {\n                    paddingLeft: \"8px\",\n                    paddingRight: \"8px\",\n                    paddingTop: \"8px\",\n                    paddingBottom: \"8px\",\n                    fontWeight: \"bold\",\n                    textAlign: \"left\",\n                  },\n                },\n                cells: {\n                  style: {\n                    paddingLeft: \"8px\",\n                    paddingRight: \"8px\",\n                    paddingTop: \"8px\",\n                    paddingBottom: \"8px\",\n                    textAlign: \"left\",\n                  },\n                },\n              }}\n            />\n          ) : (\n            <p>No data to display.</p>\n          )}\n      </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}