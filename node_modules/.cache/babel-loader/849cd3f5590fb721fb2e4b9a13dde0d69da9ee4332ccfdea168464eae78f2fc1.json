{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenData } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [flattenedData, setFlattenedData] = useState([]);\n  const [groupByColumn, setGroupByColumn] = useState(\"\");\n  const [groupedData, setGroupedData] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [searchFilter, setSearchFilter] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  useEffect(() => {\n    // Fetch your data here or load it from a file\n    // For example:\n    // fetch(\"/api/data\")\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     setData(data);\n    //     setFlattenedData(flattenData(data));\n    //     setColumns(Object.keys(data[0]).map((key) => ({ name: key, selector: key })));\n    //   })\n    //   .catch((error) => console.error(\"Error fetching data:\", error));\n\n    // For demonstration purposes, using sample data\n    const sampleData = [{\n      id: 1,\n      name: \"John Doe\",\n      age: 28,\n      email: \"john.doe@example.com\"\n    }, {\n      id: 2,\n      name: \"Jane Smith\",\n      age: 34,\n      email: \"jane.smith@example.com\"\n    }\n    // Add more sample data as needed\n    ];\n\n    setData(sampleData);\n    setFlattenedData(flattenData(sampleData));\n    setColumns(Object.keys(sampleData[0]).map(key => ({\n      name: key,\n      selector: key\n    })));\n  }, []);\n  const handleDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles.length === 0) return;\n    const file = acceptedFiles[0];\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = function () {\n      const fileContent = reader.result;\n      let parsedData;\n      if (selectedFileFormat === \"csv\") {\n        parsedData = Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true\n        });\n      } else if (selectedFileFormat === \"json\") {\n        parsedData = JSON.parse(fileContent);\n      }\n      setData(parsedData.data);\n      setFlattenedData(flattenData(parsedData.data));\n      setColumns(Object.keys(parsedData.data[0]).map(key => ({\n        name: key,\n        selector: key\n      })));\n    };\n    if (selectedFileFormat === \"csv\") {\n      reader.readAsText(file);\n    } else if (selectedFileFormat === \"json\") {\n      reader.readAsText(file);\n    }\n  }, [selectedFileFormat]);\n  const handleGroupByToggle = header => {\n    if (groupByColumn === header) {\n      setGroupByColumn(\"\");\n      setGroupedData({});\n    } else {\n      setGroupByColumn(header);\n      setGroupedData(groupAndSortTableData(header));\n    }\n  };\n  const groupAndSortTableData = column => {\n    const groupedData = {};\n    data.forEach(row => {\n      const value = row[column];\n      if (!groupedData[value]) {\n        groupedData[value] = [];\n      }\n      groupedData[value].push(row);\n    });\n    return groupedData;\n  };\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleReset = () => {\n    setGroupByColumn(\"\");\n    setGroupedData({});\n    setSearchFilter(\"\");\n  };\n  const handleFilterChange = e => {\n    setSearchFilter(e.target.value);\n  };\n  const handleSearchChange = e => {\n    setSearchFilter(e.target.value);\n  };\n  const filteredData = flattenedData.filter(row => Object.values(row).some(value => value && value.toString().toLowerCase().includes(searchFilter.toLowerCase())));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 205,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 208,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 229,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 231,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 228,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"jr5lSR63KoY4ynhP7Ac7y94Uoa4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenData","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","columns","setColumns","flattenedData","setFlattenedData","groupByColumn","setGroupByColumn","groupedData","setGroupedData","selectedRowData","setSelectedRowData","searchFilter","setSearchFilter","isModalOpen","setIsModalOpen","isFileNameModalOpen","setIsFileNameModalOpen","fileName","setFileName","selectedFileFormat","setSelectedFileFormat","sampleData","id","name","age","email","Object","keys","map","key","selector","handleDrop","acceptedFiles","length","file","reader","FileReader","onload","fileContent","result","parsedData","parse","header","skipEmptyLines","JSON","readAsText","handleGroupByToggle","groupAndSortTableData","column","forEach","row","value","push","handleRowClick","handleReset","handleFilterChange","e","target","handleSearchChange","filteredData","filter","values","some","toString","toLowerCase","includes","className","children","_jsxFileName","lineNumber","columnNumber","getRootProps","getInputProps","headers","type","checked","hiddenColumns","onChange","handleColumnToggle","renamedHeaders","setRenamedHeaders","prevRenamedHeaders","maxLength","style","width","groupByColumns","_dropdownOptions$head","Fragment","placeholder","searchTerms","newColumn","setFilterCriteria","prevCriteria","setSearchTerms","prevSearchTerms","slice","list","size","dropdownOptions","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","promptFileName","handleFileNameSubmit","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenData } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [flattenedData, setFlattenedData] = useState([]);\n  const [groupByColumn, setGroupByColumn] = useState(\"\");\n  const [groupedData, setGroupedData] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [searchFilter, setSearchFilter] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n\n  useEffect(() => {\n    // Fetch your data here or load it from a file\n    // For example:\n    // fetch(\"/api/data\")\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     setData(data);\n    //     setFlattenedData(flattenData(data));\n    //     setColumns(Object.keys(data[0]).map((key) => ({ name: key, selector: key })));\n    //   })\n    //   .catch((error) => console.error(\"Error fetching data:\", error));\n\n    // For demonstration purposes, using sample data\n    const sampleData = [\n      { id: 1, name: \"John Doe\", age: 28, email: \"john.doe@example.com\" },\n      { id: 2, name: \"Jane Smith\", age: 34, email: \"jane.smith@example.com\" },\n      // Add more sample data as needed\n    ];\n\n    setData(sampleData);\n    setFlattenedData(flattenData(sampleData));\n    setColumns(Object.keys(sampleData[0]).map((key) => ({ name: key, selector: key })));\n  }, []);\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      if (acceptedFiles.length === 0) return;\n\n      const file = acceptedFiles[0];\n      setFileName(file.name);\n\n      const reader = new FileReader();\n      reader.onload = function () {\n        const fileContent = reader.result;\n        let parsedData;\n\n        if (selectedFileFormat === \"csv\") {\n          parsedData = Papa.parse(fileContent, { header: true, skipEmptyLines: true });\n        } else if (selectedFileFormat === \"json\") {\n          parsedData = JSON.parse(fileContent);\n        }\n\n        setData(parsedData.data);\n        setFlattenedData(flattenData(parsedData.data));\n        setColumns(\n          Object.keys(parsedData.data[0]).map((key) => ({ name: key, selector: key }))\n        );\n      };\n\n      if (selectedFileFormat === \"csv\") {\n        reader.readAsText(file);\n      } else if (selectedFileFormat === \"json\") {\n        reader.readAsText(file);\n      }\n    },\n    [selectedFileFormat]\n  );\n\n  const handleGroupByToggle = (header) => {\n    if (groupByColumn === header) {\n      setGroupByColumn(\"\");\n      setGroupedData({});\n    } else {\n      setGroupByColumn(header);\n      setGroupedData(groupAndSortTableData(header));\n    }\n  };\n\n  const groupAndSortTableData = (column) => {\n    const groupedData = {};\n    data.forEach((row) => {\n      const value = row[column];\n      if (!groupedData[value]) {\n        groupedData[value] = [];\n      }\n      groupedData[value].push(row);\n    });\n\n    return groupedData;\n  };\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleReset = () => {\n    setGroupByColumn(\"\");\n    setGroupedData({});\n    setSearchFilter(\"\");\n  };\n\n  const handleFilterChange = (e) => {\n    setSearchFilter(e.target.value);\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchFilter(e.target.value);\n  };\n\n  const filteredData = flattenedData.filter((row) =>\n    Object.values(row).some(\n      (value) => value && value.toString().toLowerCase().includes(searchFilter.toLowerCase())\n    )\n  );\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}