{"ast":null,"code":"const flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    console.warn('Error parsing JSON in flattenProperties for data:', data, 'Error:', error);\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map(item => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n  return flattenedData;\n};\nconst mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = {\n    ...originalRow\n  };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    let properties;\n    try {\n      properties = JSON.parse(originalRow.PROPERTIES);\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n      properties = null;\n    }\n    if (properties && typeof properties === 'object') {\n      // Merge properties object with newRow, handling nested objects\n      const mergeObjects = (obj, parentKey = '') => {\n        for (const key in obj) {\n          const value = obj[key];\n          const newKey = parentKey ? `${parentKey}_${key}` : key;\n          if (typeof value === 'object' && value !== null) {\n            mergeObjects(value, newKey);\n          } else {\n            newRow[newKey] = value;\n          }\n        }\n      };\n      mergeObjects(properties);\n    }\n  }\n\n  // Merge flattenedProperties into newRow\n  for (const key in flattenedProperties) {\n    newRow[key] = flattenedProperties[key];\n  }\n  return newRow;\n};\nexport { flattenProperties, mergeRow };","map":{"version":3,"names":["flattenProperties","data","prefix","flattenedData","flattenObject","obj","parentKey","key","value","newKey","parsedData","JSON","parse","error","console","warn","split","map","item","trim","mergeRow","flattenedProperties","originalRow","newRow","hasOwnProperty","properties","PROPERTIES","mergeObjects"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/JSONFlatten.js"],"sourcesContent":["\nconst flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    console.warn('Error parsing JSON in flattenProperties for data:', data, 'Error:', error);\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map((item) => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n\n  return flattenedData;\n};\n\nconst mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = { ...originalRow };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    let properties;\n    try {\n      properties = JSON.parse(originalRow.PROPERTIES);\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n      properties = null;\n    }\n\n    if (properties && typeof properties === 'object') {\n      // Merge properties object with newRow, handling nested objects\n      const mergeObjects = (obj, parentKey = '') => {\n        for (const key in obj) {\n          const value = obj[key];\n          const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n          if (typeof value === 'object' && value !== null) {\n            mergeObjects(value, newKey);\n          } else {\n            newRow[newKey] = value;\n          }\n        }\n      };\n      mergeObjects(properties);\n    }\n  }\n\n  // Merge flattenedProperties into newRow\n  for (const key in flattenedProperties) {\n    newRow[key] = flattenedProperties[key];\n  }\n\n  return newRow;\n};\n\n\n\nexport { flattenProperties, mergeRow };"],"mappings":"AACA,MAAMA,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,MAAM,GAAG,EAAE,KAAK;EAC/C,MAAMC,aAAa,GAAG,CAAC,CAAC;EAExB,MAAMC,aAAa,GAAGA,CAACC,GAAG,EAAEC,SAAS,GAAG,EAAE,KAAK;IAC7C,KAAK,MAAMC,GAAG,IAAIF,GAAG,EAAE;MACrB,MAAMG,KAAK,GAAGH,GAAG,CAACE,GAAG,CAAC;MACtB,MAAME,MAAM,GAAGH,SAAS,GAAI,GAAEA,SAAU,IAAGC,GAAI,EAAC,GAAGA,GAAG;MAEtD,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;QAC/C;QACAJ,aAAa,CAACI,KAAK,EAAEC,MAAM,CAAC;MAC9B,CAAC,MAAM;QACLN,aAAa,CAACM,MAAM,CAAC,GAAGD,KAAK;MAC/B;IACF;EACF,CAAC;EAED,IAAI;IACF,MAAME,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACX,IAAI,CAAC;IACnCG,aAAa,CAACM,UAAU,EAAER,MAAM,CAAC;EACnC,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACC,IAAI,CAAC,mDAAmD,EAAEd,IAAI,EAAE,QAAQ,EAAEY,KAAK,CAAC;IACxF;IACA,MAAM,CAACN,GAAG,EAAEC,KAAK,CAAC,GAAGP,IAAI,CAACe,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IAC/D,MAAMV,MAAM,GAAGP,MAAM,GAAI,GAAEA,MAAO,IAAGK,GAAI,EAAC,GAAGA,GAAG;IAChDJ,aAAa,CAACM,MAAM,CAAC,GAAGD,KAAK;EAC/B;EAEA,OAAOL,aAAa;AACtB,CAAC;AAED,MAAMiB,QAAQ,GAAGA,CAACC,mBAAmB,EAAEC,WAAW,KAAK;EACrD,MAAMC,MAAM,GAAG;IAAE,GAAGD;EAAY,CAAC;;EAEjC;EACA,IAAIA,WAAW,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;IAC5C,IAAIC,UAAU;IACd,IAAI;MACFA,UAAU,GAAGd,IAAI,CAACC,KAAK,CAACU,WAAW,CAACI,UAAU,CAAC;IACjD,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEF,KAAK,CAAC;MACvDY,UAAU,GAAG,IAAI;IACnB;IAEA,IAAIA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAChD;MACA,MAAME,YAAY,GAAGA,CAACtB,GAAG,EAAEC,SAAS,GAAG,EAAE,KAAK;QAC5C,KAAK,MAAMC,GAAG,IAAIF,GAAG,EAAE;UACrB,MAAMG,KAAK,GAAGH,GAAG,CAACE,GAAG,CAAC;UACtB,MAAME,MAAM,GAAGH,SAAS,GAAI,GAAEA,SAAU,IAAGC,GAAI,EAAC,GAAGA,GAAG;UAEtD,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;YAC/CmB,YAAY,CAACnB,KAAK,EAAEC,MAAM,CAAC;UAC7B,CAAC,MAAM;YACLc,MAAM,CAACd,MAAM,CAAC,GAAGD,KAAK;UACxB;QACF;MACF,CAAC;MACDmB,YAAY,CAACF,UAAU,CAAC;IAC1B;EACF;;EAEA;EACA,KAAK,MAAMlB,GAAG,IAAIc,mBAAmB,EAAE;IACrCE,MAAM,CAAChB,GAAG,CAAC,GAAGc,mBAAmB,CAACd,GAAG,CAAC;EACxC;EAEA,OAAOgB,MAAM;AACf,CAAC;AAID,SAASvB,iBAAiB,EAAEoB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}