{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  // State declarations\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const originalDataRef = useRef([]);\n  const [originalData, setOriginalData] = useState([]); // New state for original data\n\n  // Process uploaded CSV data\n  useEffect(() => {\n    if (data.length > 0) {\n      const flattenedData = data.map(row => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return {\n            ...row,\n            ...flattenJSON(properties)\n          };\n        }\n        return row;\n      });\n      setData(flattenedData);\n      originalDataRef.current = flattenedData; // Save the original data\n      setOriginalData(flattenedData); // Save the original data\n      setHeaders(Object.keys(flattenedData[0]));\n      setRenamedHeaders({});\n      setHiddenColumns([]);\n      setFilterCriteria({});\n      setSearchTerms({});\n      setDropdownOptions({});\n      setGroupByColumns({});\n    }\n  }, [data]);\n\n  // Perform grouping and sorting based on groupByColumns\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns]);\n\n  // Update filter criteria with renamed headers and handle hiddenColumns as an array\n  useEffect(() => {\n    const updatedCriteria = {};\n    headers.forEach(header => {\n      const newColumn = renamedHeaders[header] || header;\n      if (!hiddenColumns.includes(newColumn)) {\n        updatedCriteria[newColumn] = filterCriteria[header];\n      }\n    });\n    setFilterCriteria(updatedCriteria);\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Update dropdown options for filter\n  useEffect(() => {\n    const updatedOptions = {};\n    headers.forEach(header => {\n      if (!hiddenColumns.includes(header)) {\n        var _searchTerms$header;\n        const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n        const allValues = Array.from(new Set(data.map(row => row[header])));\n        const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n        updatedOptions[header] = filteredValues;\n      }\n    });\n    setDropdownOptions(updatedOptions);\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Update initialState when renamedHeaders, hiddenColumns, filterCriteria, or searchTerms change\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Handle file drop\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n\n  // Group and sort table data based on groupByColumns\n  const groupAndSortTableData = tableData => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Handle column toggle\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => isChecked ? prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column) : [...prevHiddenColumns, column]);\n  };\n\n  // Handle group by toggle\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => {\n      const updatedGroupByColumns = {\n        ...prevGroupByColumns\n      };\n      updatedGroupByColumns[column] = isChecked;\n      return updatedGroupByColumns;\n    });\n  };\n\n  // Reset filters and group by selections\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns({});\n    setFilterCriteria({});\n    setSearchTerms({});\n    setGroupByColumns({});\n    setData(originalDataRef.current); // Reset data to originalData using the ref\n    setGroupedData(originalDataRef.current); // Reset groupedData to originalData using the ref\n  };\n\n  // Handle row click\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  // Handle file name submission for download\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  // Handle CSV or JSON download\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop\n  });\n\n  // Define the table columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => {\n    const isPropertiesHeader = header.startsWith(\"PROPERTIES_\");\n    const newColumn = renamedHeaders[header] || header;\n    return {\n      name: isPropertiesHeader ? newColumn.substring(\"PROPERTIES_\".length) : newColumn,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: row => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSV | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV | JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 358,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Filter ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value\n                        }));\n                      },\n                      list: `datalist-${header}`,\n                      maxLength: 100,\n                      size: 95 // Set the input size to 95 instead of 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 382,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 384,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AXSzQ7n50y3IAKyGiih97twK3lY=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","originalDataRef","originalData","setOriginalData","length","flattenedData","map","row","properties","JSON","parse","current","Object","keys","filteredData","filter","every","header","criteria","searchTerm","toLowerCase","includes","groupedAndSortedData","groupAndSortTableData","updatedCriteria","forEach","newColumn","updatedOptions","_searchTerms$header","allValues","Array","from","Set","filteredValues","value","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","skipEmptyLines","complete","jsonData","alert","readAsText","tableData","groups","groupKey","entries","column","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleColumnToggle","isChecked","checked","prevHiddenColumns","hiddenColumn","handleGroupByToggle","prevGroupByColumns","updatedGroupByColumns","handleReset","handleRowClick","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","format","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","getRootProps","getInputProps","onDrop","groupByColumn","updatedHeaders","slice","columns","isPropertiesHeader","startsWith","substring","selector","sortable","wrap","omit","grow","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","prevRenamedHeaders","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevCriteria","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  // State declarations\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const originalDataRef = useRef([]);\n  const [originalData, setOriginalData] = useState([]); // New state for original data\n\n\n  // Process uploaded CSV data\n  useEffect(() => {\n    if (data.length > 0) {\n      const flattenedData = data.map((row) => {\n        if (row[\"PROPERTIES\"]) {\n          const properties = JSON.parse(row[\"PROPERTIES\"]);\n          delete row[\"PROPERTIES\"];\n          return { ...row, ...flattenJSON(properties) };\n        }\n        return row;\n      });\n\n      setData(flattenedData);\n      originalDataRef.current = flattenedData; // Save the original data\n      setOriginalData(flattenedData); // Save the original data\n      setHeaders(Object.keys(flattenedData[0]));\n      setRenamedHeaders({});\n      setHiddenColumns([]);\n      setFilterCriteria({});\n      setSearchTerms({});\n      setDropdownOptions({});\n      setGroupByColumns({});\n    }\n  }, [data]);\n\n  // Perform grouping and sorting based on groupByColumns\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms, groupByColumns]);\n\n  // Update filter criteria with renamed headers and handle hiddenColumns as an array\n  useEffect(() => {\n    const updatedCriteria = {};\n    headers.forEach((header) => {\n      const newColumn = renamedHeaders[header] || header;\n      if (!hiddenColumns.includes(newColumn)) {\n        updatedCriteria[newColumn] = filterCriteria[header];\n      }\n    });\n    setFilterCriteria(updatedCriteria);\n  }, [renamedHeaders, hiddenColumns, headers, filterCriteria]);\n\n  // Update dropdown options for filter\n  useEffect(() => {\n    const updatedOptions = {};\n    headers.forEach((header) => {\n      if (!hiddenColumns.includes(header)) {\n        const searchTerm = searchTerms[header]?.toLowerCase();\n        const allValues = Array.from(new Set(data.map((row) => row[header])));\n        const filteredValues = allValues.filter(\n          (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n        );\n        updatedOptions[header] = filteredValues;\n      }\n    });\n    setDropdownOptions(updatedOptions);\n  }, [searchTerms, data, headers, hiddenColumns]);\n\n  // Update initialState when renamedHeaders, hiddenColumns, filterCriteria, or searchTerms change\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns],\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  // Handle file drop\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  // Group and sort table data based on groupByColumns\n  const groupAndSortTableData = (tableData) => {\n    if (!tableData || Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups)\n      .flat()\n      .sort((a, b) => {\n        const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n        if (sortByColumn) {\n          const [sortBy, _] = sortByColumn;\n          const aValue = a[sortBy];\n          const bValue = b[sortBy];\n          if (!hiddenColumns.includes(sortBy)) {\n            return aValue.localeCompare(bValue);\n          }\n        }\n        return 0;\n      });\n  };\n\n  // Handle column toggle\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) =>\n      isChecked\n        ? prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column)\n        : [...prevHiddenColumns, column]\n    );\n  };\n\n  // Handle group by toggle\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => {\n      const updatedGroupByColumns = { ...prevGroupByColumns };\n      updatedGroupByColumns[column] = isChecked;\n      return updatedGroupByColumns;\n    });\n  };\n\n  // Reset filters and group by selections\n  const handleReset = () => {\n    setRenamedHeaders({});\n    setHiddenColumns({});\n    setFilterCriteria({});\n    setSearchTerms({});\n    setGroupByColumns({});\n    setData(originalDataRef.current); // Reset data to originalData using the ref\n    setGroupedData(originalDataRef.current); // Reset groupedData to originalData using the ref\n  };\n\n  // Handle row click\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  // Handle file name submission for download\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  // Handle CSV or JSON download\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n  });\n\n  // Define the table columns\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map((header) => {\n    const isPropertiesHeader = header.startsWith(\"PROPERTIES_\");\n    const newColumn = renamedHeaders[header] || header;\n    return {\n      name: isPropertiesHeader ? newColumn.substring(\"PROPERTIES_\".length) : newColumn,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: (row) => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || hiddenColumns.includes(header),\n      grow: 1,\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CSV | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CSV File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV | JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Filter ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value,\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={100}\n                          size={95} // Set the input size to 95 instead of 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}