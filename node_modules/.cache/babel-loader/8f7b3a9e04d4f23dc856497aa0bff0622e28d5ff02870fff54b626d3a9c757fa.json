{"ast":null,"code":"import Papa from 'papaparse';\nexport const flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map(item => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n  return flattenedData;\n};\nexport const mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = {\n    ...originalRow\n  };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    try {\n      const properties = JSON.parse(originalRow.PROPERTIES);\n      if (typeof properties === 'object' && properties !== null) {\n        // Flatten the properties object\n        const flattenedProperties = flattenProperties(JSON.stringify(properties));\n        // Merge flattenedProperties into newRow\n        for (const key in flattenedProperties) {\n          newRow[key] = flattenedProperties[key];\n        }\n      }\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n    }\n  }\n  return newRow;\n};","map":{"version":3,"names":["Papa","flattenProperties","data","prefix","flattenedData","flattenObject","obj","parentKey","key","value","newKey","parsedData","JSON","parse","error","split","map","item","trim","mergeRow","flattenedProperties","originalRow","newRow","hasOwnProperty","properties","PROPERTIES","stringify","console","warn"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/JSONFlattener.js"],"sourcesContent":["import Papa from 'papaparse';\n\nexport const flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map((item) => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n\n  return flattenedData;\n};\n\nexport const mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = { ...originalRow };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    try {\n      const properties = JSON.parse(originalRow.PROPERTIES);\n      if (typeof properties === 'object' && properties !== null) {\n        // Flatten the properties object\n        const flattenedProperties = flattenProperties(JSON.stringify(properties));\n        // Merge flattenedProperties into newRow\n        for (const key in flattenedProperties) {\n          newRow[key] = flattenedProperties[key];\n        }\n      }\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n    }\n  }\n\n  return newRow;\n};"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,MAAM,GAAG,EAAE,KAAK;EACtD,MAAMC,aAAa,GAAG,CAAC,CAAC;EAExB,MAAMC,aAAa,GAAGA,CAACC,GAAG,EAAEC,SAAS,GAAG,EAAE,KAAK;IAC7C,KAAK,MAAMC,GAAG,IAAIF,GAAG,EAAE;MACrB,MAAMG,KAAK,GAAGH,GAAG,CAACE,GAAG,CAAC;MACtB,MAAME,MAAM,GAAGH,SAAS,GAAI,GAAEA,SAAU,IAAGC,GAAI,EAAC,GAAGA,GAAG;MAEtD,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;QAC/C;QACAJ,aAAa,CAACI,KAAK,EAAEC,MAAM,CAAC;MAC9B,CAAC,MAAM;QACLN,aAAa,CAACM,MAAM,CAAC,GAAGD,KAAK;MAC/B;IACF;EACF,CAAC;EAED,IAAI;IACF,MAAME,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACX,IAAI,CAAC;IACnCG,aAAa,CAACM,UAAU,EAAER,MAAM,CAAC;EACnC,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd;IACA,MAAM,CAACN,GAAG,EAAEC,KAAK,CAAC,GAAGP,IAAI,CAACa,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IAC/D,MAAMR,MAAM,GAAGP,MAAM,GAAI,GAAEA,MAAO,IAAGK,GAAI,EAAC,GAAGA,GAAG;IAChDJ,aAAa,CAACM,MAAM,CAAC,GAAGD,KAAK;EAC/B;EAEA,OAAOL,aAAa;AACtB,CAAC;AAED,OAAO,MAAMe,QAAQ,GAAGA,CAACC,mBAAmB,EAAEC,WAAW,KAAK;EAC5D,MAAMC,MAAM,GAAG;IAAE,GAAGD;EAAY,CAAC;;EAEjC;EACA,IAAIA,WAAW,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;IAC5C,IAAI;MACF,MAAMC,UAAU,GAAGZ,IAAI,CAACC,KAAK,CAACQ,WAAW,CAACI,UAAU,CAAC;MACrD,IAAI,OAAOD,UAAU,KAAK,QAAQ,IAAIA,UAAU,KAAK,IAAI,EAAE;QACzD;QACA,MAAMJ,mBAAmB,GAAGnB,iBAAiB,CAACW,IAAI,CAACc,SAAS,CAACF,UAAU,CAAC,CAAC;QACzE;QACA,KAAK,MAAMhB,GAAG,IAAIY,mBAAmB,EAAE;UACrCE,MAAM,CAACd,GAAG,CAAC,GAAGY,mBAAmB,CAACZ,GAAG,CAAC;QACxC;MACF;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACda,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEd,KAAK,CAAC;IACzD;EACF;EAEA,OAAOQ,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}