{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON, flattenJSONColumns } from \"./utils\"; // Import both flattenJSON and flattenJSONColumns functions\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]); // Original data from CSV/JSON\n  const [tableData, setTableData] = useState([]); // Flattened and processed data\n  const [headers, setHeaders] = useState([]);\n  const [columnConfig, setColumnConfig] = useState({}); // Contains renamedHeaders and hiddenColumns\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  // const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  // const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  // const [fileName, setFileName] = useState(\"\");\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria(prevCriteria => {\n      const updatedCriteria = {};\n      headers.forEach(header => {\n        const newColumn = columnConfig.renamedHeaders[header] || header;\n        if (!columnConfig.hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [columnConfig.renamedHeaders, columnConfig.hiddenColumns, headers, filterCriteria]);\n  useEffect(() => {\n    setDropdownOptions(prevOptions => {\n      const updatedOptions = {\n        ...prevOptions\n      };\n      headers.forEach(header => {\n        if (!columnConfig.hiddenColumns.includes(header)) {\n          var _searchTerms$header;\n          const searchTerm = (_searchTerms$header = searchTerms[header]) === null || _searchTerms$header === void 0 ? void 0 : _searchTerms$header.toLowerCase();\n          const allValues = Array.from(new Set(data.map(row => row[header])));\n          const filteredValues = allValues.filter(value => !searchTerm || value.toLowerCase().includes(searchTerm));\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, columnConfig.hiddenColumns]);\n  useEffect(() => {\n    setTableData(prevData => {\n      // Update the tableData when the data or columnConfig changes\n      const flattenedData = flattenJSONColumns(data, columnConfig.renamedHeaders);\n      return groupAndSortTableData(flattenedData);\n    });\n  }, [data, columnConfig]);\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: {\n        ...renamedHeaders\n      },\n      hiddenColumns: [...hiddenColumns],\n      // Clone hiddenColumns as an array\n      filterCriteria: {\n        ...filterCriteria\n      },\n      searchTerms: {\n        ...searchTerms\n      }\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n  useEffect(() => {\n    const filteredData = data.filter(row => headers.every(header => {\n      const criteria = filterCriteria[header];\n      const searchTerm = searchTerms[header];\n      return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n    }));\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setColumnConfig({\n              renamedHeaders: {},\n              hiddenColumns: []\n            });\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data and flatten specific columns containing JSON objects\n        try {\n          const jsonData = JSON.parse(fileContent);\n          const flattenedData = flattenJSONColumns([jsonData], columnConfig.renamedHeaders);\n          setData(flattenedData); // Store the flattened JSON data in the 'data' state\n          setHeaders(Object.keys(flattenedData[0]));\n          setColumnConfig({\n            renamedHeaders: {},\n            hiddenColumns: []\n          });\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n        } catch (error) {\n          alert(\"Error parsing JSON data from the file.\");\n          console.error(error);\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, [columnConfig.renamedHeaders]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 332,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 356,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 355,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 359,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 380,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 382,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"A7KevYpoAlJqI3lSYH9/HfqCdes=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","flattenJSONColumns","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","tableData","setTableData","headers","setHeaders","columnConfig","setColumnConfig","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","groupByColumns","setGroupByColumns","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","prevCriteria","updatedCriteria","forEach","header","newColumn","renamedHeaders","hiddenColumns","includes","prevOptions","updatedOptions","_searchTerms$header","searchTerm","toLowerCase","allValues","Array","from","Set","map","row","filteredValues","filter","value","prevData","flattenedData","groupAndSortTableData","setInitialState","filteredData","every","criteria","groupedAndSortedData","setGroupedData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","meta","fields","jsonData","JSON","Object","keys","error","alert","console","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","length","substring","omit","grow","handleRowClick","handleColumnToggle","column","isChecked","checked","setHiddenColumns","prevHiddenColumns","hiddenColumn","setRenamedHeaders","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","groups","groupKey","entries","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleReset","initialState","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","trim","handleDownload","visibleData","groupedData","reduce","acc","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON, flattenJSONColumns } from \"./utils\"; // Import both flattenJSON and flattenJSONColumns functions\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]); // Original data from CSV/JSON\n  const [tableData, setTableData] = useState([]); // Flattened and processed data\n  const [headers, setHeaders] = useState([]);\n  const [columnConfig, setColumnConfig] = useState({}); // Contains renamedHeaders and hiddenColumns\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [groupByColumns, setGroupByColumns] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n// const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n// const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n// const [fileName, setFileName] = useState(\"\");\n\n  useEffect(() => {\n    // Update filter criteria with renamed headers and handle hiddenColumns as an array\n    setFilterCriteria((prevCriteria) => {\n      const updatedCriteria = {};\n      headers.forEach((header) => {\n        const newColumn = columnConfig.renamedHeaders[header] || header;\n        if (!columnConfig.hiddenColumns.includes(newColumn)) {\n          updatedCriteria[newColumn] = prevCriteria[header];\n        }\n      });\n      return updatedCriteria;\n    });\n  }, [columnConfig.renamedHeaders, columnConfig.hiddenColumns, headers, filterCriteria]);\n\n  useEffect(() => {\n    setDropdownOptions((prevOptions) => {\n      const updatedOptions = { ...prevOptions };\n      headers.forEach((header) => {\n        if (!columnConfig.hiddenColumns.includes(header)) {\n          const searchTerm = searchTerms[header]?.toLowerCase();\n          const allValues = Array.from(new Set(data.map((row) => row[header])));\n          const filteredValues = allValues.filter(\n            (value) => !searchTerm || value.toLowerCase().includes(searchTerm)\n          );\n          updatedOptions[header] = filteredValues;\n        }\n      });\n      return updatedOptions;\n    });\n  }, [searchTerms, data, headers, columnConfig.hiddenColumns]);\n\n  useEffect(() => {\n    setTableData((prevData) => {\n      // Update the tableData when the data or columnConfig changes\n      const flattenedData = flattenJSONColumns(data, columnConfig.renamedHeaders);\n      return groupAndSortTableData(flattenedData);\n    });\n  }, [data, columnConfig]);\n\n  useEffect(() => {\n    setInitialState({\n      renamedHeaders: { ...renamedHeaders },\n      hiddenColumns: [...hiddenColumns], // Clone hiddenColumns as an array\n      filterCriteria: { ...filterCriteria },\n      searchTerms: { ...searchTerms },\n    });\n  }, [renamedHeaders, hiddenColumns, filterCriteria, searchTerms]);\n\n  useEffect(() => {\n    const filteredData = data.filter((row) =>\n      headers.every((header) => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (\n          (!criteria || criteria === \"All\" || row[header] === criteria) &&\n          (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    );\n\n    // Apply group by and sort logic\n    const groupedAndSortedData = groupAndSortTableData(filteredData);\n    setGroupedData(groupedAndSortedData);\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n  \n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        // Handle CSV data using Papa.parse as before\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setColumnConfig({ renamedHeaders: {}, hiddenColumns: [] });\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({});\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data and flatten specific columns containing JSON objects\n        try {\n          const jsonData = JSON.parse(fileContent);\n          const flattenedData = flattenJSONColumns([jsonData], columnConfig.renamedHeaders);\n          setData(flattenedData); // Store the flattened JSON data in the 'data' state\n          setHeaders(Object.keys(flattenedData[0]));\n          setColumnConfig({ renamedHeaders: {}, hiddenColumns: [] });\n          setFilterCriteria({});\n          setSearchTerms({});\n          setDropdownOptions({});\n          setGroupByColumns({});\n        } catch (error) {\n          alert(\"Error parsing JSON data from the file.\");\n          console.error(error);\n        }\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n  \n    reader.readAsText(file);\n  }, [columnConfig.renamedHeaders]);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}