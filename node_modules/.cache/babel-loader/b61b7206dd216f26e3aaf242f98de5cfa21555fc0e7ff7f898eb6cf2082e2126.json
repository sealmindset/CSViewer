{"ast":null,"code":"// utils.js\n\nexport const flattenData = (data, columns) => {\n  // Function to flatten the data based on selected columns\n  const newData = data.map(row => {\n    const flattenedRow = {};\n    columns.forEach(column => {\n      if (row[column] && typeof row[column] === \"object\") {\n        Object.keys(row[column]).forEach(key => {\n          flattenedRow[`${column}.${key}`] = row[column][key];\n        });\n      } else {\n        flattenedRow[column] = row[column];\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\nexport const flattenJSONColumns = (data, columns) => {\n  const flattenObject = (obj, parentKey = \"\") => {\n    return Object.entries(obj).reduce((acc, [key, value]) => {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof value === \"object\" && value !== null) {\n        if (Array.isArray(value)) {\n          const arrayValue = value.map((item, index) => {\n            return flattenObject(item, `${newKey}[${index}]`);\n          });\n          return {\n            ...acc,\n            ...Object.assign({}, ...arrayValue)\n          };\n        } else {\n          return {\n            ...acc,\n            ...flattenObject(value, newKey)\n          };\n        }\n      } else {\n        return {\n          ...acc,\n          [newKey]: value\n        };\n      }\n    }, {});\n  };\n  const flattenedData = data.map(row => {\n    const newRow = {\n      ...row\n    };\n    columns.forEach(column => {\n      if (newRow[column] && typeof newRow[column] === \"object\") {\n        newRow[column] = flattenObject(newRow[column]);\n      }\n    });\n    return newRow;\n  });\n  return flattenedData;\n};","map":{"version":3,"names":["flattenData","data","columns","newData","map","row","flattenedRow","forEach","column","Object","keys","key","flattenJSONColumns","flattenObject","obj","parentKey","entries","reduce","acc","value","newKey","Array","isArray","arrayValue","item","index","assign","flattenedData","newRow"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/utils.js"],"sourcesContent":["// utils.js\n\nexport const flattenData = (data, columns) => {\n  // Function to flatten the data based on selected columns\n  const newData = data.map((row) => {\n    const flattenedRow = {};\n    columns.forEach((column) => {\n      if (row[column] && typeof row[column] === \"object\") {\n        Object.keys(row[column]).forEach((key) => {\n          flattenedRow[`${column}.${key}`] = row[column][key];\n        });\n      } else {\n        flattenedRow[column] = row[column];\n      }\n    });\n    return flattenedRow;\n  });\n  return newData;\n};\n\nexport const flattenJSONColumns = (data, columns) => {\n  const flattenObject = (obj, parentKey = \"\") => {\n    return Object.entries(obj).reduce((acc, [key, value]) => {\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\n      if (typeof value === \"object\" && value !== null) {\n        if (Array.isArray(value)) {\n          const arrayValue = value.map((item, index) => {\n            return flattenObject(item, `${newKey}[${index}]`);\n          });\n          return { ...acc, ...Object.assign({}, ...arrayValue) };\n        } else {\n          return { ...acc, ...flattenObject(value, newKey) };\n        }\n      } else {\n        return { ...acc, [newKey]: value };\n      }\n    }, {});\n  };\n\n  const flattenedData = data.map((row) => {\n    const newRow = { ...row };\n    columns.forEach((column) => {\n      if (newRow[column] && typeof newRow[column] === \"object\") {\n        newRow[column] = flattenObject(newRow[column]);\n      }\n    });\n    return newRow;\n  });\n\n  return flattenedData;\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,WAAW,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EAC5C;EACA,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAEC,GAAG,IAAK;IAChC,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvBJ,OAAO,CAACK,OAAO,CAAEC,MAAM,IAAK;MAC1B,IAAIH,GAAG,CAACG,MAAM,CAAC,IAAI,OAAOH,GAAG,CAACG,MAAM,CAAC,KAAK,QAAQ,EAAE;QAClDC,MAAM,CAACC,IAAI,CAACL,GAAG,CAACG,MAAM,CAAC,CAAC,CAACD,OAAO,CAAEI,GAAG,IAAK;UACxCL,YAAY,CAAE,GAAEE,MAAO,IAAGG,GAAI,EAAC,CAAC,GAAGN,GAAG,CAACG,MAAM,CAAC,CAACG,GAAG,CAAC;QACrD,CAAC,CAAC;MACJ,CAAC,MAAM;QACLL,YAAY,CAACE,MAAM,CAAC,GAAGH,GAAG,CAACG,MAAM,CAAC;MACpC;IACF,CAAC,CAAC;IACF,OAAOF,YAAY;EACrB,CAAC,CAAC;EACF,OAAOH,OAAO;AAChB,CAAC;AAED,OAAO,MAAMS,kBAAkB,GAAGA,CAACX,IAAI,EAAEC,OAAO,KAAK;EACnD,MAAMW,aAAa,GAAGA,CAACC,GAAG,EAAEC,SAAS,GAAG,EAAE,KAAK;IAC7C,OAAON,MAAM,CAACO,OAAO,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,CAACC,GAAG,EAAE,CAACP,GAAG,EAAEQ,KAAK,CAAC,KAAK;MACvD,MAAMC,MAAM,GAAGL,SAAS,GAAI,GAAEA,SAAU,IAAGJ,GAAI,EAAC,GAAGA,GAAG;MACtD,IAAI,OAAOQ,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;QAC/C,IAAIE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;UACxB,MAAMI,UAAU,GAAGJ,KAAK,CAACf,GAAG,CAAC,CAACoB,IAAI,EAAEC,KAAK,KAAK;YAC5C,OAAOZ,aAAa,CAACW,IAAI,EAAG,GAAEJ,MAAO,IAAGK,KAAM,GAAE,CAAC;UACnD,CAAC,CAAC;UACF,OAAO;YAAE,GAAGP,GAAG;YAAE,GAAGT,MAAM,CAACiB,MAAM,CAAC,CAAC,CAAC,EAAE,GAAGH,UAAU;UAAE,CAAC;QACxD,CAAC,MAAM;UACL,OAAO;YAAE,GAAGL,GAAG;YAAE,GAAGL,aAAa,CAACM,KAAK,EAAEC,MAAM;UAAE,CAAC;QACpD;MACF,CAAC,MAAM;QACL,OAAO;UAAE,GAAGF,GAAG;UAAE,CAACE,MAAM,GAAGD;QAAM,CAAC;MACpC;IACF,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC;EAED,MAAMQ,aAAa,GAAG1B,IAAI,CAACG,GAAG,CAAEC,GAAG,IAAK;IACtC,MAAMuB,MAAM,GAAG;MAAE,GAAGvB;IAAI,CAAC;IACzBH,OAAO,CAACK,OAAO,CAAEC,MAAM,IAAK;MAC1B,IAAIoB,MAAM,CAACpB,MAAM,CAAC,IAAI,OAAOoB,MAAM,CAACpB,MAAM,CAAC,KAAK,QAAQ,EAAE;QACxDoB,MAAM,CAACpB,MAAM,CAAC,GAAGK,aAAa,CAACe,MAAM,CAACpB,MAAM,CAAC,CAAC;MAChD;IACF,CAAC,CAAC;IACF,OAAOoB,MAAM;EACf,CAAC,CAAC;EAEF,OAAOD,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}