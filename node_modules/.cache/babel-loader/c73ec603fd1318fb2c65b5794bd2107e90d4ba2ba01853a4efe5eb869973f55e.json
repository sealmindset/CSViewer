{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  // ... (other states remain the same)\n\n  // New function to process CSV data\n  const processCSVData = csvData => {\n    const parsedData = Papa.parse(csvData, {\n      header: true,\n      skipEmptyLines: true\n    });\n    const flattenedData = parsedData.data.map(row => {\n      const newRow = {\n        ...row\n      };\n      for (const [key, value] of Object.entries(row)) {\n        if (typeof value === \"string\" && value.startsWith(\"{\")) {\n          try {\n            const parsedValue = JSON.parse(value);\n            const flattenedValue = flattenJSON(parsedValue);\n            delete newRow[key];\n            Object.assign(newRow, flattenedValue);\n          } catch (error) {\n            // If JSON parsing fails, leave the original value as is\n          }\n        }\n      }\n      return newRow;\n    });\n    setData(flattenedData);\n    setHeaders(parsedData.meta.fields);\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setDropdownOptions({});\n    setGroupByColumns({});\n  };\n\n  // Helper function to flatten JSON properties\n  const flattenJSON = (obj, prefix = \"\") => {\n    return Object.keys(obj).reduce((acc, key) => {\n      const newKey = prefix ? `${prefix}_${key}` : key;\n      if (typeof obj[key] === \"object\" && !Array.isArray(obj[key]) && obj[key] !== null) {\n        Object.assign(acc, flattenJSON(obj[key], newKey));\n      } else {\n        acc[newKey] = obj[key];\n      }\n      return acc;\n    }, {});\n  };\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        processCSVData(fileContent); // Call the CSV processor function\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly as before\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    // Allow both CSV and JSON files\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    // Check if header is in hiddenColumns array\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    tableData.forEach(row => {\n      const groupKey = Object.entries(groupByColumns).map(([column, selected]) => selected ? row[column] : \"\").join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 333,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 335,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 332,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JK4g1p68AbzL6d/lDwVA5waushU=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","processCSVData","csvData","parsedData","parse","header","skipEmptyLines","flattenedData","map","row","newRow","key","value","Object","entries","startsWith","parsedValue","JSON","flattenedValue","flattenJSON","assign","error","meta","fields","setHiddenColumns","setFilterCriteria","setSearchTerms","setDropdownOptions","setGroupByColumns","obj","prefix","keys","reduce","acc","newKey","Array","isArray","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","jsonData","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","length","substring","omit","hiddenColumns","includes","grow","handleRowClick","setSelectedRowData","setIsModalOpen","handleColumnToggle","column","isChecked","checked","prevHiddenColumns","filter","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","groupAndSortTableData","tableData","groupByColumns","groups","forEach","groupKey","selected","join","push","values","flat","sort","a","b","sortByColumn","find","sortBy","_","aValue","bValue","localeCompare","handleReset","initialState","filterCriteria","searchTerms","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","trim","handleDownload","visibleData","groupedData","newColumn","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevCriteria","prevSearchTerms","list","size","id","dropdownOptions","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","isModalOpen","onRequestClose","contentLabel","overlayClassName","rowData","selectedRowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  // ... (other states remain the same)\n\n  // New function to process CSV data\n  const processCSVData = (csvData) => {\n    const parsedData = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n    const flattenedData = parsedData.data.map((row) => {\n      const newRow = { ...row };\n      for (const [key, value] of Object.entries(row)) {\n        if (typeof value === \"string\" && value.startsWith(\"{\")) {\n          try {\n            const parsedValue = JSON.parse(value);\n            const flattenedValue = flattenJSON(parsedValue);\n            delete newRow[key];\n            Object.assign(newRow, flattenedValue);\n          } catch (error) {\n            // If JSON parsing fails, leave the original value as is\n          }\n        }\n      }\n      return newRow;\n    });\n    setData(flattenedData);\n    setHeaders(parsedData.meta.fields);\n    setRenamedHeaders({});\n    setHiddenColumns([]);\n    setFilterCriteria({});\n    setSearchTerms({});\n    setDropdownOptions({});\n    setGroupByColumns({});\n  };\n\n  // Helper function to flatten JSON properties\n  const flattenJSON = (obj, prefix = \"\") => {\n    return Object.keys(obj).reduce((acc, key) => {\n      const newKey = prefix ? `${prefix}_${key}` : key;\n      if (typeof obj[key] === \"object\" && !Array.isArray(obj[key]) && obj[key] !== null) {\n        Object.assign(acc, flattenJSON(obj[key], newKey));\n      } else {\n        acc[newKey] = obj[key];\n      }\n      return acc;\n    }, {});\n  };\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        processCSVData(fileContent); // Call the CSV processor function\n      } else if (file.name.endsWith(\".json\")) {\n        // Handle JSON data directly as before\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({});\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\", // Allow both CSV and JSON files\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header), // Check if header is in hiddenColumns array\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) => {\n      if (isChecked) {\n        // If column is checked, remove it from hiddenColumns array\n        return prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column);\n      } else {\n        // If column is unchecked, add it to hiddenColumns array\n        return [...prevHiddenColumns, column];\n      }\n    });\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    tableData.forEach((row) => {\n      const groupKey = Object.entries(groupByColumns)\n        .map(([column, selected]) => (selected ? row[column] : \"\"))\n        .join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    // Sort the data based on the groupBy column and any additional sorting criteria\n    return Object.values(groups).flat().sort((a, b) => {\n      // Sort based on the first selected groupBy column\n      const sortByColumn = Object.entries(groupByColumns).find(([column, selected]) => selected);\n      if (sortByColumn) {\n        const [sortBy, _] = sortByColumn;\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (!hiddenColumns.includes(sortBy)) {\n          return aValue.localeCompare(bValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Define missing functions\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}