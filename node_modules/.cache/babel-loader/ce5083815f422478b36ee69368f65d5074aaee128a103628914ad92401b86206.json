{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  // State variables\n  const [data, setData] = useState({\n    items: [],\n    headers: [],\n    renamedHeaders: {},\n    hiddenColumns: [],\n    filterCriteria: {},\n    searchTerms: {},\n    dropdownOptions: {},\n    initialState: {},\n    selectedRowData: {},\n    isModalOpen: false,\n    groupByColumns: {},\n    isFileNameModalOpen: false,\n    selectedFileFormat: \"\",\n    fileName: \"\",\n    groupedData: []\n  });\n  useEffect(() => {\n    const processData = () => {\n      const {\n        items,\n        headers,\n        filterCriteria,\n        searchTerms,\n        groupByColumns\n      } = data;\n      const filteredData = items.filter(row => headers.every(header => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n      }));\n\n      // Update the dropdownOptions state to contain all unique values for each header column\n      const newDropdownOptions = {};\n      headers.forEach(header => {\n        newDropdownOptions[header] = Array.from(new Set(filteredData.map(row => row[header])));\n      });\n      setData(prevData => ({\n        ...prevData,\n        dropdownOptions: newDropdownOptions\n      }));\n\n      // Flatten the PROPERTIES column values in filteredData\n      const flattenedData = filteredData.map(row => ({\n        ...row,\n        PROPERTIES: flattenJSON(row.PROPERTIES)\n      }));\n\n      // Apply group by and sort logic\n      const groupedAndSortedData = groupAndSortTableData(flattenedData);\n      setData(prevData => ({\n        ...prevData,\n        groupedData: groupedAndSortedData\n      }));\n    };\n    processData();\n  }, [data]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData({\n              items: result.data,\n              headers: result.meta.fields,\n              renamedHeaders: {},\n              hiddenColumns: [],\n              filterCriteria: {},\n              searchTerms: {},\n              dropdownOptions: {},\n              groupByColumns: {},\n              initialState: {\n                renamedHeaders: {},\n                hiddenColumns: [],\n                filterCriteria: {},\n                searchTerms: {}\n              }\n            });\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData({\n          items: jsonData,\n          headers: Object.keys(jsonData[0]),\n          renamedHeaders: {},\n          hiddenColumns: [],\n          filterCriteria: {},\n          searchTerms: {},\n          dropdownOptions: {},\n          groupByColumns: {},\n          initialState: {\n            renamedHeaders: {},\n            hiddenColumns: [],\n            filterCriteria: {},\n            searchTerms: {}\n          }\n        });\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...data.headers.slice(0, 1), groupByColumn, ...data.headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: data.renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || data.hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setData(prevData => ({\n      ...prevData,\n      selectedRowData: row,\n      isModalOpen: true\n    }));\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setData(prevData => ({\n      ...prevData,\n      hiddenColumns: isChecked ? prevData.hiddenColumns.filter(hiddenColumn => hiddenColumn !== column) : [...prevData.hiddenColumns, column],\n      renamedHeaders: {\n        ...prevData.renamedHeaders,\n        [column]: isChecked ? undefined : data.renamedHeaders[column]\n      }\n    }));\n  };\n\n  // Handle toggling the \"Group By\" checkbox for a column\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setData(prevData => ({\n      ...prevData,\n      groupByColumns: {\n        ...prevData.groupByColumns,\n        [column]: isChecked\n      }\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    const {\n      groupByColumns,\n      hiddenColumns\n    } = data;\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    const sortColumns = Object.keys(groupByColumns).filter(col => !hiddenColumns.includes(col));\n    tableData.forEach(row => {\n      const groupKey = sortColumns.map(column => row[column]).join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      for (const column of sortColumns) {\n        const aValue = a[column];\n        const bValue = b[column];\n        const sortBy = groupByColumns[column];\n        if (aValue !== bValue) {\n          return sortBy ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n      }\n      return 0;\n    });\n  };\n  const handleReset = () => {\n    setData(prevData => ({\n      ...prevData,\n      renamedHeaders: prevData.initialState.renamedHeaders,\n      hiddenColumns: prevData.initialState.hiddenColumns,\n      filterCriteria: prevData.initialState.filterCriteria,\n      searchTerms: prevData.initialState.searchTerms,\n      groupByColumns: {}\n    }));\n  };\n  const promptFileName = format => {\n    setData(prevData => ({\n      ...prevData,\n      selectedFileFormat: format,\n      isFileNameModalOpen: true\n    }));\n  };\n  const handleFileNameSubmit = () => {\n    setData(prevData => ({\n      ...prevData,\n      isFileNameModalOpen: false\n    }));\n    if (data.fileName.trim() !== \"\") {\n      handleDownload(data.selectedFileFormat, data.fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const {\n      groupedData,\n      headers,\n      renamedHeaders,\n      hiddenColumns\n    } = data;\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  // Section 5: Table\n  const TableSection = () => {\n    const updatedHeaders = [...data.headers.slice(0, 1), groupByColumn, ...data.headers.slice(1)];\n    const columns = updatedHeaders.map(header => ({\n      name: data.renamedHeaders[header] || header,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: row => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || data.hiddenColumns.includes(header),\n      grow: 1\n    }));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: data.groupedData // Use groupedData here instead of filteredData\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !data.hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: data.renamedHeaders[header] || header,\n                  onChange: e => setData(prevData => ({\n                    ...prevData,\n                    renamedHeaders: {\n                      ...prevData.renamedHeaders,\n                      [header]: e.target.value\n                    }\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: data.groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.headers.map(header => {\n              var _data$dropdownOptions;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !data.hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [data.renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${data.renamedHeaders[header] || header}`,\n                      value: data.searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = data.renamedHeaders[header] || header;\n                        setData(prevData => ({\n                          ...prevData,\n                          filterCriteria: {\n                            ...prevData.filterCriteria,\n                            [newColumn]: value\n                          },\n                          searchTerms: {\n                            ...prevData.searchTerms,\n                            [header]: value.slice(-100) // Take the latter part of the value\n                          }\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 417,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 441,\n                        columnNumber: 27\n                      }, this), (_data$dropdownOptions = data.dropdownOptions[header]) === null || _data$dropdownOptions === void 0 ? void 0 : _data$dropdownOptions.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 443,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 440,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 416,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: data.isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setData(prevData => ({\n        ...prevData,\n        isModalOpen: false\n      })) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: data.isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: data.headers,\n        rowData: data.selectedRowData,\n        renamedHeaders: data.renamedHeaders,\n        hiddenColumns: data.hiddenColumns,\n        onClose: () => setData(prevData => ({\n          ...prevData,\n          isModalOpen: false\n        })) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: data.isFileNameModalOpen,\n      onRequestClose: () => setData(prevData => ({\n        ...prevData,\n        isFileNameModalOpen: false\n      })),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: data.fileName,\n            onChange: e => setData(prevData => ({\n              ...prevData,\n              fileName: e.target.value\n            })),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${data.selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5USSSKvk4sp2wUefNDdvT/H07eU=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","items","headers","renamedHeaders","hiddenColumns","filterCriteria","searchTerms","dropdownOptions","initialState","selectedRowData","isModalOpen","groupByColumns","isFileNameModalOpen","selectedFileFormat","fileName","groupedData","processData","filteredData","filter","row","every","header","criteria","searchTerm","toLowerCase","includes","newDropdownOptions","forEach","Array","from","Set","map","prevData","flattenedData","PROPERTIES","groupedAndSortedData","groupAndSortTableData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","meta","fields","jsonData","JSON","Object","keys","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","selector","sortable","wrap","format","value","length","substring","omit","grow","handleRowClick","handleColumnToggle","column","isChecked","checked","hiddenColumn","undefined","handleGroupByToggle","tableData","groups","sortColumns","col","groupKey","join","push","values","flat","sort","a","b","aValue","bValue","sortBy","localeCompare","handleReset","promptFileName","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","newColumn","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","TableSection","className","children","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_data$dropdownOptions","Fragment","placeholder","list","size","id","whiteSpace","overflow","textOverflow","onClick","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  // State variables\n  const [data, setData] = useState({\n    items: [],\n    headers: [],\n    renamedHeaders: {},\n    hiddenColumns: [],\n    filterCriteria: {},\n    searchTerms: {},\n    dropdownOptions: {},\n    initialState: {},\n    selectedRowData: {},\n    isModalOpen: false,\n    groupByColumns: {},\n    isFileNameModalOpen: false,\n    selectedFileFormat: \"\",\n    fileName: \"\",\n    groupedData: [],\n  });\n\n  useEffect(() => {\n    const processData = () => {\n      const { items, headers, filterCriteria, searchTerms, groupByColumns } = data;\n      const filteredData = items.filter((row) =>\n        headers.every((header) => {\n          const criteria = filterCriteria[header];\n          const searchTerm = searchTerms[header];\n          return (\n            (!criteria || criteria === \"All\" || row[header] === criteria) &&\n            (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n          );\n        })\n      );\n\n      // Update the dropdownOptions state to contain all unique values for each header column\n      const newDropdownOptions = {};\n      headers.forEach((header) => {\n        newDropdownOptions[header] = Array.from(new Set(filteredData.map((row) => row[header])));\n      });\n      setData((prevData) => ({\n        ...prevData,\n        dropdownOptions: newDropdownOptions,\n      }));\n\n      // Flatten the PROPERTIES column values in filteredData\n      const flattenedData = filteredData.map((row) => ({\n        ...row,\n        PROPERTIES: flattenJSON(row.PROPERTIES),\n      }));\n\n      // Apply group by and sort logic\n      const groupedAndSortedData = groupAndSortTableData(flattenedData);\n      setData((prevData) => ({\n        ...prevData,\n        groupedData: groupedAndSortedData,\n      }));\n    };\n\n    processData();\n  }, [data]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData({\n              items: result.data,\n              headers: result.meta.fields,\n              renamedHeaders: {},\n              hiddenColumns: [],\n              filterCriteria: {},\n              searchTerms: {},\n              dropdownOptions: {},\n              groupByColumns: {},\n              initialState: {\n                renamedHeaders: {},\n                hiddenColumns: [],\n                filterCriteria: {},\n                searchTerms: {},\n              },\n            });\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData({\n          items: jsonData,\n          headers: Object.keys(jsonData[0]),\n          renamedHeaders: {},\n          hiddenColumns: [],\n          filterCriteria: {},\n          searchTerms: {},\n          dropdownOptions: {},\n          groupByColumns: {},\n          initialState: {\n            renamedHeaders: {},\n            hiddenColumns: [],\n            filterCriteria: {},\n            searchTerms: {},\n          },\n        });\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...data.headers.slice(0, 1), groupByColumn, ...data.headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: data.renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || data.hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setData((prevData) => ({\n      ...prevData,\n      selectedRowData: row,\n      isModalOpen: true,\n    }));\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setData((prevData) => ({\n      ...prevData,\n      hiddenColumns: isChecked\n        ? prevData.hiddenColumns.filter((hiddenColumn) => hiddenColumn !== column)\n        : [...prevData.hiddenColumns, column],\n      renamedHeaders: {\n        ...prevData.renamedHeaders,\n        [column]: isChecked ? undefined : data.renamedHeaders[column],\n      },\n    }));\n  };\n\n  // Handle toggling the \"Group By\" checkbox for a column\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setData((prevData) => ({\n      ...prevData,\n      groupByColumns: {\n        ...prevData.groupByColumns,\n        [column]: isChecked,\n      },\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    const { groupByColumns, hiddenColumns } = data;\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    const sortColumns = Object.keys(groupByColumns).filter((col) => !hiddenColumns.includes(col));\n\n    tableData.forEach((row) => {\n      const groupKey = sortColumns.map((column) => row[column]).join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups).flat().sort((a, b) => {\n      for (const column of sortColumns) {\n        const aValue = a[column];\n        const bValue = b[column];\n        const sortBy = groupByColumns[column];\n        if (aValue !== bValue) {\n          return sortBy ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  const handleReset = () => {\n    setData((prevData) => ({\n      ...prevData,\n      renamedHeaders: prevData.initialState.renamedHeaders,\n      hiddenColumns: prevData.initialState.hiddenColumns,\n      filterCriteria: prevData.initialState.filterCriteria,\n      searchTerms: prevData.initialState.searchTerms,\n      groupByColumns: {},\n    }));\n  };\n\n  const promptFileName = (format) => {\n    setData((prevData) => ({\n      ...prevData,\n      selectedFileFormat: format,\n      isFileNameModalOpen: true,\n    }));\n  };\n\n  const handleFileNameSubmit = () => {\n    setData((prevData) => ({\n      ...prevData,\n      isFileNameModalOpen: false,\n    }));\n    if (data.fileName.trim() !== \"\") {\n      handleDownload(data.selectedFileFormat, data.fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const { groupedData, headers, renamedHeaders, hiddenColumns } = data;\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  // Section 5: Table\n  const TableSection = () => {\n    const updatedHeaders = [...data.headers.slice(0, 1), groupByColumn, ...data.headers.slice(1)];\n\n    const columns = updatedHeaders.map((header) => ({\n      name: data.renamedHeaders[header] || header,\n      selector: header,\n      sortable: true,\n      wrap: true,\n      format: (row) => {\n        const value = row[header];\n        if (value && value.length > 100) {\n          return value.substring(0, 100) + \"...\";\n        }\n        return value;\n      },\n      omit: header === groupByColumn || data.hiddenColumns.includes(header),\n      grow: 1,\n    }));\n\n    return (\n      <div className=\"section section5\">\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={data.groupedData} // Use groupedData here instead of filteredData\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {data.headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!data.hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={data.renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setData((prevData) => ({\n                          ...prevData,\n                          renamedHeaders: {\n                            ...prevData.renamedHeaders,\n                            [header]: e.target.value,\n                          },\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={data.groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {data.headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!data.hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{data.renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${data.renamedHeaders[header] || header}`}\n                          value={data.searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = data.renamedHeaders[header] || header;\n                            setData((prevData) => ({\n                              ...prevData,\n                              filterCriteria: {\n                                ...prevData.filterCriteria,\n                                [newColumn]: value,\n                              },\n                              searchTerms: {\n                                ...prevData.searchTerms,\n                                [header]: value.slice(-100), // Take the latter part of the value\n                              },\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {data.dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <TableSection />\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={data.isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() =>\n          setData((prevData) => ({\n            ...prevData,\n            isModalOpen: false,\n          }))\n        } // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {data.isModalOpen && (\n          <RowPopup\n            headers={data.headers}\n            rowData={data.selectedRowData}\n            renamedHeaders={data.renamedHeaders}\n            hiddenColumns={data.hiddenColumns}\n            onClose={() =>\n              setData((prevData) => ({\n                ...prevData,\n                isModalOpen: false,\n              }))\n            } // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={data.isFileNameModalOpen}\n        onRequestClose={() =>\n          setData((prevData) => ({\n            ...prevData,\n            isFileNameModalOpen: false,\n          }))\n        }\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={data.fileName}\n              onChange={(e) =>\n                setData((prevData) => ({\n                  ...prevData,\n                  fileName: e.target.value,\n                }))\n              }\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${data.selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}