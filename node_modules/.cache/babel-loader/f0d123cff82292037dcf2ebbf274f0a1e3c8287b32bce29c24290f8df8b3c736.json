{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/RowPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./RowPopup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RowPopup = ({\n  headers,\n  rowData,\n  renamedHeaders,\n  hiddenColumns,\n  onClose\n}) => {\n  _s();\n  const visibleHeaders = headers.filter(header => !hiddenColumns.includes(header));\n  const textMeasureRef = useRef(null);\n  const [charWidth, setCharWidth] = useState(0);\n  useEffect(() => {\n    // Calculate the width of 100 characters\n    if (textMeasureRef.current) {\n      const textWidth = textMeasureRef.current.offsetWidth;\n      setCharWidth(textWidth / 100);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row-popup-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close-btn\",\n      onClick: onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      style: {\n        width: `${100 * charWidth * 2 + 40}px`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: `${100 * charWidth * 2}px`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: visibleHeaders.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                maxWidth: `${100 * charWidth}px`,\n                wordWrap: \"break-word\"\n              },\n              children: renamedHeaders[header] || header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                maxWidth: `${256 * charWidth}px`,\n                wordWrap: \"break-word\"\n              },\n              children: rowData[header]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this)]\n          }, header, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: textMeasureRef,\n      id: \"text-measure\",\n      style: {\n        visibility: \"hidden\"\n      },\n      children: \"x\".repeat(100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(RowPopup, \"SM4MQp0b6LNqyNsrVqOnmoxfQUA=\");\n_c = RowPopup;\nexport default RowPopup;\nvar _c;\n$RefreshReg$(_c, \"RowPopup\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","RowPopup","headers","rowData","renamedHeaders","hiddenColumns","onClose","_s","visibleHeaders","filter","header","includes","textMeasureRef","charWidth","setCharWidth","current","textWidth","offsetWidth","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","width","map","maxWidth","wordWrap","ref","id","visibility","repeat","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/RowPopup.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./RowPopup.css\";\n\nconst RowPopup = ({ headers, rowData, renamedHeaders, hiddenColumns, onClose }) => {\n  const visibleHeaders = headers.filter((header) => !hiddenColumns.includes(header));\n  const textMeasureRef = useRef(null);\n  const [charWidth, setCharWidth] = useState(0);\n\n  useEffect(() => {\n    // Calculate the width of 100 characters\n    if (textMeasureRef.current) {\n      const textWidth = textMeasureRef.current.offsetWidth;\n      setCharWidth(textWidth / 100);\n    }\n  }, []);\n\n  return (\n    <div className=\"row-popup-container\">\n      <button className=\"close-btn\" onClick={onClose}>\n        Close\n      </button>\n      <div className=\"table-container\" style={{ width: `${100 * charWidth * 2 + 40}px` }}>\n        <table style={{ width: `${100 * charWidth * 2}px` }}>\n          <tbody>\n            {visibleHeaders.map((header) => (\n              <tr key={header}>\n                <th style={{ maxWidth: `${100 * charWidth}px`, wordWrap: \"break-word\" }}>\n                  {renamedHeaders[header] || header}\n                </th>\n                <td style={{ maxWidth: `${256 * charWidth}px`, wordWrap: \"break-word\" }}>\n                  {rowData[header]}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div ref={textMeasureRef} id=\"text-measure\" style={{ visibility: \"hidden\" }}>\n        {\"x\".repeat(100)}\n      </div>\n    </div>\n  );\n};\n\nexport default RowPopup;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}