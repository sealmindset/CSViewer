{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/CSViewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [groupByColumns, setGroupByColumns] = useState({}); // Define and initialize groupByColumns state\n\n  useEffect(() => {\n    const processData = () => {\n      const filteredData = data.filter(row => headers.every(header => {\n        const criteria = filterCriteria[header];\n        const searchTerm = searchTerms[header];\n        return (!criteria || criteria === \"All\" || row[header] === criteria) && (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()));\n      }));\n\n      // Apply group by and sort logic\n      const groupedAndSortedData = groupAndSortTableData(filteredData);\n      setGroupedData(groupedAndSortedData);\n    };\n    processData();\n  }, [data, headers, filterCriteria, searchTerms]);\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: result => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({}); // Fix setting groupByColumns on file drop\n          }\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({}); // Fix setting groupByColumns on file drop\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false\n  });\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n  const columns = updatedHeaders.map(header => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: row => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1\n  }));\n  const handleRowClick = row => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns(prevHiddenColumns => isChecked ? prevHiddenColumns.filter(hiddenColumn => hiddenColumn !== column) : [...prevHiddenColumns, column]);\n    setRenamedHeaders(prevRenamedHeaders => {\n      const updatedHeaders = {\n        ...prevRenamedHeaders\n      };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns(prevGroupByColumns => ({\n      ...prevGroupByColumns,\n      [column]: isChecked\n    }));\n  };\n  const groupAndSortTableData = tableData => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n    const groups = {};\n    const sortColumns = Object.keys(groupByColumns).filter(col => !hiddenColumns.includes(col));\n    tableData.forEach(row => {\n      const groupKey = sortColumns.map(column => row[column]).join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n    return Object.values(groups).flat().sort((a, b) => {\n      for (const column of sortColumns) {\n        const aValue = a[column];\n        const bValue = b[column];\n        const sortBy = groupByColumns[column];\n        if (aValue !== bValue) {\n          return sortBy ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n      }\n      return 0;\n    });\n  };\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const promptFileName = format => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map(row => headers.reduce((acc, header) => {\n      if (!hiddenColumns.includes(header)) {\n        const newColumn = renamedHeaders[header] || header;\n        acc[newColumn] = row[header];\n      }\n      return acc;\n    }, {}));\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, {\n        header: true\n      });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n    const blob = new Blob([dataToExport], {\n      type: `text/${fileExtension};charset=utf-8;`\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section1\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CVS | JSON Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload CSV|JSON Formatted File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: \"dropzone\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drag 'n' drop a CSV or JSON file here, or click to select a file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section toggle-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"toggle-columns-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: !hiddenColumns.includes(header),\n                  onChange: e => handleColumnToggle(e, header)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"field-name-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: renamedHeaders[header] || header,\n                  onChange: e => setRenamedHeaders(prevRenamedHeaders => ({\n                    ...prevRenamedHeaders,\n                    [header]: e.target.value\n                  })),\n                  maxLength: 100,\n                  style: {\n                    width: \"98%\"\n                  } // Set the input width to 100%\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: groupByColumns[header],\n                    onChange: e => handleGroupByToggle(e, header)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this)]\n            }, header, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"filter-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: headers.map(header => {\n              var _dropdownOptions$head;\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: !hiddenColumns.includes(header) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [renamedHeaders[header] || header, \":\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 300,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"field-name-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: `Search ${renamedHeaders[header] || header}`,\n                      value: searchTerms[header] || \"\",\n                      onChange: e => {\n                        const value = e.target.value;\n                        const newColumn = renamedHeaders[header] || header;\n                        setFilterCriteria(prevCriteria => ({\n                          ...prevCriteria,\n                          [newColumn]: value\n                        }));\n                        setSearchTerms(prevSearchTerms => ({\n                          ...prevSearchTerms,\n                          [header]: value.slice(-100) // Take the latter part of the value\n                        }));\n                      },\n\n                      list: `datalist-${header}`,\n                      maxLength: 98,\n                      size: 95 // Set the input size to 100\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 303,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n                      id: `datalist-${header}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"All\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 324,\n                        columnNumber: 27\n                      }, this), (_dropdownOptions$head = dropdownOptions[header]) === null || _dropdownOptions$head === void 0 ? void 0 : _dropdownOptions$head.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: value,\n                        style: {\n                          width: \"100%\",\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\"\n                        },\n                        children: value.length > 100 ? `...${value.slice(-100)}` : value\n                      }, value, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 326,\n                        columnNumber: 29\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 21\n                }, this)\n              }, header, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          columns: columns,\n          data: groupedData // Replace 'filteredData' with 'groupedData'\n          ,\n          pagination: true,\n          paginationPerPage: 10,\n          onRowClicked: handleRowClick,\n          noHeader: true,\n          customStyles: {\n            headCells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                fontWeight: \"bold\",\n                textAlign: \"left\"\n              }\n            },\n            cells: {\n              style: {\n                paddingLeft: \"8px\",\n                paddingRight: \"8px\",\n                paddingTop: \"8px\",\n                paddingBottom: \"8px\",\n                textAlign: \"left\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen // Conditionally show/hide the modal based on isModalOpen state\n      ,\n      onRequestClose: () => setIsModalOpen(false) // Close the modal when requested\n      ,\n      contentLabel: \"Row Popup\",\n      className: \"row-popup-modal\",\n      overlayClassName: \"row-popup-modal-overlay\",\n      children: isModalOpen && /*#__PURE__*/_jsxDEV(RowPopup, {\n        headers: headers,\n        rowData: selectedRowData,\n        renamedHeaders: renamedHeaders,\n        hiddenColumns: hiddenColumns,\n        onClose: () => setIsModalOpen(false) // Close the modal when the Close button is clicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section section6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"csv\"),\n          children: \"Download CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => promptFileName(\"json\"),\n          children: \"Download JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isFileNameModalOpen,\n      onRequestClose: () => setIsFileNameModalOpen(false),\n      contentLabel: \"Enter Filename\",\n      className: \"filename-modal\",\n      overlayClassName: \"filename-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filename-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Enter Filename\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filename-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: fileName,\n            onChange: e => setFileName(e.target.value),\n            placeholder: `Enter filename`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-extension\",\n            children: `.${selectedFileFormat}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileNameSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"j2YVe6hmvX6w64edRh3DugvieCA=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","DataTable","useDropzone","Modal","RowPopup","flattenJSON","jsxDEV","_jsxDEV","setAppElement","App","_s","data","setData","headers","setHeaders","renamedHeaders","setRenamedHeaders","hiddenColumns","setHiddenColumns","filterCriteria","setFilterCriteria","searchTerms","setSearchTerms","dropdownOptions","setDropdownOptions","initialState","setInitialState","selectedRowData","setSelectedRowData","isModalOpen","setIsModalOpen","groupedData","setGroupedData","groupByColumns","setGroupByColumns","processData","filteredData","filter","row","every","header","criteria","searchTerm","toLowerCase","includes","groupedAndSortedData","groupAndSortTableData","handleDrop","acceptedFiles","file","reader","FileReader","onload","event","fileContent","target","result","name","endsWith","parse","skipEmptyLines","complete","meta","fields","jsonData","JSON","Object","keys","alert","readAsText","getRootProps","getInputProps","onDrop","accept","multiple","groupByColumn","updatedHeaders","slice","columns","map","selector","sortable","wrap","format","value","length","substring","omit","grow","handleRowClick","handleColumnToggle","column","isChecked","checked","prevHiddenColumns","hiddenColumn","prevRenamedHeaders","handleGroupByToggle","prevGroupByColumns","tableData","groups","sortColumns","col","forEach","groupKey","join","push","values","flat","sort","a","b","aValue","bValue","sortBy","localeCompare","handleReset","isFileNameModalOpen","setIsFileNameModalOpen","selectedFileFormat","setSelectedFileFormat","fileName","setFileName","promptFileName","handleFileNameSubmit","trim","handleDownload","visibleData","reduce","acc","newColumn","dataToExport","fileExtension","unparse","stringify","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","_jsxFileName","lineNumber","columnNumber","onChange","e","maxLength","width","_dropdownOptions$head","Fragment","placeholder","prevCriteria","prevSearchTerms","list","size","id","whiteSpace","overflow","textOverflow","onClick","pagination","paginationPerPage","onRowClicked","noHeader","customStyles","headCells","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","textAlign","cells","isOpen","onRequestClose","contentLabel","overlayClassName","rowData","onClose","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/CSViewer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport DataTable from \"react-data-table-component\";\nimport { useDropzone } from \"react-dropzone\";\nimport Modal from \"react-modal\";\nimport RowPopup from \"./RowPopup\";\nimport { flattenJSON } from \"./utils\";\nimport \"./App.css\";\n\nModal.setAppElement(\"#root\");\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [renamedHeaders, setRenamedHeaders] = useState({});\n  const [hiddenColumns, setHiddenColumns] = useState([]);\n  const [filterCriteria, setFilterCriteria] = useState({});\n  const [searchTerms, setSearchTerms] = useState({});\n  const [dropdownOptions, setDropdownOptions] = useState({});\n  const [initialState, setInitialState] = useState({});\n  const [selectedRowData, setSelectedRowData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [groupedData, setGroupedData] = useState([]);\n  const [groupByColumns, setGroupByColumns] = useState({}); // Define and initialize groupByColumns state\n\n  useEffect(() => {\n    const processData = () => {\n      const filteredData = data.filter((row) =>\n        headers.every((header) => {\n          const criteria = filterCriteria[header];\n          const searchTerm = searchTerms[header];\n          return (\n            (!criteria || criteria === \"All\" || row[header] === criteria) &&\n            (!searchTerm || row[header].toLowerCase().includes(searchTerm.toLowerCase()))\n          );\n        })\n      );\n\n      // Apply group by and sort logic\n      const groupedAndSortedData = groupAndSortTableData(filteredData);\n      setGroupedData(groupedAndSortedData);\n    };\n\n    processData();\n  }, [data, headers, filterCriteria, searchTerms]);\n\n  const handleDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const fileContent = event.target.result;\n      if (file.name.endsWith(\".csv\")) {\n        Papa.parse(fileContent, {\n          header: true,\n          skipEmptyLines: true,\n          complete: (result) => {\n            setData(result.data);\n            setHeaders(result.meta.fields);\n            setRenamedHeaders({});\n            setHiddenColumns([]);\n            setFilterCriteria({});\n            setSearchTerms({});\n            setDropdownOptions({});\n            setGroupByColumns({}); // Fix setting groupByColumns on file drop\n          },\n        });\n      } else if (file.name.endsWith(\".json\")) {\n        const jsonData = JSON.parse(fileContent);\n        setData(jsonData);\n        setHeaders(Object.keys(jsonData[0]));\n        setRenamedHeaders({});\n        setHiddenColumns([]);\n        setFilterCriteria({});\n        setSearchTerms({});\n        setDropdownOptions({});\n        setGroupByColumns({}); // Fix setting groupByColumns on file drop\n      } else {\n        alert(\"Unsupported file format. Please upload either CSV or JSON file.\");\n      }\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    accept: \".csv, .json\",\n    multiple: false,\n  });\n\n  const groupByColumn = \"groupby\";\n  const updatedHeaders = [...headers.slice(0, 1), groupByColumn, ...headers.slice(1)];\n\n  const columns = updatedHeaders.map((header) => ({\n    name: renamedHeaders[header] || header,\n    selector: header,\n    sortable: true,\n    wrap: true,\n    format: (row) => {\n      const value = row[header];\n      if (value && value.length > 100) {\n        return value.substring(0, 100) + \"...\";\n      }\n      return value;\n    },\n    omit: header === groupByColumn || hiddenColumns.includes(header),\n    grow: 1,\n  }));\n\n  const handleRowClick = (row) => {\n    setSelectedRowData(row);\n    setIsModalOpen(true);\n  };\n\n  const handleColumnToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setHiddenColumns((prevHiddenColumns) =>\n      isChecked\n        ? prevHiddenColumns.filter((hiddenColumn) => hiddenColumn !== column)\n        : [...prevHiddenColumns, column]\n    );\n    setRenamedHeaders((prevRenamedHeaders) => {\n      const updatedHeaders = { ...prevRenamedHeaders };\n      if (!isChecked) {\n        delete updatedHeaders[column];\n      }\n      return updatedHeaders;\n    });\n  };\n\n  const handleGroupByToggle = (event, column) => {\n    const isChecked = event.target.checked;\n    setGroupByColumns((prevGroupByColumns) => ({\n      ...prevGroupByColumns,\n      [column]: isChecked,\n    }));\n  };\n\n  const groupAndSortTableData = (tableData) => {\n    if (Object.keys(groupByColumns).length === 0) {\n      return tableData;\n    }\n\n    const groups = {};\n    const sortColumns = Object.keys(groupByColumns).filter((col) => !hiddenColumns.includes(col));\n\n    tableData.forEach((row) => {\n      const groupKey = sortColumns.map((column) => row[column]).join(\"-\");\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(row);\n    });\n\n    return Object.values(groups).flat().sort((a, b) => {\n      for (const column of sortColumns) {\n        const aValue = a[column];\n        const bValue = b[column];\n        const sortBy = groupByColumns[column];\n        if (aValue !== bValue) {\n          return sortBy ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n        }\n      }\n      return 0;\n    });\n  };\n\n  const handleReset = () => {\n    setRenamedHeaders(initialState.renamedHeaders);\n    setHiddenColumns(initialState.hiddenColumns);\n    setFilterCriteria(initialState.filterCriteria);\n    setSearchTerms(initialState.searchTerms);\n    setGroupByColumns({});\n  };\n\n  const [isFileNameModalOpen, setIsFileNameModalOpen] = useState(false);\n  const [selectedFileFormat, setSelectedFileFormat] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const promptFileName = (format) => {\n    setSelectedFileFormat(format);\n    setIsFileNameModalOpen(true);\n  };\n\n  const handleFileNameSubmit = () => {\n    setIsFileNameModalOpen(false);\n    if (fileName.trim() !== \"\") {\n      handleDownload(selectedFileFormat, fileName);\n    }\n  };\n\n  const handleDownload = (format, fileName) => {\n    const visibleData = groupedData.map((row) =>\n      headers.reduce((acc, header) => {\n        if (!hiddenColumns.includes(header)) {\n          const newColumn = renamedHeaders[header] || header;\n          acc[newColumn] = row[header];\n        }\n        return acc;\n      }, {})\n    );\n\n    let dataToExport, fileExtension;\n    if (format === \"csv\") {\n      dataToExport = Papa.unparse(visibleData, { header: true });\n      fileExtension = \"csv\";\n    } else if (format === \"json\") {\n      dataToExport = JSON.stringify(visibleData, null, 2);\n      fileExtension = \"json\";\n    }\n\n    const blob = new Blob([dataToExport], { type: `text/${fileExtension};charset=utf-8;` });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `${fileName}.${fileExtension}`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Section 1: Header or Title - CVS Table Display */}\n      <div className=\"section section1\">\n        <h1>CVS | JSON Viewer</h1>\n      </div>\n\n      {/* Section 2: CVS File Input */}\n      <div className=\"section section2\">\n        <div className=\"upload-container\">\n          <h2>Upload CSV|JSON Formatted File</h2>\n          <div {...getRootProps()} className=\"dropzone\">\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop a CSV or JSON file here, or click to select a file</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Toggle Section */}\n      <div className=\"section toggle-section\">\n        <div className=\"toggle-table-container\">\n          <table className=\"toggle-columns-table\">\n            <tbody>\n              {headers.map((header) => (\n                <tr key={header}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={!hiddenColumns.includes(header)}\n                      onChange={(e) => handleColumnToggle(e, header)}\n                    />\n                  </td>\n                  <td className=\"field-name-cell\">\n                    <input\n                      type=\"text\"\n                      value={renamedHeaders[header] || header}\n                      onChange={(e) =>\n                        setRenamedHeaders((prevRenamedHeaders) => ({\n                          ...prevRenamedHeaders,\n                          [header]: e.target.value,\n                        }))\n                      }\n                      maxLength={100}\n                      style={{ width: \"98%\" }} // Set the input width to 100%\n                    />\n                  </td>\n                  <td>\n                    {/* Add \"Group By\" text next to the checkmark */}\n                    <label>\n                      Group By:\n                      <input\n                        type=\"checkbox\"\n                        checked={groupByColumns[header]}\n                        onChange={(e) => handleGroupByToggle(e, header)}\n                      />\n                    </label>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Section 4: Filter Section */}\n      <div className=\"section filter-section\">\n        <div className=\"filter-table-container\">\n          <table className=\"filter-table\">\n            <tbody>\n              {headers.map((header) => (\n                <React.Fragment key={header}>\n                  {!hiddenColumns.includes(header) && (\n                    <tr>\n                      <td>\n                        <span>{renamedHeaders[header] || header}:</span>\n                      </td>\n                      <td className=\"field-name-cell\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Search ${renamedHeaders[header] || header}`}\n                          value={searchTerms[header] || \"\"}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            const newColumn = renamedHeaders[header] || header;\n                            setFilterCriteria((prevCriteria) => ({\n                              ...prevCriteria,\n                              [newColumn]: value,\n                            }));\n                            setSearchTerms((prevSearchTerms) => ({\n                              ...prevSearchTerms,\n                              [header]: value.slice(-100), // Take the latter part of the value\n                            }));\n                          }}\n                          list={`datalist-${header}`}\n                          maxLength={98}\n                          size={95} // Set the input size to 100\n                        />\n                        <datalist id={`datalist-${header}`}>\n                          <option value=\"All\" />\n                          {dropdownOptions[header]?.map((value) => (\n                            <option\n                              key={value}\n                              value={value}\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                              }}\n                            >\n                              {value.length > 100 ? `...${value.slice(-100)}` : value}\n                            </option>\n                          ))}\n                        </datalist>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n\n      {/* Section 5: Table */}\n      <div className=\"section section5\">\n        {/* ... (content for table section) */}\n        <div className=\"table-container\">\n          <DataTable\n            columns={columns}\n            data={groupedData} // Replace 'filteredData' with 'groupedData'\n            pagination\n            paginationPerPage={10}\n            onRowClicked={handleRowClick}\n            noHeader\n            customStyles={{\n              headCells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  fontWeight: \"bold\",\n                  textAlign: \"left\",\n                },\n              },\n              cells: {\n                style: {\n                  paddingLeft: \"8px\",\n                  paddingRight: \"8px\",\n                  paddingTop: \"8px\",\n                  paddingBottom: \"8px\",\n                  textAlign: \"left\",\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Modal for displaying the RowPopup */}\n      <Modal\n        isOpen={isModalOpen} // Conditionally show/hide the modal based on isModalOpen state\n        onRequestClose={() => setIsModalOpen(false)} // Close the modal when requested\n        contentLabel=\"Row Popup\"\n        className=\"row-popup-modal\"\n        overlayClassName=\"row-popup-modal-overlay\"\n      >\n        {isModalOpen && (\n          <RowPopup\n            headers={headers}\n            rowData={selectedRowData}\n            renamedHeaders={renamedHeaders}\n            hiddenColumns={hiddenColumns}\n            onClose={() => setIsModalOpen(false)} // Close the modal when the Close button is clicked\n          />\n        )}\n      </Modal>\n\n      {/* Section 6: Download Buttons for CSV and JSON */}\n      <div className=\"section section6\">\n        <div className=\"download-buttons\">\n          <button onClick={() => promptFileName(\"csv\")}>Download CSV</button>\n          <button onClick={() => promptFileName(\"json\")}>Download JSON</button>\n        </div>\n      </div>\n\n      {/* Modal for FileName */}\n      <Modal\n        isOpen={isFileNameModalOpen}\n        onRequestClose={() => setIsFileNameModalOpen(false)}\n        contentLabel=\"Enter Filename\"\n        className=\"filename-modal\"\n        overlayClassName=\"filename-modal-overlay\"\n      >\n        <div className=\"filename-modal-content\">\n          <h2>Enter Filename</h2>\n          <div className=\"filename-input-container\">\n            <input\n              type=\"text\"\n              value={fileName}\n              onChange={(e) => setFileName(e.target.value)}\n              placeholder={`Enter filename`}\n            />\n            <span className=\"file-extension\">{`.${selectedFileFormat}`}</span>\n          </div>\n          <button onClick={handleFileNameSubmit}>Submit</button>\n        </div>\n      </Modal>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}